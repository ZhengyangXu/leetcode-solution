{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\n\u642d\u5efa\u8fd9\u4e2a\u535a\u5ba2\u7684\u53c2\u8003\u8d44\u6599\n\n\nmkdocs \u5b98\u65b9\u4e2d\u6587\u7f51\u7ad9\n\n\nmkdocs \u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\uff08\u6765\u81ea mkdocs \u5b98\u65b9\u4e2d\u6587\u7f51\u7ad9\uff09\n\n\nhttp://yangfangs.github.io/2016/08/09/install-build-mkdocs/\nhttps://www.jianshu.com/p/d78e9f741a79\nhttps://blog.csdn.net/Marksinoberg/article/details/51766969\nhttps://www.mkdocs.org/user-guide/deploying-your-docs/\nhttps://foreachsam.github.io/book-util-mkdocs/book/content/command/gh-deploy/\nhttps://tartaricacid.github.io/2017/10/29/MkdocsWiki/\nhttp://jimmyleeking.github.io/YouAreWellcome/env/mkdocs_github_use/\nhttps://blog.csdn.net/KevinDGK/article/details/52388542\n\n\n\u81ea\u52a8\u53d1\u5e03\u5230 GitHub \u4e0a\n\n\n1\u3001\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e \nrepo_url\n \u9879\uff08\u53ef\u80fd\u8fde\u8fd9\u4e00\u6b65\u90fd\u4e0d\u7528\u5427\uff0c\u6211\u611f\u89c9\u8ddf\u4e0b\u4e00\u6b65\u91cd\u590d\u4e86\uff09\uff1a\n\n\nrepo_url: https://github.com/liweiwei1419/leetcode-solution.git\n\n\n\n\n2\u3001\u5728\u6211\u4eec\u7684 mkdocs \u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u521d\u59cb\u5316 git \u9879\u76ee\uff0c\u5e76\u4e14\u6dfb\u52a0\u8fdc\u7a0b GitHub \u4ed3\u5e93\u7684\u94fe\u63a5\uff1a\n\n\ngit init\ngit remote add origin <GitHub \u4ed3\u5e93\u94fe\u63a5>\n\n\n\n\n3\u3001\u6267\u884c \nmkdocs gh-deploy\n \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5c06 site \u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\u53d1\u5e03\u5230 GitHub \u4ed3\u5e93\u7684 \ngh-pages \u5206\u652f\n\uff1b\n\n4\u3001\u901a\u8fc7\u5730\u5740 \nhttps://<GitHub \u7528\u6237\u540d>.github.io/<GitHub \u4ed3\u5e93\u540d>/\n \u53ef\u4ee5\u8bbf\u95ee\u3002\n\u4f8b\u5982\u6211\u7684\u5730\u5740\u5c31\u662f\uff1a\nhttps://liweiwei1419.github.io/leetcode-solution/\n\u3002",
            "title": "Welcome to MkDocs"
        },
        {
            "location": "/#welcome-to-mkdocs",
            "text": "For full documentation visit  mkdocs.org .",
            "title": "Welcome to MkDocs"
        },
        {
            "location": "/#commands",
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "Commands"
        },
        {
            "location": "/#project-layout",
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.",
            "title": "Project layout"
        },
        {
            "location": "/#_1",
            "text": "mkdocs \u5b98\u65b9\u4e2d\u6587\u7f51\u7ad9  mkdocs \u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\uff08\u6765\u81ea mkdocs \u5b98\u65b9\u4e2d\u6587\u7f51\u7ad9\uff09  http://yangfangs.github.io/2016/08/09/install-build-mkdocs/\nhttps://www.jianshu.com/p/d78e9f741a79\nhttps://blog.csdn.net/Marksinoberg/article/details/51766969\nhttps://www.mkdocs.org/user-guide/deploying-your-docs/\nhttps://foreachsam.github.io/book-util-mkdocs/book/content/command/gh-deploy/\nhttps://tartaricacid.github.io/2017/10/29/MkdocsWiki/\nhttp://jimmyleeking.github.io/YouAreWellcome/env/mkdocs_github_use/\nhttps://blog.csdn.net/KevinDGK/article/details/52388542",
            "title": "\u642d\u5efa\u8fd9\u4e2a\u535a\u5ba2\u7684\u53c2\u8003\u8d44\u6599"
        },
        {
            "location": "/#github",
            "text": "1\u3001\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e  repo_url  \u9879\uff08\u53ef\u80fd\u8fde\u8fd9\u4e00\u6b65\u90fd\u4e0d\u7528\u5427\uff0c\u6211\u611f\u89c9\u8ddf\u4e0b\u4e00\u6b65\u91cd\u590d\u4e86\uff09\uff1a  repo_url: https://github.com/liweiwei1419/leetcode-solution.git  2\u3001\u5728\u6211\u4eec\u7684 mkdocs \u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u521d\u59cb\u5316 git \u9879\u76ee\uff0c\u5e76\u4e14\u6dfb\u52a0\u8fdc\u7a0b GitHub \u4ed3\u5e93\u7684\u94fe\u63a5\uff1a  git init\ngit remote add origin <GitHub \u4ed3\u5e93\u94fe\u63a5>  3\u3001\u6267\u884c  mkdocs gh-deploy  \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5c06 site \u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\u53d1\u5e03\u5230 GitHub \u4ed3\u5e93\u7684  gh-pages \u5206\u652f \uff1b \n4\u3001\u901a\u8fc7\u5730\u5740  https://<GitHub \u7528\u6237\u540d>.github.io/<GitHub \u4ed3\u5e93\u540d>/  \u53ef\u4ee5\u8bbf\u95ee\u3002\n\u4f8b\u5982\u6211\u7684\u5730\u5740\u5c31\u662f\uff1a https://liweiwei1419.github.io/leetcode-solution/ \u3002",
            "title": "\u81ea\u52a8\u53d1\u5e03\u5230 GitHub \u4e0a"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/",
            "text": "17. Letter Combinations of a Phone Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n17. Letter Combinations of a Phone Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u65b9\u5f0f\u8fdb\u884c\u641c\u7d22\u6c42\u89e3\u3002\n\n\n\u5bf9\u4e8e\u95ee\u9898\u7684\u8003\u8651\uff1a\n1\u3001\u5b57\u7b26\u4e32\u7684\u5408\u6cd5\u6027\uff08\u80fd\u51fa\u73b0\u4ec0\u4e48\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u201c@\u201d\u53ef\u4ee5\u5417\uff1f\u201c1\u201d\u53ef\u4ee5\u5417\uff1f\uff09\uff1a\u4e0d\u53ef\u4ee5\uff0c\u53ea\u80fd\u51fa\u73b0 2\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u3002\n2\u3001\u7a7a\u5b57\u7b26\u4e32\uff08\u5982\u679c\u7ed9\u51fa\u7684\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ec0\u4e48\uff09\uff1a\u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u5373\u5143\u7d20\u4e2a\u6570\u4e3a 0 \u7684\u5217\u8868\u3002\n3\u3001\u591a\u4e2a\u89e3\u7684\u987a\u5e8f\uff1f\u9898\u76ee\u5df2\u7ecf\u544a\u8bc9\u4e86\u6211\u4eec\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5bf9\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002\n\u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u95ee\u9898\u66f4\u50cf\u6570\u5b66\u95ee\u9898\u4e2d\u7684\u4e58\u6cd5\u8ba1\u6570\u539f\u7406\uff1a\u7b2c 1 \u6b65\uff0c\u8003\u8651\u6570\u5b57 2 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\uff1b\u7b2c 2 \u6b65\uff0c\u8003\u8651 3 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6700\u5bb9\u6613\u60f3\u5230\u7528\u591a\u91cd\u5faa\u73af\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\u5728\u6b65\u6570\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5faa\u73af\u5c31\u53d8\u5f97\u4f4e\u6548\u4e86\u3002\u6b64\u65f6\uff0c\u9012\u5f52\u56de\u6eaf\u8fd9\u4e2a\u6280\u5de7\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n\n\n\u601d\u8003\u603b\u7ed3\uff1a\n1\u3001\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u518d\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684 letterCombinations \u51fd\u6570\u4e2d\u4e66\u5199\u5462\uff1f\u9012\u5f52\u8fc7\u7a0b\u662f\u628a\u4e00\u4e2a\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u5730\u8f6c\u5316\u6210\u4e3a\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u800c\u6211\u4eec\u53d1\u73b0\u7684\u9012\u5f52\u5173\u7cfb\u5e76\u4e0d\u80fd\u7528 letterCombinations \u51fd\u6570\u6765\u63cf\u8ff0\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f7f\u7528 letterCombinations() \u6765\u8868\u8ff0\uff1b\n\n2\u3001\u7ec6\u8282\u8003\u8651\u8981\u5468\u5230\uff1a\u6211\u4eec\u5728\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5ffd\u7565\u8fb9\u754c\u7684\u60c5\u51b5\u7684\u5904\u7406\uff1b\u540c\u65f6\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u7279\u522b\u662f\u5bf9\u8fb9\u754c\u7684\u60c5\u51b5\uff1b\n\n3\u3001\u5982\u4f55\u8bbe\u8ba1\u9012\u5f52\u65b9\u6cd5\u5176\u5b9e\u662f\u6709\u56fa\u5b9a\u6a21\u5f0f\u7684\uff0c\u53c2\u6570\u7684\u8bbe\u5b9a\u4e5f\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u65e0\u975e\u662f\u5f04\u6e05\u695a\u4e4b\u524d\u662f\u4ec0\u4e48\uff0c\u5f53\u524d\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u628a\u5f53\u524d\u7684\u52a0\u5230\u4e4b\u524d\u7684\uff1b\n\n4\u3001\u5bf9\u4e8e\u6570\u5b57\u5b57\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f \ndigits.charAt(index) - '0'\n\uff1b\n5\u3001\u4e25\u683c\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd8\u8981\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u7684\u5408\u6cd5\u6027\u4f5c\u5224\u65ad\uff0c\u4f8b\u5982\uff1a\nassert c >= '0' || c <= '9' || c != '1';\n\uff1b\n\n6\u3001findCombination \u51fd\u6570\u4e2d\u7684 digitsMap \u53ef\u4ee5\u5199\u6210\u6210\u5458\u53d8\u91cf\uff1b\n\n7\u3001\u8fd9\u91cc\u56e0\u4e3a String \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u5b9e\u90fd\u662f\u65b0\u7684\u5bf9\u8c61\u4f20\u9012\u4e0b\u53bb\uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u540e\u7eed\u7684\u7ec3\u4e60\u4e2d\u8981\u7559\u610f\uff08\u8fd9\u53e5\u8bdd\u8868\u8fbe\u6bd4\u8f83\u9690\u6666\uff0c\u8981\u6df1\u523b\u7406\u89e3\u8fd9\u4e2a\u4e8b\u5b9e\u8fd8\u8981\u505a\u540e\u9762\u7684\u7ec3\u4e60\uff0c\u5f53 result \u662f\u5176\u5b83\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u80fd\u7b80\u5355\u7684 add \u64cd\u4f5c\u4e86\uff09\uff1b\n\n8\u3001\u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u7684\u7ed3\u679c\u662f\u5f88\u6574\u9f50\u7684\uff0c\u5728\u540e\u5e8f\u7684\u5b66\u4e60\u4e2d\u6211\u4eec\u5c31\u4f1a\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e00\u79cd\u4f53\u73b0\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n    private String[] digitsMap = {\n            \" \", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\",\n            \"pqrs\", \"tuv\", \"wxyz\"\n    };\n\n    private void findCombinations(String digits, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (begin == digits.length()) {\n            res.add(pre);\n            return;\n        }\n        String nextStr = digitsMap[digits.charAt(begin) - '0'];\n        // \u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u9898\u610f\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u8981\u8003\u8651\u5230\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u5faa\u73af\n        for (int i = 0; i < nextStr.length(); i++) {\n            findCombinations(digits, begin + 1, pre + nextStr.charAt(i));\n        }\n    }\n\n    public List<String> letterCombinations(String digits) {\n        if (digits.length() == 0) {\n            return res;\n        }\n        findCombinations(digits, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> letterCombinations = solution.letterCombinations(\"23\");\n        System.out.println(letterCombinations);\n    }\n}",
            "title": "17. Letter Combinations of a Phone Number"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#17-letter-combinations-of-a-phone-number",
            "text": "",
            "title": "17. Letter Combinations of a Phone Number"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 17. Letter Combinations of a Phone Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u65b9\u5f0f\u8fdb\u884c\u641c\u7d22\u6c42\u89e3\u3002  \u5bf9\u4e8e\u95ee\u9898\u7684\u8003\u8651\uff1a\n1\u3001\u5b57\u7b26\u4e32\u7684\u5408\u6cd5\u6027\uff08\u80fd\u51fa\u73b0\u4ec0\u4e48\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u201c@\u201d\u53ef\u4ee5\u5417\uff1f\u201c1\u201d\u53ef\u4ee5\u5417\uff1f\uff09\uff1a\u4e0d\u53ef\u4ee5\uff0c\u53ea\u80fd\u51fa\u73b0 2\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u3002\n2\u3001\u7a7a\u5b57\u7b26\u4e32\uff08\u5982\u679c\u7ed9\u51fa\u7684\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ec0\u4e48\uff09\uff1a\u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u5373\u5143\u7d20\u4e2a\u6570\u4e3a 0 \u7684\u5217\u8868\u3002\n3\u3001\u591a\u4e2a\u89e3\u7684\u987a\u5e8f\uff1f\u9898\u76ee\u5df2\u7ecf\u544a\u8bc9\u4e86\u6211\u4eec\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5bf9\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002\n\u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u95ee\u9898\u66f4\u50cf\u6570\u5b66\u95ee\u9898\u4e2d\u7684\u4e58\u6cd5\u8ba1\u6570\u539f\u7406\uff1a\u7b2c 1 \u6b65\uff0c\u8003\u8651\u6570\u5b57 2 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\uff1b\u7b2c 2 \u6b65\uff0c\u8003\u8651 3 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6700\u5bb9\u6613\u60f3\u5230\u7528\u591a\u91cd\u5faa\u73af\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\u5728\u6b65\u6570\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5faa\u73af\u5c31\u53d8\u5f97\u4f4e\u6548\u4e86\u3002\u6b64\u65f6\uff0c\u9012\u5f52\u56de\u6eaf\u8fd9\u4e2a\u6280\u5de7\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\u3002  \u601d\u8003\u603b\u7ed3\uff1a\n1\u3001\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u518d\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684 letterCombinations \u51fd\u6570\u4e2d\u4e66\u5199\u5462\uff1f\u9012\u5f52\u8fc7\u7a0b\u662f\u628a\u4e00\u4e2a\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u5730\u8f6c\u5316\u6210\u4e3a\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u800c\u6211\u4eec\u53d1\u73b0\u7684\u9012\u5f52\u5173\u7cfb\u5e76\u4e0d\u80fd\u7528 letterCombinations \u51fd\u6570\u6765\u63cf\u8ff0\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f7f\u7528 letterCombinations() \u6765\u8868\u8ff0\uff1b \n2\u3001\u7ec6\u8282\u8003\u8651\u8981\u5468\u5230\uff1a\u6211\u4eec\u5728\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5ffd\u7565\u8fb9\u754c\u7684\u60c5\u51b5\u7684\u5904\u7406\uff1b\u540c\u65f6\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u7279\u522b\u662f\u5bf9\u8fb9\u754c\u7684\u60c5\u51b5\uff1b \n3\u3001\u5982\u4f55\u8bbe\u8ba1\u9012\u5f52\u65b9\u6cd5\u5176\u5b9e\u662f\u6709\u56fa\u5b9a\u6a21\u5f0f\u7684\uff0c\u53c2\u6570\u7684\u8bbe\u5b9a\u4e5f\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u65e0\u975e\u662f\u5f04\u6e05\u695a\u4e4b\u524d\u662f\u4ec0\u4e48\uff0c\u5f53\u524d\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u628a\u5f53\u524d\u7684\u52a0\u5230\u4e4b\u524d\u7684\uff1b \n4\u3001\u5bf9\u4e8e\u6570\u5b57\u5b57\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f  digits.charAt(index) - '0' \uff1b\n5\u3001\u4e25\u683c\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd8\u8981\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u7684\u5408\u6cd5\u6027\u4f5c\u5224\u65ad\uff0c\u4f8b\u5982\uff1a assert c >= '0' || c <= '9' || c != '1'; \uff1b \n6\u3001findCombination \u51fd\u6570\u4e2d\u7684 digitsMap \u53ef\u4ee5\u5199\u6210\u6210\u5458\u53d8\u91cf\uff1b \n7\u3001\u8fd9\u91cc\u56e0\u4e3a String \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u5b9e\u90fd\u662f\u65b0\u7684\u5bf9\u8c61\u4f20\u9012\u4e0b\u53bb\uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u540e\u7eed\u7684\u7ec3\u4e60\u4e2d\u8981\u7559\u610f\uff08\u8fd9\u53e5\u8bdd\u8868\u8fbe\u6bd4\u8f83\u9690\u6666\uff0c\u8981\u6df1\u523b\u7406\u89e3\u8fd9\u4e2a\u4e8b\u5b9e\u8fd8\u8981\u505a\u540e\u9762\u7684\u7ec3\u4e60\uff0c\u5f53 result \u662f\u5176\u5b83\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u80fd\u7b80\u5355\u7684 add \u64cd\u4f5c\u4e86\uff09\uff1b \n8\u3001\u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u7684\u7ed3\u679c\u662f\u5f88\u6574\u9f50\u7684\uff0c\u5728\u540e\u5e8f\u7684\u5b66\u4e60\u4e2d\u6211\u4eec\u5c31\u4f1a\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e00\u79cd\u4f53\u73b0\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n    private String[] digitsMap = {\n            \" \", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\",\n            \"pqrs\", \"tuv\", \"wxyz\"\n    };\n\n    private void findCombinations(String digits, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (begin == digits.length()) {\n            res.add(pre);\n            return;\n        }\n        String nextStr = digitsMap[digits.charAt(begin) - '0'];\n        // \u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u9898\u610f\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u8981\u8003\u8651\u5230\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u5faa\u73af\n        for (int i = 0; i < nextStr.length(); i++) {\n            findCombinations(digits, begin + 1, pre + nextStr.charAt(i));\n        }\n    }\n\n    public List<String> letterCombinations(String digits) {\n        if (digits.length() == 0) {\n            return res;\n        }\n        findCombinations(digits, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> letterCombinations = solution.letterCombinations(\"23\");\n        System.out.println(letterCombinations);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/",
            "text": "19. Remove Nth Node From End of List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c\u00a0\nn\u00a0\n\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: \n1->2->3->4->5\n, \u548c \nn\n = 2\n.\n\n\u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a \n1->2->3->5\n.\n\n\n\n\u8bf4\u660e\uff1a\n\n\n\u7ed9\u5b9a\u7684 \nn\n\u00a0\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002\n\n\n\u8fdb\u9636\uff1a\n\n\n\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n19. Remove Nth Node From End of List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u53ea\u8981\u638c\u63e1\u4e86\u5982\u4f55\u627e\u5230\u8ddd\u79bb\u672b\u5c3e n \u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8fb9\u754c\u503c\u7684\u9009\u53d6\uff0c\u5176\u5b9e\u5f80\u5f80\u6211\u4eec\u8ba4\u4e3a\u7684\u503c\u4e0e\u6b63\u786e\u503c\u65e0\u975e\u5c31\u662f +1 \u6216\u8005 -1 \uff0c\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u7c97\u5fc3\u51fa\u9519\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002\n\n\u53e6\u5916\uff0c\u6d89\u53ca\u94fe\u8868\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u4ee5\u51cf\u5c11\u8ba8\u8bba\u7684\u53ef\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = dummyNode;\n        // \u8981\u8d70 n \u6b65\n        while (curNode != null && n != -1) {\n            curNode = curNode.next;\n            n--;\n        }\n        ListNode pre = dummyNode;\n        while (curNode != null) {\n            pre = pre.next;\n            curNode = curNode.next;\n        }\n        // \u8d70\u5230\u8fd9\u91cc curNode == null \uff0c\u5373 \u6765\u5230\u4e86\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9\n        // \u5e76\u4e14 pre \u6765\u5230\u4e86\u8981\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\n        ListNode deleteNode = pre.next;\n        pre.next = deleteNode.next;\n        deleteNode.next = null;\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2};\n        int n = 2;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode removeNthFromEnd = solution.removeNthFromEnd(head, n);\n        System.out.println(removeNthFromEnd);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0019-remove-nth-node-from-end-of-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "19. Remove Nth Node From End of List"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#19-remove-nth-node-from-end-of-list",
            "text": "",
            "title": "19. Remove Nth Node From End of List"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c\u00a0 n\u00a0 \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002  \u793a\u4f8b\uff1a  \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868:  1->2->3->4->5 , \u548c  n  = 2 .\n\n\u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a  1->2->3->5 .  \u8bf4\u660e\uff1a  \u7ed9\u5b9a\u7684  n \u00a0\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002  \u8fdb\u9636\uff1a  \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 19. Remove Nth Node From End of List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u53ea\u8981\u638c\u63e1\u4e86\u5982\u4f55\u627e\u5230\u8ddd\u79bb\u672b\u5c3e n \u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8fb9\u754c\u503c\u7684\u9009\u53d6\uff0c\u5176\u5b9e\u5f80\u5f80\u6211\u4eec\u8ba4\u4e3a\u7684\u503c\u4e0e\u6b63\u786e\u503c\u65e0\u975e\u5c31\u662f +1 \u6216\u8005 -1 \uff0c\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u7c97\u5fc3\u51fa\u9519\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 \n\u53e6\u5916\uff0c\u6d89\u53ca\u94fe\u8868\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u4ee5\u51cf\u5c11\u8ba8\u8bba\u7684\u53ef\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = dummyNode;\n        // \u8981\u8d70 n \u6b65\n        while (curNode != null && n != -1) {\n            curNode = curNode.next;\n            n--;\n        }\n        ListNode pre = dummyNode;\n        while (curNode != null) {\n            pre = pre.next;\n            curNode = curNode.next;\n        }\n        // \u8d70\u5230\u8fd9\u91cc curNode == null \uff0c\u5373 \u6765\u5230\u4e86\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9\n        // \u5e76\u4e14 pre \u6765\u5230\u4e86\u8981\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\n        ListNode deleteNode = pre.next;\n        pre.next = deleteNode.next;\n        deleteNode.next = null;\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2};\n        int n = 2;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode removeNthFromEnd = solution.removeNthFromEnd(head, n);\n        System.out.println(removeNthFromEnd);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0019-remove-nth-node-from-end-of-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/",
            "text": "21. Merge Two Sorted Lists\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002\u00a0\n\n\n\u793a\u4f8b\uff1a\n\n\n\u8f93\u5165\uff1a\n1->2->4, 1->3->4\n\n\u8f93\u51fa\uff1a\n1->1->2->3->4->4\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n21. Merge Two Sorted Lists\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u53ef\u4ee5\u5f88\u6e05\u6670\u5730\u770b\u51fa\u6307\u9488\u7684\u6307\u5411\uff0c\u987a\u5229\u5730\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\u3002\n\n\n\u601d\u8def1\uff1a\u7a7f\u9488\u5f15\u7ebf\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\u3002\n\n\n\n\n\n\n\u601d\u8def2\uff1a\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff0c\u8ba9\u9012\u5f52\u65b9\u6cd5\u6765\u5904\u7406\u662f\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u7c7b\u4f3c\u7684\u7ec3\u4e60\u8fd8\u6709 \n\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode dummyNode = new ListNode(-1);\n        ListNode p1 = l1;\n        ListNode p2 = l2;\n        ListNode curNode = dummyNode;\n        while (p1 != null && p2 != null) { // \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u8fdb\u884c\u6bd4\u8f83\n            if (p1.val < p2.val) {\n                curNode.next = p1; // \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p1 = p1.next;\n            } else {\n                curNode.next = p2;// \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p2 = p2.next;\n            }\n            curNode = curNode.next;\n        }\n        // \u8df3\u51fa\u5faa\u73af\u662f\u56e0\u4e3a p1 == null \u6216\u8005 p2 == null\n        if (p1 == null) {\n            curNode.next = p2;\n        }\n        if (p2 == null) {\n            curNode.next = p1;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 3, 5, 7};\n        int[] nums2 = {2, 4, 6};\n\n        ListNode l1 = new ListNode(nums1);\n        ListNode l2 = new ListNode(nums2);\n\n        Solution solution = new Solution();\n        ListNode mergeTwoLists = solution.mergeTwoLists(l1, l2);\n        System.out.println(mergeTwoLists);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\n// \u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u5b8c\u6210\npublic class Solution2 {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        // \u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u5982\u4f55\u5efa\u7acb\u548c\u539f\u59cb\u89c4\u6a21\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\n        ListNode mergeNode;\n        if (l1.val < l2.val) {\n            mergeNode = l1; // l1 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1.next, l2);\n        } else {\n            mergeNode = l2; // l2 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1, l2.next);\n        }\n        return mergeNode;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0021-merge-two-sorted-lists\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "21. Merge Two Sorted Lists"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#21-merge-two-sorted-lists",
            "text": "",
            "title": "21. Merge Two Sorted Lists"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002\u00a0  \u793a\u4f8b\uff1a  \u8f93\u5165\uff1a 1->2->4, 1->3->4 \u8f93\u51fa\uff1a 1->1->2->3->4->4    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 21. Merge Two Sorted Lists   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u53ef\u4ee5\u5f88\u6e05\u6670\u5730\u770b\u51fa\u6307\u9488\u7684\u6307\u5411\uff0c\u987a\u5229\u5730\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\u3002  \u601d\u8def1\uff1a\u7a7f\u9488\u5f15\u7ebf\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\u3002    \u601d\u8def2\uff1a\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff0c\u8ba9\u9012\u5f52\u65b9\u6cd5\u6765\u5904\u7406\u662f\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u7c7b\u4f3c\u7684\u7ec3\u4e60\u8fd8\u6709  \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode dummyNode = new ListNode(-1);\n        ListNode p1 = l1;\n        ListNode p2 = l2;\n        ListNode curNode = dummyNode;\n        while (p1 != null && p2 != null) { // \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u8fdb\u884c\u6bd4\u8f83\n            if (p1.val < p2.val) {\n                curNode.next = p1; // \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p1 = p1.next;\n            } else {\n                curNode.next = p2;// \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p2 = p2.next;\n            }\n            curNode = curNode.next;\n        }\n        // \u8df3\u51fa\u5faa\u73af\u662f\u56e0\u4e3a p1 == null \u6216\u8005 p2 == null\n        if (p1 == null) {\n            curNode.next = p2;\n        }\n        if (p2 == null) {\n            curNode.next = p1;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 3, 5, 7};\n        int[] nums2 = {2, 4, 6};\n\n        ListNode l1 = new ListNode(nums1);\n        ListNode l2 = new ListNode(nums2);\n\n        Solution solution = new Solution();\n        ListNode mergeTwoLists = solution.mergeTwoLists(l1, l2);\n        System.out.println(mergeTwoLists);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#2",
            "text": "// \u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u5b8c\u6210\npublic class Solution2 {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        // \u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u5982\u4f55\u5efa\u7acb\u548c\u539f\u59cb\u89c4\u6a21\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\n        ListNode mergeNode;\n        if (l1.val < l2.val) {\n            mergeNode = l1; // l1 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1.next, l2);\n        } else {\n            mergeNode = l2; // l2 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1, l2.next);\n        }\n        return mergeNode;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0021-merge-two-sorted-lists  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/",
            "text": "23. Merge k Sorted Lists\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u56f0\u96be\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n23. Merge k Sorted Lists\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8e\u6559\u79d1\u4e66\u4e0a\u4f8b\u9898\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u6211\u4eec\u4e3e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u6c42\u89e3\u601d\u8def\uff0c\u5176\u5b9e\u4e00\u70b9\u90fd\u4e0d\u96be\u3002\n\u5047\u8bbe\u6709\u5982\u4e0b\u751f\u6d3b\u60c5\u5883\uff1a\u5047\u8bbe\u4f60\u662f\u4e00\u540d\u4f53\u80b2\u8001\u5e08\uff0c\u6709 3 \u4e2a\u73ed\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u597d\u6210\u4e86 3 \u5217\u7eb5\u961f\uff0c\u73b0\u5728\u8981\u628a\u8fd9 3 \u4e2a\u73ed\u7684\u5b66\u751f\u4e5f\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u5217\u4e00\u5217\u7eb5\u961f\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a\n\n\uff081\uff09\u8ba9\u4e09\u4e2a\u73ed\u7684\u5b66\u751f\u6309\u5217\u7ad9\u5728\u4f60\u7684\u9762\u524d\uff0c\u8fd9\u65f6\u4f60\u80fd\u770b\u5230\u7ad9\u5728\u961f\u9996\u7684\u5b66\u751f\u7684\u5168\u8eab\uff0c\u5176\u4f59\u540c\u5b66\u53ea\u80fd\u770b\u5230\u6bd4\u524d\u9762\u540c\u5b66\u8111\u888b\u9ad8\u51fa\u7684\u90a3\u90e8\u5206\uff1b\n\n\uff082\uff09\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u51fa\u5217\u5230\u201c\u961f\u4f0d4\u201d\uff08\u5373\u6211\u4eec\u6700\u7ec8\u8ba4\u4e3a\u6392\u597d\u5e8f\u7684\u961f\u5217\uff09\uff0c\u51fa\u5217\u7684\u8fd9\u4e00\u5217\u7684\u540e\u9762\u7684\u6240\u6709\u540c\u5b66\u90fd\u5411\u524d\u8d70\u4e00\u6b65\uff08\u5176\u5b9e\u8d70\u4e0d\u8d70\u90fd\u884c\uff0c\u53ea\u8981\u4f60\u80fd\u6bd4\u8f83\u51fa\u7ad9\u5728\u4f60\u9762\u524d\u7684 3 \u4f4d\u5728\u961f\u9996\u7684\u540c\u5b66\u540c\u5b66\u7684\u9ad8\u77ee\u5373\u53ef\uff09\uff1b\n\n\uff083\uff09\u91cd\u590d\u7b2c\uff082\uff09\u6b65\uff0c\u76f4\u5230 3 \u4e2a\u73ed\u7684\u540c\u5b66\u5168\u90e8\u51fa\u5217\u5b8c\u6bd5\u3002  \n\n\n\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u201c\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u201d\u8fd9\u4ef6\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9\u4f18\u5148\u961f\u5217\u53bb\u5b8c\u6210\u3002\u5728\u8fde\u7eed\u7684\u4e24\u6b21\u51fa\u961f\u4e4b\u95f4\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01\u4e0b\u9762\u7684\u56fe\u8bf4\u660e\u4e86\u8fd9\u6837\u7684\u8fc7\u7a0b\u3002\n\n\n\n\n\n\n\n\n\u4ee5\u4e0a\u662f\u601d\u8def1\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\u3002\u4e0b\u9762\u4ecb\u7ecd\u601d\u8def2\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff1a\n\u6839\u636e\u4e4b\u524d\u5904\u7406\u94fe\u8868\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u90a3\u4e48\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u65e2\u7136\u662f\u6570\u7ec4\u7684\u201c\u6392\u5e8f\u201d\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684\n\u5206\u6cbb\u601d\u60f3\n\u6765\u89e3\u51b3\uff0c\u4ee3\u7801\u7ed3\u6784\u548c\u5f52\u5e76\u6392\u5e8f\u53ef\u4ee5\u8bf4\u662f\u540c\u51fa\u4e00\u8f99\u3002\n1\u3001\u5148\u4e00\u5206\u4e3a\u4e8c\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1b\n2\u3001\u518d\u8003\u8651\u5982\u4f55\u5408\u5e76\uff0c\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002\n\n\n\u4e24\u79cd\u65b9\u6cd5\u90fd\u5229\u7528\u5230\u4e86\u5e38\u89c1\u7684\u7b97\u6cd5\u548c\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u503c\u5f97\u5b66\u4e60\u548c\u601d\u8003\u3002\n\n\n\u867d\u7136\u6211\u53ea\u7ed9\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u89e3\u6cd5\u505a\u4e86\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u9012\u5f52\u5b8c\u6210\u7684\u65b9\u6cd5\u4e5f\u540c\u6837\u5f88\u9177\uff01\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        // \u6700\u540e\u6dfb\u52a0\u4e00\u4e2a NULL \u6807\u5fd7\u8868\u793a\u6dfb\u52a0\u5230\u672b\u5c3e\u4e86\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        PriorityQueue<ListNode> priorityQueue = new PriorityQueue<>(len, Comparator.comparingInt(a -> a.val));\n        ListNode dummyNode = new ListNode(-1);\n        ListNode curNode = dummyNode;\n        for (ListNode list : lists) {\n            if (list != null) {\n                // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u4e5f\u6ca1\u6709\u5fc5\u8981\u5c06\u7a7a\u5bf9\u8c61\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(list);\n            }\n        }\n        while (!priorityQueue.isEmpty()) {\n            // \u4f18\u5148\u961f\u5217\u975e\u7a7a\u624d\u80fd\u51fa\u961f\n            ListNode node = priorityQueue.poll();\n            // \u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6307\u5411\u51fa\u961f\u5143\u7d20\n            curNode.next = node;\n            // \u5f53\u524d\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u5411\u4e86\u521a\u521a\u51fa\u961f\u7684\u90a3\u4e2a\u5143\u7d20\n            curNode = curNode.next;\n            if (curNode.next != null) {\n                // \u53ea\u6709\u975e\u7a7a\u8282\u70b9\u624d\u80fd\u52a0\u5165\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(curNode.next);\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        Integer[] nums1 = {1, 4, 5};\n        Integer[] nums2 = {1, 3, 4};\n        Integer[] nums3 = {2, 6};\n        ListNode head1 = new ListNode(nums1);\n        ListNode head2 = new ListNode(nums2);\n        ListNode head3 = new ListNode(nums3);\n        ListNode[] lists = new ListNode[3];\n        lists[0] = head1;\n        lists[1] = head2;\n        lists[2] = head3;\n        Solution solution = new Solution();\n        ListNode mergeKLists = solution.mergeKLists(lists);\n        System.out.println(mergeKLists);\n    }\n}\n\n\n\n\n\u8bf4\u660e\uff1a\u8fd9\u91cc\u521b\u5efa\u6bd4\u8f83\u5668\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u5728 Java8 \u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u8bed\u6cd5\uff1a\n\n\nComparator<ListNode> comparator = (a, b) -> a.val - b.val;\n\n\n\n\n\u4e0e\n\n\nComparator<ListNode> comparator = Comparator.comparingInt(a -> a.val);\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nclass Solution2 {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        return mergeKLists(lists, 0, len - 1);\n    }\n\n    private ListNode mergeKLists(ListNode[] lists, int l, int r) {\n        // \u601d\u8003\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u53d6\u7b49\u4e8e\uff1f\u8fd9\u662f\u56e0\u4e3a\u6839\u636e\u4e0b\u6587\u5bf9 sort \u7684\u9012\u5f52\u8c03\u7528\u60c5\u51b5\uff0c\u533a\u95f4\u6700\u7a84\u7684\u65f6\u5019\uff0c\u53ea\u53ef\u80fd\u662f\u5de6\u53f3\u7aef\u70b9\u91cd\u5408\n        if (l == r) {\n            return lists[l];\n        }\n        int mid = l + (r - l) / 2;\n        ListNode listNode1 = mergeKLists(lists, l, mid);\n        ListNode listNode2 = mergeKLists(lists, mid + 1, r);\n        // \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u8bf7\u89c1 LeetCode \u7b2c 21 \u9898\uff0c\n        // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\uff0c\n        // \u56e0\u4e3a\u4f7f\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u6bcf\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u5f52\u5e76\u6b21\u6570\u6709\u4e9b\u591a\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u5212\u7b97\u7684\n        return mergeOfTwoListNode(listNode1, listNode2);\n    }\n\n    private ListNode mergeOfTwoListNode(ListNode listNode1, ListNode listNode2) {\n        // \u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (listNode1 == null) {\n            return listNode2;\n        }\n        if (listNode2 == null) {\n            return listNode1;\n        }\n        if (listNode1.val < listNode2.val) {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode1.next = mergeOfTwoListNode(listNode1.next, listNode2);\n            return listNode1;\n        } else {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode2.next = mergeOfTwoListNode(listNode1, listNode2.next);\n            return listNode2;\n        }\n    }\n}",
            "title": "23. Merge k Sorted Lists"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#23-merge-k-sorted-lists",
            "text": "",
            "title": "23. Merge k Sorted Lists"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u56f0\u96be\u3002  \u82f1\u6587\u7f51\u5740\uff1a 23. Merge k Sorted Lists   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8e\u6559\u79d1\u4e66\u4e0a\u4f8b\u9898\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u6211\u4eec\u4e3e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u6c42\u89e3\u601d\u8def\uff0c\u5176\u5b9e\u4e00\u70b9\u90fd\u4e0d\u96be\u3002\n\u5047\u8bbe\u6709\u5982\u4e0b\u751f\u6d3b\u60c5\u5883\uff1a\u5047\u8bbe\u4f60\u662f\u4e00\u540d\u4f53\u80b2\u8001\u5e08\uff0c\u6709 3 \u4e2a\u73ed\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u597d\u6210\u4e86 3 \u5217\u7eb5\u961f\uff0c\u73b0\u5728\u8981\u628a\u8fd9 3 \u4e2a\u73ed\u7684\u5b66\u751f\u4e5f\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u5217\u4e00\u5217\u7eb5\u961f\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a \n\uff081\uff09\u8ba9\u4e09\u4e2a\u73ed\u7684\u5b66\u751f\u6309\u5217\u7ad9\u5728\u4f60\u7684\u9762\u524d\uff0c\u8fd9\u65f6\u4f60\u80fd\u770b\u5230\u7ad9\u5728\u961f\u9996\u7684\u5b66\u751f\u7684\u5168\u8eab\uff0c\u5176\u4f59\u540c\u5b66\u53ea\u80fd\u770b\u5230\u6bd4\u524d\u9762\u540c\u5b66\u8111\u888b\u9ad8\u51fa\u7684\u90a3\u90e8\u5206\uff1b \n\uff082\uff09\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u51fa\u5217\u5230\u201c\u961f\u4f0d4\u201d\uff08\u5373\u6211\u4eec\u6700\u7ec8\u8ba4\u4e3a\u6392\u597d\u5e8f\u7684\u961f\u5217\uff09\uff0c\u51fa\u5217\u7684\u8fd9\u4e00\u5217\u7684\u540e\u9762\u7684\u6240\u6709\u540c\u5b66\u90fd\u5411\u524d\u8d70\u4e00\u6b65\uff08\u5176\u5b9e\u8d70\u4e0d\u8d70\u90fd\u884c\uff0c\u53ea\u8981\u4f60\u80fd\u6bd4\u8f83\u51fa\u7ad9\u5728\u4f60\u9762\u524d\u7684 3 \u4f4d\u5728\u961f\u9996\u7684\u540c\u5b66\u540c\u5b66\u7684\u9ad8\u77ee\u5373\u53ef\uff09\uff1b \n\uff083\uff09\u91cd\u590d\u7b2c\uff082\uff09\u6b65\uff0c\u76f4\u5230 3 \u4e2a\u73ed\u7684\u540c\u5b66\u5168\u90e8\u51fa\u5217\u5b8c\u6bd5\u3002    \u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u201c\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u201d\u8fd9\u4ef6\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9\u4f18\u5148\u961f\u5217\u53bb\u5b8c\u6210\u3002\u5728\u8fde\u7eed\u7684\u4e24\u6b21\u51fa\u961f\u4e4b\u95f4\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01\u4e0b\u9762\u7684\u56fe\u8bf4\u660e\u4e86\u8fd9\u6837\u7684\u8fc7\u7a0b\u3002     \u4ee5\u4e0a\u662f\u601d\u8def1\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\u3002\u4e0b\u9762\u4ecb\u7ecd\u601d\u8def2\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff1a\n\u6839\u636e\u4e4b\u524d\u5904\u7406\u94fe\u8868\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u90a3\u4e48\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u65e2\u7136\u662f\u6570\u7ec4\u7684\u201c\u6392\u5e8f\u201d\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684 \u5206\u6cbb\u601d\u60f3 \u6765\u89e3\u51b3\uff0c\u4ee3\u7801\u7ed3\u6784\u548c\u5f52\u5e76\u6392\u5e8f\u53ef\u4ee5\u8bf4\u662f\u540c\u51fa\u4e00\u8f99\u3002\n1\u3001\u5148\u4e00\u5206\u4e3a\u4e8c\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1b\n2\u3001\u518d\u8003\u8651\u5982\u4f55\u5408\u5e76\uff0c\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002  \u4e24\u79cd\u65b9\u6cd5\u90fd\u5229\u7528\u5230\u4e86\u5e38\u89c1\u7684\u7b97\u6cd5\u548c\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u503c\u5f97\u5b66\u4e60\u548c\u601d\u8003\u3002  \u867d\u7136\u6211\u53ea\u7ed9\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u89e3\u6cd5\u505a\u4e86\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u9012\u5f52\u5b8c\u6210\u7684\u65b9\u6cd5\u4e5f\u540c\u6837\u5f88\u9177\uff01",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#1",
            "text": "import java.util.Comparator;\nimport java.util.PriorityQueue;\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        // \u6700\u540e\u6dfb\u52a0\u4e00\u4e2a NULL \u6807\u5fd7\u8868\u793a\u6dfb\u52a0\u5230\u672b\u5c3e\u4e86\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        PriorityQueue<ListNode> priorityQueue = new PriorityQueue<>(len, Comparator.comparingInt(a -> a.val));\n        ListNode dummyNode = new ListNode(-1);\n        ListNode curNode = dummyNode;\n        for (ListNode list : lists) {\n            if (list != null) {\n                // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u4e5f\u6ca1\u6709\u5fc5\u8981\u5c06\u7a7a\u5bf9\u8c61\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(list);\n            }\n        }\n        while (!priorityQueue.isEmpty()) {\n            // \u4f18\u5148\u961f\u5217\u975e\u7a7a\u624d\u80fd\u51fa\u961f\n            ListNode node = priorityQueue.poll();\n            // \u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6307\u5411\u51fa\u961f\u5143\u7d20\n            curNode.next = node;\n            // \u5f53\u524d\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u5411\u4e86\u521a\u521a\u51fa\u961f\u7684\u90a3\u4e2a\u5143\u7d20\n            curNode = curNode.next;\n            if (curNode.next != null) {\n                // \u53ea\u6709\u975e\u7a7a\u8282\u70b9\u624d\u80fd\u52a0\u5165\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(curNode.next);\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        Integer[] nums1 = {1, 4, 5};\n        Integer[] nums2 = {1, 3, 4};\n        Integer[] nums3 = {2, 6};\n        ListNode head1 = new ListNode(nums1);\n        ListNode head2 = new ListNode(nums2);\n        ListNode head3 = new ListNode(nums3);\n        ListNode[] lists = new ListNode[3];\n        lists[0] = head1;\n        lists[1] = head2;\n        lists[2] = head3;\n        Solution solution = new Solution();\n        ListNode mergeKLists = solution.mergeKLists(lists);\n        System.out.println(mergeKLists);\n    }\n}  \u8bf4\u660e\uff1a\u8fd9\u91cc\u521b\u5efa\u6bd4\u8f83\u5668\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u5728 Java8 \u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u8bed\u6cd5\uff1a  Comparator<ListNode> comparator = (a, b) -> a.val - b.val;  \u4e0e  Comparator<ListNode> comparator = Comparator.comparingInt(a -> a.val);",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#2",
            "text": "class Solution2 {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        return mergeKLists(lists, 0, len - 1);\n    }\n\n    private ListNode mergeKLists(ListNode[] lists, int l, int r) {\n        // \u601d\u8003\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u53d6\u7b49\u4e8e\uff1f\u8fd9\u662f\u56e0\u4e3a\u6839\u636e\u4e0b\u6587\u5bf9 sort \u7684\u9012\u5f52\u8c03\u7528\u60c5\u51b5\uff0c\u533a\u95f4\u6700\u7a84\u7684\u65f6\u5019\uff0c\u53ea\u53ef\u80fd\u662f\u5de6\u53f3\u7aef\u70b9\u91cd\u5408\n        if (l == r) {\n            return lists[l];\n        }\n        int mid = l + (r - l) / 2;\n        ListNode listNode1 = mergeKLists(lists, l, mid);\n        ListNode listNode2 = mergeKLists(lists, mid + 1, r);\n        // \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u8bf7\u89c1 LeetCode \u7b2c 21 \u9898\uff0c\n        // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\uff0c\n        // \u56e0\u4e3a\u4f7f\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u6bcf\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u5f52\u5e76\u6b21\u6570\u6709\u4e9b\u591a\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u5212\u7b97\u7684\n        return mergeOfTwoListNode(listNode1, listNode2);\n    }\n\n    private ListNode mergeOfTwoListNode(ListNode listNode1, ListNode listNode2) {\n        // \u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (listNode1 == null) {\n            return listNode2;\n        }\n        if (listNode2 == null) {\n            return listNode1;\n        }\n        if (listNode1.val < listNode2.val) {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode1.next = mergeOfTwoListNode(listNode1.next, listNode2);\n            return listNode1;\n        } else {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode2.next = mergeOfTwoListNode(listNode1, listNode2.next);\n            return listNode2;\n        }\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0039-combination-sum/",
            "text": "39. Combination Sum\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002\u8bf4\u660e\uff1a\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n39. Combination Sum\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n39. \u7ec4\u5408\u603b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u5206\u6790\u9898\u610f\uff0c\u627e\u5230\u53ef\u4ee5\u51cf\u5c11\u5224\u65ad\u7684\u6761\u4ef6\uff1a\n\uff081\uff09\u8fd9\u9053\u9898\u731b\u5730\u4e00\u770b\u597d\u50cf\u8ddf\u524d\u9762\u7684\u95ee\u9898\u642d\u4e0d\u4e0a\u5173\u7cfb\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u201ccandidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u201d\uff1b\n\n\uff082\uff09\u4f46\u5176\u5b9e\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd8\u4ece\u539f\u70b9\u5f00\u59cb\u53d6\u5c31\u884c\u4e86\u5440\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff1b\n\n\uff083\uff09\u4e3a\u4e86\u8fbe\u5230\u63d0\u524d\u5224\u65ad\u5faa\u73af\u7ed3\u675f\u7684\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u5982\u679c\u8d77\u70b9\u6570\u5b57\u6bd4\u5269\u4e0b\u7684\u548c\u8fd8\u8981\u5927\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u4e0b\u53bb\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5728 for \u5faa\u73af\u91cc\u52a0\u5224\u65ad\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u7cfb\u7edf\u6808\u7684\u8c03\u7528\u6df1\u5ea6\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff08\u6ca1\u6709\u505a\u4f18\u5316\u526a\u679d\u7684\u7248\u672c\uff09\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u5b9a\u4e49\u4e3a\u5269\u4f59\uff0c\u8fd9\u4e2a\u5269\u4f59\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u5728\u9012\u5f52\u4e2d\uff0c\u5b83\u7684\u503c\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u3002\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        // \u56e0\u4e3a\u53ef\u4ee5\u65e0\u9650\u9009\u53d6\uff0c\u6240\u4ee5 residue \u53ea\u80fd\u5c0f\u4e8e 0 \u6216\u8005\u7b49\u4e8e 0\n        if (residue < 0) {\n            return;\n        }\n        // \u4e00\u5b9a\u662f\u5269\u4e0b\u7684\u90a3\u4e2a\u6570\u4e3a 0 \u4e86\uff0c\u624d\u8868\u793a\u6211\u4eec\u6240\u9009\u7684\u6570\u5b57\u7684\u548c\u521a\u597d\u7b49\u4e8e target\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        for (int i = start; i < len; i++) {\n            // \u6bcf\u4e2a\u6570\u6709\u9009\u62e9\u548c\u4e0d\u9009\u62e9\uff0c\u56e0\u6b64\u5c1d\u8bd5\u4e86\u4e00\u79cd\u89e3\u7684\u53ef\u80fd\u4ee5\u540e\u8981\u8fdb\u884c\u72b6\u6001\u91cd\u7f6e\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 3, 6, 7};\n        int target = 7;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum = solution.combinationSum(candidates, target);\n        System.out.println(combinationSum);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution2 {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78012\uff1a\u5728\u5faa\u73af\u7684\u65f6\u5019\u505a\u5224\u65ad\uff0c\u5c3d\u91cf\u907f\u514d\u7cfb\u7edf\u6808\u7684\u6df1\u5ea6\n        // residue - candidates[i] \u8868\u793a\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\uff0c\u5982\u679c\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\u90fd\u5c0f\u4e8e 0 \uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u540e\u9762\u7684\u5faa\u73af\u4e86\n        // \u8fd9\u4e00\u70b9\u57fa\u4e8e\u539f\u59cb\u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\uff0c\u56e0\u4e3a\u5982\u679c\u8ba1\u7b97\u540e\u9762\u7684\u5269\u4f59\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n        for (int i = start; i < len && residue - candidates[i] >= 0; i++) {\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78011\uff1a\u5148\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5224\u65ad\n        Arrays.sort(candidates);\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n}",
            "title": "39. Combination Sum"
        },
        {
            "location": "/leetcode-0039-combination-sum/#39-combination-sum",
            "text": "",
            "title": "39. Combination Sum"
        },
        {
            "location": "/leetcode-0039-combination-sum/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002\u8bf4\u660e\uff1a\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002   \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 39. Combination Sum   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 39. \u7ec4\u5408\u603b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0039-combination-sum/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u5206\u6790\u9898\u610f\uff0c\u627e\u5230\u53ef\u4ee5\u51cf\u5c11\u5224\u65ad\u7684\u6761\u4ef6\uff1a\n\uff081\uff09\u8fd9\u9053\u9898\u731b\u5730\u4e00\u770b\u597d\u50cf\u8ddf\u524d\u9762\u7684\u95ee\u9898\u642d\u4e0d\u4e0a\u5173\u7cfb\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u201ccandidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u201d\uff1b \n\uff082\uff09\u4f46\u5176\u5b9e\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd8\u4ece\u539f\u70b9\u5f00\u59cb\u53d6\u5c31\u884c\u4e86\u5440\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff1b \n\uff083\uff09\u4e3a\u4e86\u8fbe\u5230\u63d0\u524d\u5224\u65ad\u5faa\u73af\u7ed3\u675f\u7684\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u5982\u679c\u8d77\u70b9\u6570\u5b57\u6bd4\u5269\u4e0b\u7684\u548c\u8fd8\u8981\u5927\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u4e0b\u53bb\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5728 for \u5faa\u73af\u91cc\u52a0\u5224\u65ad\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u7cfb\u7edf\u6808\u7684\u8c03\u7528\u6df1\u5ea6\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0039-combination-sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0039-combination-sum/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u5b9a\u4e49\u4e3a\u5269\u4f59\uff0c\u8fd9\u4e2a\u5269\u4f59\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u5728\u9012\u5f52\u4e2d\uff0c\u5b83\u7684\u503c\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u3002\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        // \u56e0\u4e3a\u53ef\u4ee5\u65e0\u9650\u9009\u53d6\uff0c\u6240\u4ee5 residue \u53ea\u80fd\u5c0f\u4e8e 0 \u6216\u8005\u7b49\u4e8e 0\n        if (residue < 0) {\n            return;\n        }\n        // \u4e00\u5b9a\u662f\u5269\u4e0b\u7684\u90a3\u4e2a\u6570\u4e3a 0 \u4e86\uff0c\u624d\u8868\u793a\u6211\u4eec\u6240\u9009\u7684\u6570\u5b57\u7684\u548c\u521a\u597d\u7b49\u4e8e target\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        for (int i = start; i < len; i++) {\n            // \u6bcf\u4e2a\u6570\u6709\u9009\u62e9\u548c\u4e0d\u9009\u62e9\uff0c\u56e0\u6b64\u5c1d\u8bd5\u4e86\u4e00\u79cd\u89e3\u7684\u53ef\u80fd\u4ee5\u540e\u8981\u8fdb\u884c\u72b6\u6001\u91cd\u7f6e\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 3, 6, 7};\n        int target = 7;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum = solution.combinationSum(candidates, target);\n        System.out.println(combinationSum);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff08\u6ca1\u6709\u505a\u4f18\u5316\u526a\u679d\u7684\u7248\u672c\uff09"
        },
        {
            "location": "/leetcode-0039-combination-sum/#2",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution2 {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78012\uff1a\u5728\u5faa\u73af\u7684\u65f6\u5019\u505a\u5224\u65ad\uff0c\u5c3d\u91cf\u907f\u514d\u7cfb\u7edf\u6808\u7684\u6df1\u5ea6\n        // residue - candidates[i] \u8868\u793a\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\uff0c\u5982\u679c\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\u90fd\u5c0f\u4e8e 0 \uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u540e\u9762\u7684\u5faa\u73af\u4e86\n        // \u8fd9\u4e00\u70b9\u57fa\u4e8e\u539f\u59cb\u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\uff0c\u56e0\u4e3a\u5982\u679c\u8ba1\u7b97\u540e\u9762\u7684\u5269\u4f59\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n        for (int i = start; i < len && residue - candidates[i] >= 0; i++) {\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78011\uff1a\u5148\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5224\u65ad\n        Arrays.sort(candidates);\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/",
            "text": "40. Combination Sum II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n40. Combination Sum II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n40. \u7ec4\u5408\u603b\u548c II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u5982\u4f55\u5728\u7ed3\u679c\u96c6\u4e2d\u53bb\u9664\u91cd\u590d\u7684\u65b9\u6cd5\u3002\n\uff081\uff09\u4e0e\u7b2c 39 \u9898\u7684\u533a\u522b\uff0c\u7b2c 39 \u9898\u7684\u6570\u7ec4\u6ca1\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff1b\u7b2c 40 \u9898\u7684\u6570\u7ec4\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5177\u4f53\u5c31\u4f53\u73b0\u5728\u8fdb\u884c\u4e0b\u4e00\u5c42\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8d77\u59cb\u7684\u90a3\u4e2a\u7d22\u5f15\u503c\u662f\u591a\u5c11\uff1b\n\n\uff082\uff09\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5e94\u8be5\u5148\u5bf9\u7ed9\u51fa\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u76ee\u7684\u6709\u4e24\u4e2a\uff1a\u5176\u4e00\u662f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5faa\u73af\uff0c\u5176\u4e8c\u662f\u201c\u5728\u9012\u5f52\u51fd\u6570\u7684\u8c03\u7528\u4e2d\uff0c\u540c\u4e00\u6df1\u5ea6\u7684\u4e00\u4e2a\u503c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u201d\uff0c\u8fd9\u4e00\u5904\u7406\u4e5f\u51e0\u4e4e\u6210\u4e3a\u4e86\u6807\u51c6\u5199\u6cd5\uff0c\u6216\u8bb8\u521a\u521a\u5f00\u59cb\u63a5\u89e6\u7684\u65f6\u5019\u5e76\u4e0d\u597d\u7406\u89e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u51fa\u56fe\u6765\u7406\u89e3\uff0c\u7136\u540e\u591a\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7ec3\u4e60\uff0c\u7406\u89e3\u4ee3\u7801\u4e3a\u4ec0\u4e48\u90a3\u6837\u5199\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u8868\u793a\u5269\u4f59\uff0c\u8fd9\u4e2a\u503c\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u57fa\u4e8e\u9898\u76ee\u4e2d\u8bf4\u660e\u7684\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u8fd9\u4e2a\u6761\u4ef6\n    // residue \u5728\u9012\u5f52\u904d\u5386\u4e2d\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    private void findCombinationSum2(int residue, int begin, Stack<Integer> stack) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = begin; i < len && residue - candidates[i] >= 0; i++) {\n            // \u8fd9\u4e00\u6b65\u4e4b\u6240\u4ee5\u80fd\u591f\u751f\u6548\uff0c\u5176\u524d\u63d0\u662f\u6570\u7ec4\u4e00\u5b9a\u662f\u6392\u597d\u5e8f\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\uff1a\n            // \u5728\u9012\u5f52\u8c03\u7528\u7684\u7edf\u4e00\u6df1\u5ea6\uff08\u5c42\uff09\u4e2d\uff0c\u4e00\u4e2a\u5143\u7d20\u53ea\u4f7f\u7528\u4e00\u6b21\u3002\n            // \u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u57fa\u4e8e candidates \u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\u4e0b\n            if (i > begin && candidates[i] == candidates[i - 1]) {\n                continue;\n            }\n            stack.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i + 1 \u800c\u4e0d\u662f i\n            findCombinationSum2(residue - candidates[i], i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        // \u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\n        Arrays.sort(candidates);\n        this.candidates = candidates;\n        findCombinationSum2(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 5, 2, 1, 2};\n        int target = 5;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum2 = solution.combinationSum2(candidates, target);\n        System.out.println(combinationSum2);\n    }\n}",
            "title": "40. Combination Sum II"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#40-combination-sum-ii",
            "text": "",
            "title": "40. Combination Sum II"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 40. Combination Sum II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 40. \u7ec4\u5408\u603b\u548c II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u5982\u4f55\u5728\u7ed3\u679c\u96c6\u4e2d\u53bb\u9664\u91cd\u590d\u7684\u65b9\u6cd5\u3002\n\uff081\uff09\u4e0e\u7b2c 39 \u9898\u7684\u533a\u522b\uff0c\u7b2c 39 \u9898\u7684\u6570\u7ec4\u6ca1\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff1b\u7b2c 40 \u9898\u7684\u6570\u7ec4\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5177\u4f53\u5c31\u4f53\u73b0\u5728\u8fdb\u884c\u4e0b\u4e00\u5c42\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8d77\u59cb\u7684\u90a3\u4e2a\u7d22\u5f15\u503c\u662f\u591a\u5c11\uff1b \n\uff082\uff09\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5e94\u8be5\u5148\u5bf9\u7ed9\u51fa\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u76ee\u7684\u6709\u4e24\u4e2a\uff1a\u5176\u4e00\u662f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5faa\u73af\uff0c\u5176\u4e8c\u662f\u201c\u5728\u9012\u5f52\u51fd\u6570\u7684\u8c03\u7528\u4e2d\uff0c\u540c\u4e00\u6df1\u5ea6\u7684\u4e00\u4e2a\u503c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u201d\uff0c\u8fd9\u4e00\u5904\u7406\u4e5f\u51e0\u4e4e\u6210\u4e3a\u4e86\u6807\u51c6\u5199\u6cd5\uff0c\u6216\u8bb8\u521a\u521a\u5f00\u59cb\u63a5\u89e6\u7684\u65f6\u5019\u5e76\u4e0d\u597d\u7406\u89e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u51fa\u56fe\u6765\u7406\u89e3\uff0c\u7136\u540e\u591a\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7ec3\u4e60\uff0c\u7406\u89e3\u4ee3\u7801\u4e3a\u4ec0\u4e48\u90a3\u6837\u5199\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u8868\u793a\u5269\u4f59\uff0c\u8fd9\u4e2a\u503c\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u57fa\u4e8e\u9898\u76ee\u4e2d\u8bf4\u660e\u7684\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u8fd9\u4e2a\u6761\u4ef6\n    // residue \u5728\u9012\u5f52\u904d\u5386\u4e2d\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    private void findCombinationSum2(int residue, int begin, Stack<Integer> stack) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = begin; i < len && residue - candidates[i] >= 0; i++) {\n            // \u8fd9\u4e00\u6b65\u4e4b\u6240\u4ee5\u80fd\u591f\u751f\u6548\uff0c\u5176\u524d\u63d0\u662f\u6570\u7ec4\u4e00\u5b9a\u662f\u6392\u597d\u5e8f\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\uff1a\n            // \u5728\u9012\u5f52\u8c03\u7528\u7684\u7edf\u4e00\u6df1\u5ea6\uff08\u5c42\uff09\u4e2d\uff0c\u4e00\u4e2a\u5143\u7d20\u53ea\u4f7f\u7528\u4e00\u6b21\u3002\n            // \u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u57fa\u4e8e candidates \u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\u4e0b\n            if (i > begin && candidates[i] == candidates[i - 1]) {\n                continue;\n            }\n            stack.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i + 1 \u800c\u4e0d\u662f i\n            findCombinationSum2(residue - candidates[i], i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        // \u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\n        Arrays.sort(candidates);\n        this.candidates = candidates;\n        findCombinationSum2(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 5, 2, 1, 2};\n        int target = 5;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum2 = solution.combinationSum2(candidates, target);\n        System.out.println(combinationSum2);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0046-permutations/",
            "text": "46. Permutations\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\u7ed9\u5b9a\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n46. Permutations\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n46. \u5168\u6392\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u7406\u89e3\u9898\u610f\u5e76\u4e14\u6253\u5370\u51fa\u4e00\u4e9b\u4fe1\u606f\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/permutations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    // \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u7684\u6570\u7ec4\uff0c\u4e5f\u662f\u5957\u8def\u4e86\n    private int[] nums;\n    private boolean[] marked;\n\n    // hasUsedCount \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570\n    private void findPermutions(int hasUsedCount, Stack<Integer> stack) {\n        // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\n        // System.out.println(Arrays.toString(used));\n        if (hasUsedCount == nums.length) {\n            // \u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                marked[i] = true;\n                stack.push(nums[i]);\n                findPermutions(hasUsedCount + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permute(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        this.nums = nums;\n        marked = new boolean[len];\n        findPermutions(0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3};\n        Solution solution = new Solution();\n        List<List<Integer>> permute = solution.permute(nums);\n        System.out.println(permute);\n    }\n}",
            "title": "46. Permutations"
        },
        {
            "location": "/leetcode-0046-permutations/#46-permutations",
            "text": "",
            "title": "46. Permutations"
        },
        {
            "location": "/leetcode-0046-permutations/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\n\u7ed9\u5b9a\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 46. Permutations   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 46. \u5168\u6392\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0046-permutations/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u7406\u89e3\u9898\u610f\u5e76\u4e14\u6253\u5370\u51fa\u4e00\u4e9b\u4fe1\u606f\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0046-permutations/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0046-permutations/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/permutations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    // \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u7684\u6570\u7ec4\uff0c\u4e5f\u662f\u5957\u8def\u4e86\n    private int[] nums;\n    private boolean[] marked;\n\n    // hasUsedCount \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570\n    private void findPermutions(int hasUsedCount, Stack<Integer> stack) {\n        // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\n        // System.out.println(Arrays.toString(used));\n        if (hasUsedCount == nums.length) {\n            // \u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                marked[i] = true;\n                stack.push(nums[i]);\n                findPermutions(hasUsedCount + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permute(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        this.nums = nums;\n        marked = new boolean[len];\n        findPermutions(0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3};\n        Solution solution = new Solution();\n        List<List<Integer>> permute = solution.permute(nums);\n        System.out.println(permute);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0047-permutations-ii/",
            "text": "47. Permutations II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n47. Permutations II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n47. \u5168\u6392\u5217 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u91cd\u590d\u7684\u539f\u56e0\uff0c\u5bf9\u6811\u8fdb\u884c\u526a\u679d\u3002\n1\u3001\n\u9996\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\n\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\uff1b\n2\u3001\u53ea\u5904\u7406\u7b2c 1 \u6b21\u9047\u5230\u7684\u90a3\u4e2a\u6570\uff0c\u4e3e\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u4e2a\u56fe\u3002\u91cd\u70b9\u7406\u89e3\uff1a\uff081\uff09 \ni > 0\n \uff0c\uff082\uff09 \nnums[i] == nums[i - 1]\n \uff0c\uff083\uff09\u4e4b\u524d\u90a3\u4e2a\u6570\u8fd8\u6ca1\u6709\u4f7f\u7528\uff0c\u5373 \nmarked[i-1] = false\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private boolean[] marked;\n\n    private void findPermuteUnique(int[] nums, int depth, Stack<Integer> stack) {\n        if (depth == nums.length) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                // i > 0 \u662f\u4e3a\u4e86\u4fdd\u8bc1 marked[i - 1] \u6709\u610f\u4e49\uff0c\u4e8b\u5b9e\u4e0a i = 0 \u662f\u4e00\u5b9a\u5728\u89e3\u5f53\u4e2d\u7684\n                // \u76f8\u5f53\u4e8e\u6811\u88ab\u526a\u679d\uff0c\u91cd\u70b9\u4f53\u4f1a\u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u662f\u4e3a\u4ec0\u4e48\uff0c\u5176\u5b9e\u753b\u4e2a\u56fe\u5c31\u975e\u5e38\u6e05\u695a\u4e86\n                if (i > 0 && nums[i] == nums[i - 1] && !marked[i - 1]) {\n                    continue;\n                }\n                marked[i] = true;\n                stack.add(nums[i]);\n                findPermuteUnique(nums, depth + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\n        Arrays.sort(nums);\n        marked = new boolean[len];\n        findPermuteUnique(nums, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2};\n        Solution solution = new Solution();\n        List<List<Integer>> permuteUnique = solution.permuteUnique(nums);\n        System.out.println(permuteUnique);\n    }\n}",
            "title": "47. Permutations II"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#47-permutations-ii",
            "text": "",
            "title": "47. Permutations II"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 47. Permutations II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 47. \u5168\u6392\u5217 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u91cd\u590d\u7684\u539f\u56e0\uff0c\u5bf9\u6811\u8fdb\u884c\u526a\u679d\u3002\n1\u3001 \u9996\u5148\u5c06\u6570\u7ec4\u6392\u5e8f \uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\uff1b\n2\u3001\u53ea\u5904\u7406\u7b2c 1 \u6b21\u9047\u5230\u7684\u90a3\u4e2a\u6570\uff0c\u4e3e\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u4e2a\u56fe\u3002\u91cd\u70b9\u7406\u89e3\uff1a\uff081\uff09  i > 0  \uff0c\uff082\uff09  nums[i] == nums[i - 1]  \uff0c\uff083\uff09\u4e4b\u524d\u90a3\u4e2a\u6570\u8fd8\u6ca1\u6709\u4f7f\u7528\uff0c\u5373  marked[i-1] = false \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private boolean[] marked;\n\n    private void findPermuteUnique(int[] nums, int depth, Stack<Integer> stack) {\n        if (depth == nums.length) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                // i > 0 \u662f\u4e3a\u4e86\u4fdd\u8bc1 marked[i - 1] \u6709\u610f\u4e49\uff0c\u4e8b\u5b9e\u4e0a i = 0 \u662f\u4e00\u5b9a\u5728\u89e3\u5f53\u4e2d\u7684\n                // \u76f8\u5f53\u4e8e\u6811\u88ab\u526a\u679d\uff0c\u91cd\u70b9\u4f53\u4f1a\u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u662f\u4e3a\u4ec0\u4e48\uff0c\u5176\u5b9e\u753b\u4e2a\u56fe\u5c31\u975e\u5e38\u6e05\u695a\u4e86\n                if (i > 0 && nums[i] == nums[i - 1] && !marked[i - 1]) {\n                    continue;\n                }\n                marked[i] = true;\n                stack.add(nums[i]);\n                findPermuteUnique(nums, depth + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\n        Arrays.sort(nums);\n        marked = new boolean[len];\n        findPermuteUnique(nums, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2};\n        Solution solution = new Solution();\n        List<List<Integer>> permuteUnique = solution.permuteUnique(nums);\n        System.out.println(permuteUnique);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0077-combinations/",
            "text": "77. Combinations\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n77. Combinations\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n77. \u7ec4\u5408\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e marked \u6570\u7ec4\u3002\u91cd\u70b9\u5206\u6790\u51fa\u904d\u5386\u7684 i \u7684\u4e0a\u754c\u662f \nn - (k - stack.size()) + 1\n\u3002\n\n\n\n\n\u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u5982\u4f55\u5206\u6790\u51fa\u5faa\u73af\u53d8\u91cf\u4e2d \ni\n \u7684\u4e0a\u754c\u3002 \uff08\u5982\u679c\u4e0b\u9762\u7684\u56fe\u7247\u592a\u5c0f\uff0c\u53ef\u4ee5\u5728\u56fe\u7247\u4e0a\u53f3\u952e\uff0c\u9009\u62e9\u201c\u5728\u65b0\u6807\u7b7e\u9875\u4e2d\u6253\u5f00\u56fe\u7247\u201d\uff0c\u4ee5\u67e5\u770b\u5927\u56fe\u3002\uff09\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/combinations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n\n    private void findCombinations(int n, int k, int begin, Stack<Integer> stack) {\n        if (stack.size() == k) {\n            // \u591f\u6570\u4e86\uff0c\u5c31\u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        // n - (k - stack.size()) + 1 \u662f\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\n        // for (int i = index; i <= n; i++) {\n        // \u5173\u952e\u5728\u4e8e\u5206\u6790\u51fa i \u7684\u4e0a\u754c\n        for (int i = begin; i <= n - (k - stack.size()) + 1; i++) {\n            stack.add(i);\n            findCombinations(n, k, i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combine(int n, int k) {\n        if (n <= 0 || k <= 0 || n < k) {\n            return res;\n        }\n        // \u4ece 1 \u5f00\u59cb\u662f\u9898\u76ee\u7684\u8bbe\u5b9a\n        findCombinations(n, k, 1, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> combine = solution.combine(4, 2);\n        System.out.println(combine);\n    }\n}",
            "title": "77. Combinations"
        },
        {
            "location": "/leetcode-0077-combinations/#77-combinations",
            "text": "",
            "title": "77. Combinations"
        },
        {
            "location": "/leetcode-0077-combinations/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 77. Combinations   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 77. \u7ec4\u5408   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0077-combinations/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e marked \u6570\u7ec4\u3002\u91cd\u70b9\u5206\u6790\u51fa\u904d\u5386\u7684 i \u7684\u4e0a\u754c\u662f  n - (k - stack.size()) + 1 \u3002   \u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u5982\u4f55\u5206\u6790\u51fa\u5faa\u73af\u53d8\u91cf\u4e2d  i  \u7684\u4e0a\u754c\u3002 \uff08\u5982\u679c\u4e0b\u9762\u7684\u56fe\u7247\u592a\u5c0f\uff0c\u53ef\u4ee5\u5728\u56fe\u7247\u4e0a\u53f3\u952e\uff0c\u9009\u62e9\u201c\u5728\u65b0\u6807\u7b7e\u9875\u4e2d\u6253\u5f00\u56fe\u7247\u201d\uff0c\u4ee5\u67e5\u770b\u5927\u56fe\u3002\uff09",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0077-combinations/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0077-combinations/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/combinations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n\n    private void findCombinations(int n, int k, int begin, Stack<Integer> stack) {\n        if (stack.size() == k) {\n            // \u591f\u6570\u4e86\uff0c\u5c31\u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        // n - (k - stack.size()) + 1 \u662f\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\n        // for (int i = index; i <= n; i++) {\n        // \u5173\u952e\u5728\u4e8e\u5206\u6790\u51fa i \u7684\u4e0a\u754c\n        for (int i = begin; i <= n - (k - stack.size()) + 1; i++) {\n            stack.add(i);\n            findCombinations(n, k, i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combine(int n, int k) {\n        if (n <= 0 || k <= 0 || n < k) {\n            return res;\n        }\n        // \u4ece 1 \u5f00\u59cb\u662f\u9898\u76ee\u7684\u8bbe\u5b9a\n        findCombinations(n, k, 1, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> combine = solution.combine(4, 2);\n        System.out.println(combine);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/",
            "text": "83. Remove Duplicates from Sorted List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n83. Remove Duplicates from Sorted List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002\n\n\n\n\n\u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002\n\n\n\n\n\n\n\n\n\u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b  \n\n\n\u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b  \n\n\n\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f \nwhile(cur.next!=null)\n\uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981 \ncur\n \u548c \nnext\n \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528 \npre\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}",
            "title": "83. Remove Duplicates from Sorted List"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#83-remove-duplicates-from-sorted-list",
            "text": "",
            "title": "83. Remove Duplicates from Sorted List"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 83. Remove Duplicates from Sorted List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002   \u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002     \u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b    \u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b    \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f  while(cur.next!=null) \uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981  cur  \u548c  next  \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528  pre \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/",
            "text": "86. Partition List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n86. Partition List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n86. \u5206\u9694\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\npublic class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "86. Partition List"
        },
        {
            "location": "/leetcode-0086-partition-list/#86-partition-list",
            "text": "",
            "title": "86. Partition List"
        },
        {
            "location": "/leetcode-0086-partition-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 86. Partition List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 86. \u5206\u9694\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0086-partition-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0086-partition-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0086-partition-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/#2",
            "text": "public class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/",
            "text": "92. Reverse Linked List II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n92. Reverse Linked List II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n92. \u53cd\u8f6c\u94fe\u8868 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002\n\n\n\n\n\n\n\n\n\u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002\n\n\n\u5173\u6ce8\u4e34\u754c\u503c\uff0c\npre\n \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b\n\n\n\u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b\n\n\n\u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e \ncur\n \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c\npre\n \u4e5f\u4e0d\u53d8\uff0c\nnext\n \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728 \ncur\n \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21 \ncur\n \u7684 \nnext\n \u90fd\u4f1a\u79fb\u5230 \npre\n \u7684 \nnext\n\uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b\n\n\n\u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9 \nListNode\n \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868 \ncreateListNode\n\uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868 \nprintLinkedList\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n// \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA\n// https://www.jianshu.com/p/fbe6012c9e52\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode pre = dummyNode;\n        for (int i = 0; i < m - 1; i++) {\n            pre = pre.next;\n        }\n        ListNode cur = pre.next;\n        ListNode next;\n        for (int i = 0; i < n - m; i++) {\n            next = cur.next;\n            cur.next = next.next;\n            next.next = pre.next;\n            pre.next = next;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4);\n        System.out.println(reverseBetween);\n    }\n}",
            "title": "92. Reverse Linked List II"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#92-reverse-linked-list-ii",
            "text": "",
            "title": "92. Reverse Linked List II"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be  \u82f1\u6587\u7f51\u5740\uff1a 92. Reverse Linked List II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 92. \u53cd\u8f6c\u94fe\u8868 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002     \u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002  \u5173\u6ce8\u4e34\u754c\u503c\uff0c pre  \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b  \u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b  \u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e  cur  \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c pre  \u4e5f\u4e0d\u53d8\uff0c next  \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728  cur  \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21  cur  \u7684  next  \u90fd\u4f1a\u79fb\u5230  pre  \u7684  next \uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b  \u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9  ListNode  \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868  createListNode \uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868  printLinkedList \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#1",
            "text": "// \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA\n// https://www.jianshu.com/p/fbe6012c9e52\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode pre = dummyNode;\n        for (int i = 0; i < m - 1; i++) {\n            pre = pre.next;\n        }\n        ListNode cur = pre.next;\n        ListNode next;\n        for (int i = 0; i < n - m; i++) {\n            next = cur.next;\n            cur.next = next.next;\n            next.next = pre.next;\n            pre.next = next;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4);\n        System.out.println(reverseBetween);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/",
            "text": "93. Restore IP Addresses\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n93. Restore IP Addresses\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n93. \u590d\u539fIP\u5730\u5740\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3001\u9012\u5f52\u56de\u6eaf\u7684\u601d\u60f3\u6765\u5b8c\u6210\u3002\n\n\n1\u3001IP \u5730\u5740\u4e00\u5171 4 \u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\u662f 255\uff0c\u6700\u5c0f\u503c\u662f 0\uff0c\u6211\u4eec\u91c7\u7528\u641c\u7d22\u7684\u529e\u6cd5\u6765\u5f97\u5230\u6709\u6548\u7684 ip \u6bb5\uff1b\n2\u3001\u6bcf\u4e00\u6b21\u5faa\u73af\u5224\u65ad\u63a5\u4e0b\u6765\u8bfb\u8fdb\u6765\u7684 3 \u4e2a\u6570\u5b57\u5b57\u7b26\u662f\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a ip \u6bb5\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u52a0\u5230\u5df2\u7ecf\u5f62\u6210\u7684 ip \u6bb5\u540e\u9762\uff08\u7279\u522b\u8981\u6ce8\u610f\uff0c\u622a\u53d6\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u4e0d\u80fd\u8d8a\u754c\uff09\uff1b\n3\u3001\u63a5\u4e0b\u6765\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\u5c31\u5f97\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u96be\u4e8b\uff0c\u628a\u63e1\u597d\u603b\u5171\u5206 4 \u6bb5\uff0c\u5f53\u753b\u4e0a\u7b2c 4 \u4e2a\u70b9\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2a\u8003\u5bdf\u7684\u4e0b\u6807\u5df2\u7ecf\u201c\u521a\u521a\u597d\u201d\u8d8a\u754c\u7684\u65f6\u5019\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u6548\u7684 ip \u6bb5\u5206\u5272\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// https://leetcode-cn.com/problems/restore-ip-addresses/description/\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n\n    private boolean judgeIfIPSegment(String ipSegment) {\n        int len = ipSegment.length();\n        // \u5927\u4e8e 1 \u4f4d\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u4ee5 0 \u5f00\u5934\n        if (len > 1 && ipSegment.startsWith(\"0\")) {\n            return false;\n        }\n        return Integer.parseInt(ipSegment) <= 255;\n    }\n\n    private void findIpSegment(String s, int split, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (split == 4) {\n            if (begin == s.length()) {\n                res.add(pre.substring(0, pre.length() - 1));\n            }\n            return;\n        }\n        // split < 4 \u7684\u65f6\u5019\n        // begin + i <= s.length() \u5bb9\u6613\u88ab\u5ffd\u7565\n        for (int i = 1; i <= 3 && begin + i <= s.length(); i++) {\n            // \u53ef\u80fd\u6210\u4e3a ip \u6bb5\u7684\u5b57\u7b26\u4e32\n            String ifIpSegment = s.substring(begin, begin + i);\n            if (judgeIfIPSegment(ifIpSegment)) {\n                findIpSegment(s, split + 1, begin + i, pre + ifIpSegment + '.');\n            }\n        }\n\n    }\n\n    public List<String> restoreIpAddresses(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return res;\n        }\n        findIpSegment(s, 0, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String s = \"25525511135\";\n        Solution solution = new Solution();\n        List<String> restoreIpAddresses = solution.restoreIpAddresses(s);\n        System.out.println(restoreIpAddresses);\n    }\n}",
            "title": "93. Restore IP Addresses"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#93-restore-ip-addresses",
            "text": "",
            "title": "93. Restore IP Addresses"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 93. Restore IP Addresses   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 93. \u590d\u539fIP\u5730\u5740   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3001\u9012\u5f52\u56de\u6eaf\u7684\u601d\u60f3\u6765\u5b8c\u6210\u3002  1\u3001IP \u5730\u5740\u4e00\u5171 4 \u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\u662f 255\uff0c\u6700\u5c0f\u503c\u662f 0\uff0c\u6211\u4eec\u91c7\u7528\u641c\u7d22\u7684\u529e\u6cd5\u6765\u5f97\u5230\u6709\u6548\u7684 ip \u6bb5\uff1b\n2\u3001\u6bcf\u4e00\u6b21\u5faa\u73af\u5224\u65ad\u63a5\u4e0b\u6765\u8bfb\u8fdb\u6765\u7684 3 \u4e2a\u6570\u5b57\u5b57\u7b26\u662f\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a ip \u6bb5\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u52a0\u5230\u5df2\u7ecf\u5f62\u6210\u7684 ip \u6bb5\u540e\u9762\uff08\u7279\u522b\u8981\u6ce8\u610f\uff0c\u622a\u53d6\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u4e0d\u80fd\u8d8a\u754c\uff09\uff1b\n3\u3001\u63a5\u4e0b\u6765\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\u5c31\u5f97\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u96be\u4e8b\uff0c\u628a\u63e1\u597d\u603b\u5171\u5206 4 \u6bb5\uff0c\u5f53\u753b\u4e0a\u7b2c 4 \u4e2a\u70b9\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2a\u8003\u5bdf\u7684\u4e0b\u6807\u5df2\u7ecf\u201c\u521a\u521a\u597d\u201d\u8d8a\u754c\u7684\u65f6\u5019\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u6548\u7684 ip \u6bb5\u5206\u5272\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\n// https://leetcode-cn.com/problems/restore-ip-addresses/description/\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n\n    private boolean judgeIfIPSegment(String ipSegment) {\n        int len = ipSegment.length();\n        // \u5927\u4e8e 1 \u4f4d\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u4ee5 0 \u5f00\u5934\n        if (len > 1 && ipSegment.startsWith(\"0\")) {\n            return false;\n        }\n        return Integer.parseInt(ipSegment) <= 255;\n    }\n\n    private void findIpSegment(String s, int split, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (split == 4) {\n            if (begin == s.length()) {\n                res.add(pre.substring(0, pre.length() - 1));\n            }\n            return;\n        }\n        // split < 4 \u7684\u65f6\u5019\n        // begin + i <= s.length() \u5bb9\u6613\u88ab\u5ffd\u7565\n        for (int i = 1; i <= 3 && begin + i <= s.length(); i++) {\n            // \u53ef\u80fd\u6210\u4e3a ip \u6bb5\u7684\u5b57\u7b26\u4e32\n            String ifIpSegment = s.substring(begin, begin + i);\n            if (judgeIfIPSegment(ifIpSegment)) {\n                findIpSegment(s, split + 1, begin + i, pre + ifIpSegment + '.');\n            }\n        }\n\n    }\n\n    public List<String> restoreIpAddresses(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return res;\n        }\n        findIpSegment(s, 0, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String s = \"25525511135\";\n        Solution solution = new Solution();\n        List<String> restoreIpAddresses = solution.restoreIpAddresses(s);\n        System.out.println(restoreIpAddresses);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0100-same-tree/",
            "text": "100. Same Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n100. Same Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n100. \u76f8\u540c\u7684\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u975e\u5e38\u7b80\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u52a0\u601d\u7d22\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u6ce8\u610f\u8ba8\u8bba\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u5c31\u597d\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        // \u5148\u5904\u7406\u6700\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u90fd\u4e3a\u7a7a\u7ed3\u70b9\u7684\u65f6\u5019\n        if (p == null && q == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e\u4e24\u4e2a\u7ed3\u70b9\u90fd\u540c\u65f6\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\uff0c\u6216\u8005\u4e24\u4e2a\u7ed3\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd4\u56de false\n        if (p == null || q == null || p.val != q.val) {\n            return false;\n        }\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n}",
            "title": "100. Same Tree"
        },
        {
            "location": "/leetcode-0100-same-tree/#100-same-tree",
            "text": "",
            "title": "100. Same Tree"
        },
        {
            "location": "/leetcode-0100-same-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 100. Same Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 100. \u76f8\u540c\u7684\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0100-same-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u975e\u5e38\u7b80\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u52a0\u601d\u7d22\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u6ce8\u610f\u8ba8\u8bba\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u5c31\u597d\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0100-same-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0100-same-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        // \u5148\u5904\u7406\u6700\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u90fd\u4e3a\u7a7a\u7ed3\u70b9\u7684\u65f6\u5019\n        if (p == null && q == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e\u4e24\u4e2a\u7ed3\u70b9\u90fd\u540c\u65f6\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\uff0c\u6216\u8005\u4e24\u4e2a\u7ed3\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd4\u56de false\n        if (p == null || q == null || p.val != q.val) {\n            return false;\n        }\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/",
            "text": "101. Symmetric Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n101. Symmetric Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n101. \u5bf9\u79f0\u4e8c\u53c9\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u601d\u8def1\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\uff1a\u5148\u62f7\u8d1d\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u518d\u53cd\u8f6c\uff0c\u5c06\u53cd\u8f6c\u4ee5\u540e\u7684\u4e8c\u53c9\u6811\u548c\u81ea\u5df1\u6bd4\u8f83\uff0c\u770b\u770b\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u4e2a\u601d\u8def\u5c31\u8f6c\u5316\u6210\u4e86\u4ee5\u524d\u6211\u4eec\u89e3\u51b3\u8fc7\u7684\u95ee\u9898\u3002\u53e6\u5916\u590d\u5236\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u7740\u590d\u5236\uff0c\u7136\u540e\u6bd4\u8f83\u3002\n\n\n\u601d\u8def2\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u9012\u5f52\u53bb\u5224\u65ad\u4e24\u68f5\u5b50\u6811\u662f\u5426\u955c\u9762\u5bf9\u79f0\u3002\n\n\n\u601d\u8def3\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b543\uff09\uff1a\u4f7f\u7528\u961f\u5217\uff0c\u5e76\u4e14\u662f\u53cc\u7aef\u961f\u5217\uff08\u94fe\u8868\u5b9e\u73b0\uff09\u8fd9\u4e2a\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u3002\u753b\u51fa\u51fa\u961f\u5165\u961f\u7684\u987a\u5e8f\uff0c\u5c31\u5f88\u6e05\u695a\u4e86\u3002\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\u8bf4\u660e\uff1a\u6ce8\u610f\u4e0b\u9762\u7684 \ncopyBinaryTree\n \u65b9\u6cd5\u3002\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        TreeNode copyBinaryTree = copyBinaryTree(root);\n        TreeNode invertBinaryTree = invertBinaryTree(copyBinaryTree);\n        return isSameTree(root, invertBinaryTree);\n    }\n\n    private boolean isSameTree(TreeNode t1, TreeNode t2) {\n        if (t1 == null && t2 == null) {\n            return true;\n        }\n        if (t1 == null || t2 == null || t1.val != t2.val) {\n            return false;\n        }\n        return isSameTree(t1.left, t2.left) && isSameTree(t1.right, t2.right);\n    }\n\n    private TreeNode invertBinaryTree(TreeNode node) {\n        if (node == null) {\n            return node;\n        }\n        invertBinaryTree(node.left);\n        invertBinaryTree(node.right);\n        TreeNode temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n        return node;\n    }\n\n    // \u4e5f\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u719f\u6089\u4e00\u4e0b\u5982\u4f55\u5b8c\u6210\u4e8c\u53c9\u6811\u7684\u590d\u5236\uff09\n    private TreeNode copyBinaryTree(TreeNode node) {\n        if (node == null) {\n            return null;\n        }\n        TreeNode newTreeNode = new TreeNode(node.val);\n        newTreeNode.left = copyBinaryTree(node.left);\n        newTreeNode.right = copyBinaryTree(node.right);\n        return newTreeNode;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\npublic class Solution {\n\n    // \u753b\u51fa 4 \u5c42\u7ed3\u6784\u56fe\u5c31\u5bb9\u6613\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\u4e86\n    private boolean isSymmetric(TreeNode p1, TreeNode p2) {\n        // \u5de6\u53f3\u90fd\u4e3a\u7a7a\uff0c\u5224\u4e3a\u76f8\u7b49\n        if (p1 == null && p2 == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u5de6\u53f3\u4e4b\u4e00\u81f3\u5c11\u975e\u7a7a\uff0c\u6216\u8005\u90fd\u975e\u7a7a\uff0c\u4f46\u5b83\u4eec\u7684 val \u4e0d\u7b49\uff0c\u90fd\u4e0d\u80fd\u53eb\u505a symmetric tree\n        if (p1 == null || p2 == null || p1.val != p2.val) {\n            return false;\n        }\n        // \u5bf9\u79f0\u5730\u53bb\u6bd4\u8f83\uff0cp1 \u7684\u5de6\u8fb9\u548c p2 \u7684\u53f3\u8fb9\n        // p1 \u7684\u53f3\u8fb9\u548c p2 \u7684\u5de6\u8fb9\n        return isSymmetric(p1.left, p2.right) && isSymmetric(p1.right, p2.left);\n    }\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return isSymmetric(root.left, root.right);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\n\n\n\u53c2\u8003\u8d44\u6599\uff1a\n\n\nimport java.util.LinkedList;\n\n// https://leetcode-cn.com/problems/symmetric-tree/description/\npublic class Solution3 {\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        LinkedList<TreeNode> linkedList = new LinkedList<>();\n        linkedList.addFirst(root.left);\n        linkedList.addLast(root.right);\n        while (!linkedList.isEmpty()) {\n            // \u51fa\u961f\u7684\u65f6\u5019\uff0c\u770b\u770b\u662f\u5426\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5206\u522b\u5165\u961f\n            TreeNode lNode = linkedList.removeFirst();\n            TreeNode rNode = linkedList.removeLast();\n            if (lNode == null && rNode == null) {\n                continue;\n            }\n            if (lNode == null || rNode == null) {\n                return false;\n            }\n            linkedList.addFirst(lNode.right);\n            linkedList.addFirst(lNode.left);\n            linkedList.addLast(rNode.left);\n            linkedList.addLast(rNode.right);\n\n            if (lNode.val != rNode.val) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "title": "101. Symmetric Tree"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#101-symmetric-tree",
            "text": "",
            "title": "101. Symmetric Tree"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 101. Symmetric Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 101. \u5bf9\u79f0\u4e8c\u53c9\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a   \u601d\u8def1\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\uff1a\u5148\u62f7\u8d1d\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u518d\u53cd\u8f6c\uff0c\u5c06\u53cd\u8f6c\u4ee5\u540e\u7684\u4e8c\u53c9\u6811\u548c\u81ea\u5df1\u6bd4\u8f83\uff0c\u770b\u770b\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u4e2a\u601d\u8def\u5c31\u8f6c\u5316\u6210\u4e86\u4ee5\u524d\u6211\u4eec\u89e3\u51b3\u8fc7\u7684\u95ee\u9898\u3002\u53e6\u5916\u590d\u5236\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u7740\u590d\u5236\uff0c\u7136\u540e\u6bd4\u8f83\u3002  \u601d\u8def2\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u9012\u5f52\u53bb\u5224\u65ad\u4e24\u68f5\u5b50\u6811\u662f\u5426\u955c\u9762\u5bf9\u79f0\u3002  \u601d\u8def3\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b543\uff09\uff1a\u4f7f\u7528\u961f\u5217\uff0c\u5e76\u4e14\u662f\u53cc\u7aef\u961f\u5217\uff08\u94fe\u8868\u5b9e\u73b0\uff09\u8fd9\u4e2a\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u3002\u753b\u51fa\u51fa\u961f\u5165\u961f\u7684\u987a\u5e8f\uff0c\u5c31\u5f88\u6e05\u695a\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#1",
            "text": "\u8bf4\u660e\uff1a\u6ce8\u610f\u4e0b\u9762\u7684  copyBinaryTree  \u65b9\u6cd5\u3002  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        TreeNode copyBinaryTree = copyBinaryTree(root);\n        TreeNode invertBinaryTree = invertBinaryTree(copyBinaryTree);\n        return isSameTree(root, invertBinaryTree);\n    }\n\n    private boolean isSameTree(TreeNode t1, TreeNode t2) {\n        if (t1 == null && t2 == null) {\n            return true;\n        }\n        if (t1 == null || t2 == null || t1.val != t2.val) {\n            return false;\n        }\n        return isSameTree(t1.left, t2.left) && isSameTree(t1.right, t2.right);\n    }\n\n    private TreeNode invertBinaryTree(TreeNode node) {\n        if (node == null) {\n            return node;\n        }\n        invertBinaryTree(node.left);\n        invertBinaryTree(node.right);\n        TreeNode temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n        return node;\n    }\n\n    // \u4e5f\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u719f\u6089\u4e00\u4e0b\u5982\u4f55\u5b8c\u6210\u4e8c\u53c9\u6811\u7684\u590d\u5236\uff09\n    private TreeNode copyBinaryTree(TreeNode node) {\n        if (node == null) {\n            return null;\n        }\n        TreeNode newTreeNode = new TreeNode(node.val);\n        newTreeNode.left = copyBinaryTree(node.left);\n        newTreeNode.right = copyBinaryTree(node.right);\n        return newTreeNode;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#2",
            "text": "public class Solution {\n\n    // \u753b\u51fa 4 \u5c42\u7ed3\u6784\u56fe\u5c31\u5bb9\u6613\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\u4e86\n    private boolean isSymmetric(TreeNode p1, TreeNode p2) {\n        // \u5de6\u53f3\u90fd\u4e3a\u7a7a\uff0c\u5224\u4e3a\u76f8\u7b49\n        if (p1 == null && p2 == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u5de6\u53f3\u4e4b\u4e00\u81f3\u5c11\u975e\u7a7a\uff0c\u6216\u8005\u90fd\u975e\u7a7a\uff0c\u4f46\u5b83\u4eec\u7684 val \u4e0d\u7b49\uff0c\u90fd\u4e0d\u80fd\u53eb\u505a symmetric tree\n        if (p1 == null || p2 == null || p1.val != p2.val) {\n            return false;\n        }\n        // \u5bf9\u79f0\u5730\u53bb\u6bd4\u8f83\uff0cp1 \u7684\u5de6\u8fb9\u548c p2 \u7684\u53f3\u8fb9\n        // p1 \u7684\u53f3\u8fb9\u548c p2 \u7684\u5de6\u8fb9\n        return isSymmetric(p1.left, p2.right) && isSymmetric(p1.right, p2.left);\n    }\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return isSymmetric(root.left, root.right);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#3",
            "text": "\u53c2\u8003\u8d44\u6599\uff1a  import java.util.LinkedList;\n\n// https://leetcode-cn.com/problems/symmetric-tree/description/\npublic class Solution3 {\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        LinkedList<TreeNode> linkedList = new LinkedList<>();\n        linkedList.addFirst(root.left);\n        linkedList.addLast(root.right);\n        while (!linkedList.isEmpty()) {\n            // \u51fa\u961f\u7684\u65f6\u5019\uff0c\u770b\u770b\u662f\u5426\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5206\u522b\u5165\u961f\n            TreeNode lNode = linkedList.removeFirst();\n            TreeNode rNode = linkedList.removeLast();\n            if (lNode == null && rNode == null) {\n                continue;\n            }\n            if (lNode == null || rNode == null) {\n                return false;\n            }\n            linkedList.addFirst(lNode.right);\n            linkedList.addFirst(lNode.left);\n            linkedList.addLast(rNode.left);\n            linkedList.addLast(rNode.right);\n\n            if (lNode.val != rNode.val) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/",
            "text": "104. Maximum Depth of Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n104. Maximum Depth of Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u4f46\u5982\u679c\u8fd9\u9053\u9898\u8981\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u90a3\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86\uff0c\u8bf7\u53c2\u8003 LeetCode \u7b2c 111 \u9898\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n    }\n\n}",
            "title": "104. Maximum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#104-maximum-depth-of-binary-tree",
            "text": "",
            "title": "104. Maximum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 104. Maximum Depth of Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u4f46\u5982\u679c\u8fd9\u9053\u9898\u8981\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u90a3\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86\uff0c\u8bf7\u53c2\u8003 LeetCode \u7b2c 111 \u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#1",
            "text": "public class Solution {\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n    }\n\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/",
            "text": "111. Minimum Depth of Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n111. Minimum Depth of Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e0d\u8981\u7b80\u5355\u5730\u8ba4\u4e3a\u8fd9\u9053\u9898\u548c\u201c\u6c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u201d\uff08LeetCode \u7b2c 104 \u9898\uff09\u4e00\u6837\uff0c\u8981\u8003\u8651\u5230\u201c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\u201d\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public int minDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        // \u8fd9\u4e00\u6b65\u8981\u7279\u522b\u6ce8\u610f\uff0c\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u7684\u60c5\u51b5\n        if (root.left == null || root.right == null) {\n            return Integer.max(minDepth(root.left), minDepth(root.right)) + 1;\n\n        }\n        return Integer.min(minDepth(root.left), minDepth(root.right)) + 1;\n    }\n}",
            "title": "111. Minimum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#111-minimum-depth-of-binary-tree",
            "text": "",
            "title": "111. Minimum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 111. Minimum Depth of Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e0d\u8981\u7b80\u5355\u5730\u8ba4\u4e3a\u8fd9\u9053\u9898\u548c\u201c\u6c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u201d\uff08LeetCode \u7b2c 104 \u9898\uff09\u4e00\u6837\uff0c\u8981\u8003\u8651\u5230\u201c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\u201d\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public int minDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        // \u8fd9\u4e00\u6b65\u8981\u7279\u522b\u6ce8\u610f\uff0c\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u7684\u60c5\u51b5\n        if (root.left == null || root.right == null) {\n            return Integer.max(minDepth(root.left), minDepth(root.right)) + 1;\n\n        }\n        return Integer.min(minDepth(root.left), minDepth(root.right)) + 1;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/",
            "text": "147. Insertion Sort List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 \n\n\n\n\n\n\n\u63d2\u5165\u6392\u5e8f\u7684\u52a8\u753b\u6f14\u793a\u5982\u4e0a\u3002\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u94fe\u8868\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u90e8\u5206\u6392\u5e8f\uff08\u7528\u9ed1\u8272\u8868\u793a\uff09\u3002\n\u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff08\u7528\u7ea2\u8272\u8868\u793a\uff09\uff0c\u5e76\u539f\u5730\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u597d\u5e8f\u7684\u94fe\u8868\u4e2d\u3002\n\n\n\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\uff1a\n\n\n\n\n\u63d2\u5165\u6392\u5e8f\u662f\u8fed\u4ee3\u7684\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u8f93\u51fa\u5217\u8868\u3002\n\n\n\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f\u53ea\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728\u5e8f\u5217\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u3002\n\n\n\u91cd\u590d\u76f4\u5230\u6240\u6709\u8f93\u5165\u6570\u636e\u63d2\u5165\u5b8c\u4e3a\u6b62\u3002\n\n\n\n\n\u793a\u4f8b 1\uff1a\n\n\n\u8f93\u5165: 4->2->1->3\n\u8f93\u51fa: 1->2->3->4\n\n\n\n\n\u793a\u4f8b 2\uff1a\n\n\n\u8f93\u5165: -1->5->3->4->0\n\u8f93\u51fa: -1->0->3->4->5\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n147. Insertion Sort List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u9898\u610f\u6211\u4eec\u611f\u89c9\u6709\u90a3\u4e48\u4e9b\u8bef\u5bfc\u6211\u4eec\u7684\u610f\u601d\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u4ece\u5934\u5f00\u59cb\u627e\u7ed3\u70b9\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u4f46\u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u53c8\u4e0d\u50cf\u63d2\u5165\u6392\u5e8f\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8981\u592a\u6b7b\u677f\uff0c\u4e0d\u8981\u6015\u9ebb\u70e6\u6211\u89c9\u5f97\u662f\u89e3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\uff08\u8fd9\u53e5\u8bdd\u611f\u89c9\u8ddf\u6ca1\u8bf4\u4e00\u4e2a\u6837\uff0c^_^\uff09\u3002\n\n1. \u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u4f1a\u5c06\u904d\u5386\u5230\u7684\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5df2\u7ecf\u6392\u5e8f\u7684\u90e8\u5206\uff1b\n\n2. \u719f\u6089\u63d2\u5165\u6392\u5e8f\u7684\u670b\u53cb\u4eec\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u63d2\u5165\u8fc7\u7a0b\u662f\u4ece\u540e\u5411\u524d\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u53ea\u4fdd\u5b58\u4e86\u5f53\u524d\u7ed3\u70b9\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488\uff0c\u5e76\u6ca1\u6709\u4fdd\u5b58\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 pre \u6307\u9488\uff1b\n\n3. \u6211\u4eec\u5c31\u8981\u53d8\u6362\u601d\u8def\u4e86\uff0c\u6bcf\u6b21\u90fd\u8981\u4ece\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u627e\u5230\u65b0\u904d\u5386\u7684\u8282\u70b9\u9002\u5408\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fdb\u884c\u7a7f\u9488\u5f15\u7ebf\uff1b\n\n4. \u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\uff0c\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5f80\u5f80\u662f\u8bbe\u8ba1\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u4ee5\u7b80\u5316\u7f16\u7801\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u60f3\u6e05\u695a\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5199\u51fa\u6b63\u786e\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u96be\u4e8b\u3002  \n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode insertionSortList(ListNode head) {\n        // \u5148\u5199\u6700\u7279\u6b8a\u7684\u60c5\u51b5\n        if (head == null) {\n            return null;\n        }\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = head;\n        ListNode pre;\n        ListNode next;\n        while (true) {\n            // \u5982\u679c\u904d\u5386\u4e0b\u53bb\uff0c\u662f\u987a\u5e8f\u6392\u5217\u7684\u8bdd\uff0c\u90a3\u6700\u7b80\u5355\u4e86\uff0ccurNode \u6307\u9488\u5411\u524d\u5c31\u884c\u4e86\n            // \u8fd9\u4e00\u6b65\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u8fc7\u7a0b\n            // \u6682\u5b58\u5f53\u524d\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\n            while (curNode.next != null && curNode.val <= curNode.next.val) {\n                curNode = curNode.next;\n            }\n            // \u4e0b\u9762\u9488\u5bf9\u4e0a\u4e00\u6b65\u8df3\u51fa\u5faa\u73af\u7684\u4e24\u4e2a\u6761\u4ef6\u8fdb\u884c\u7279\u6b8a\u5904\u7406\n            if (curNode.next == null) {\n                // \u5982\u679c\u540e\u9762\u6ca1\u6709\u5143\u7d20\u4e86\uff0c\u90a3\u5c31\u8bf4\u660e\uff0c\u6b64\u65f6\u94fe\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u53ef\u4ee5\u7ed3\u675f\u6211\u4eec\u7684\u6392\u5e8f\u903b\u8f91\u4e86\n                break;\n            } else {\n                // \u5426\u5219\u5c31\u4e00\u5b9a\u6ee1\u8db3 curNode.val > curNode.next.val; \u4e3a\u771f\n                // pre \u6253\u56de\u5230\u8d77\u70b9\n                pre = dummyNode;\n                next = curNode.next;\n                // \u628a pre \u632a\u5230\u53ef\u4ee5\u653e\u7f6e next \u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\n                while (pre.next.val < next.val) {\n                    pre = pre.next;\n                }\n                // \u7a7f\u9488\u5f15\u7ebf\u7684 3 \u4e2a\u6b65\u9aa4\uff0c\u8bf7\u89c1\u56fe https://liweiwei1419.github.io/images/leetcode-solution/147-1.jpg\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 1\n                curNode.next = next.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                next.next = pre.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                pre.next = next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{3, 7, 9, 10, 8};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode insertionSortList = solution.insertionSortList(head);\n        System.out.println(insertionSortList);\n    }\n}",
            "title": "147. Insertion Sort List"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#147-insertion-sort-list",
            "text": "",
            "title": "147. Insertion Sort List"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002     \u63d2\u5165\u6392\u5e8f\u7684\u52a8\u753b\u6f14\u793a\u5982\u4e0a\u3002\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u94fe\u8868\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u90e8\u5206\u6392\u5e8f\uff08\u7528\u9ed1\u8272\u8868\u793a\uff09\u3002\n\u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff08\u7528\u7ea2\u8272\u8868\u793a\uff09\uff0c\u5e76\u539f\u5730\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u597d\u5e8f\u7684\u94fe\u8868\u4e2d\u3002  \u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\uff1a   \u63d2\u5165\u6392\u5e8f\u662f\u8fed\u4ee3\u7684\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u8f93\u51fa\u5217\u8868\u3002  \u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f\u53ea\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728\u5e8f\u5217\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u3002  \u91cd\u590d\u76f4\u5230\u6240\u6709\u8f93\u5165\u6570\u636e\u63d2\u5165\u5b8c\u4e3a\u6b62\u3002   \u793a\u4f8b 1\uff1a  \u8f93\u5165: 4->2->1->3\n\u8f93\u51fa: 1->2->3->4  \u793a\u4f8b 2\uff1a  \u8f93\u5165: -1->5->3->4->0\n\u8f93\u51fa: -1->0->3->4->5   \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 147. Insertion Sort List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u9898\u610f\u6211\u4eec\u611f\u89c9\u6709\u90a3\u4e48\u4e9b\u8bef\u5bfc\u6211\u4eec\u7684\u610f\u601d\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u4ece\u5934\u5f00\u59cb\u627e\u7ed3\u70b9\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u4f46\u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u53c8\u4e0d\u50cf\u63d2\u5165\u6392\u5e8f\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8981\u592a\u6b7b\u677f\uff0c\u4e0d\u8981\u6015\u9ebb\u70e6\u6211\u89c9\u5f97\u662f\u89e3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\uff08\u8fd9\u53e5\u8bdd\u611f\u89c9\u8ddf\u6ca1\u8bf4\u4e00\u4e2a\u6837\uff0c^_^\uff09\u3002 \n1. \u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u4f1a\u5c06\u904d\u5386\u5230\u7684\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5df2\u7ecf\u6392\u5e8f\u7684\u90e8\u5206\uff1b \n2. \u719f\u6089\u63d2\u5165\u6392\u5e8f\u7684\u670b\u53cb\u4eec\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u63d2\u5165\u8fc7\u7a0b\u662f\u4ece\u540e\u5411\u524d\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u53ea\u4fdd\u5b58\u4e86\u5f53\u524d\u7ed3\u70b9\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488\uff0c\u5e76\u6ca1\u6709\u4fdd\u5b58\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 pre \u6307\u9488\uff1b \n3. \u6211\u4eec\u5c31\u8981\u53d8\u6362\u601d\u8def\u4e86\uff0c\u6bcf\u6b21\u90fd\u8981\u4ece\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u627e\u5230\u65b0\u904d\u5386\u7684\u8282\u70b9\u9002\u5408\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fdb\u884c\u7a7f\u9488\u5f15\u7ebf\uff1b \n4. \u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\uff0c\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5f80\u5f80\u662f\u8bbe\u8ba1\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u4ee5\u7b80\u5316\u7f16\u7801\u3002 \n\u7efc\u4e0a\u6240\u8ff0\uff0c\u60f3\u6e05\u695a\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5199\u51fa\u6b63\u786e\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u96be\u4e8b\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode insertionSortList(ListNode head) {\n        // \u5148\u5199\u6700\u7279\u6b8a\u7684\u60c5\u51b5\n        if (head == null) {\n            return null;\n        }\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = head;\n        ListNode pre;\n        ListNode next;\n        while (true) {\n            // \u5982\u679c\u904d\u5386\u4e0b\u53bb\uff0c\u662f\u987a\u5e8f\u6392\u5217\u7684\u8bdd\uff0c\u90a3\u6700\u7b80\u5355\u4e86\uff0ccurNode \u6307\u9488\u5411\u524d\u5c31\u884c\u4e86\n            // \u8fd9\u4e00\u6b65\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u8fc7\u7a0b\n            // \u6682\u5b58\u5f53\u524d\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\n            while (curNode.next != null && curNode.val <= curNode.next.val) {\n                curNode = curNode.next;\n            }\n            // \u4e0b\u9762\u9488\u5bf9\u4e0a\u4e00\u6b65\u8df3\u51fa\u5faa\u73af\u7684\u4e24\u4e2a\u6761\u4ef6\u8fdb\u884c\u7279\u6b8a\u5904\u7406\n            if (curNode.next == null) {\n                // \u5982\u679c\u540e\u9762\u6ca1\u6709\u5143\u7d20\u4e86\uff0c\u90a3\u5c31\u8bf4\u660e\uff0c\u6b64\u65f6\u94fe\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u53ef\u4ee5\u7ed3\u675f\u6211\u4eec\u7684\u6392\u5e8f\u903b\u8f91\u4e86\n                break;\n            } else {\n                // \u5426\u5219\u5c31\u4e00\u5b9a\u6ee1\u8db3 curNode.val > curNode.next.val; \u4e3a\u771f\n                // pre \u6253\u56de\u5230\u8d77\u70b9\n                pre = dummyNode;\n                next = curNode.next;\n                // \u628a pre \u632a\u5230\u53ef\u4ee5\u653e\u7f6e next \u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\n                while (pre.next.val < next.val) {\n                    pre = pre.next;\n                }\n                // \u7a7f\u9488\u5f15\u7ebf\u7684 3 \u4e2a\u6b65\u9aa4\uff0c\u8bf7\u89c1\u56fe https://liweiwei1419.github.io/images/leetcode-solution/147-1.jpg\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 1\n                curNode.next = next.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                next.next = pre.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                pre.next = next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{3, 7, 9, 10, 8};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode insertionSortList = solution.insertionSortList(head);\n        System.out.println(insertionSortList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0148-sort-list/",
            "text": "148. Sort List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5728\u00a0\nO\n(\nn\n\u00a0log\u00a0\nn\n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 4->2->1->3\n\n\u8f93\u51fa:\n 1->2->3->4\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n -1->5->3->4->0\n\n\u8f93\u51fa:\n -1->0->3->4->5\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n148. Sort List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n148. \u6392\u5e8f\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u5df2\u7ecf\u63d0\u793a\u4e86\uff0c\u8981\u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u5b8c\u6210\u5355\u94fe\u8868\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e00\u4e2a\u5f88\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5f52\u5e76\u6392\u5e8f\u6709\u81ea\u4e0a\u800c\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u662f\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5c0f\u7684\u8fc7\u7a0b\uff0c\u800c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u5f52\u5e76\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5927\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u601d\u8def\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\n\n\n\n\n\u8981\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u8981\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u5b9d\u8d35\u7684\u7ecf\u9a8c\u5c31\u662f\uff1a\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u5feb\u4e00\u6162\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u94fe\u8868\u7684\u7ed3\u5c3e\u6216\u8005\u6700\u540e\u4e00\u4e2a\u6709\u6548\u7ed3\u70b9\u65f6\uff0c\u6162\u6307\u9488\u5c31\u6307\u5411\u4e86\u4e2d\u95f4\u7684\u8282\u70b9\u3002\n\n\n\n\n\u601d\u8def2\uff1a\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\n\u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5355\u94fe\u8868\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\uff1a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(int[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode sortList(ListNode head) {\n        // \u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u5373\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u4e0d\u7528\u627e\u4e2d\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3001\u5206\u6cbb\u601d\u60f3\uff0c\u5148\u8981\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\n        ListNode fast = head;\n        ListNode slow = head;\n        // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e00\u822c\u505a\u6cd5\n        while (fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        // \u5b9a\u4e49\u4f4d\u4e8e\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u5b83\u90a3\u91cc\u5c06\u4e00\u4e2a\u94fe\u8868\u5207\u5f00\n        ListNode midNext = slow.next;\n        // \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u4ece\u4e2d\u95f4\u5207\u5f00\uff0c\u5206\u5272\u6210\u4e24\u4e2a\u94fe\u8868\n        slow.next = null;\n        ListNode listNodeLeft = sortList(head);\n        ListNode listNodeRight = sortList(midNext);\n        // \u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u8fd9\u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u64cd\u4f5c\u4e86\n        return mergeOfTwoSortListNode(listNodeLeft, listNodeRight);\n    }\n\n    private ListNode mergeOfTwoSortListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortListNode(l1, l2.next);\n            return l2;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{4, 2, 1, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode sortList = solution.sortList(head);\n        System.out.println(sortList);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\n/**\n * \u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5f52\u5e76\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u8fd9\u91cc\u8bbe\u7f6e 64 \uff0c\u662f\u4e00\u4e2a\u6233\u6233\u6709\u4f59\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u7ed3\u70b9\u6570\u91cf\u4e3a 2^64 \u8fd9\u4e48\u591a\u7684\u5355\u94fe\u8868\u7684\u6392\u5e8f\n        ListNode[] counter = new ListNode[64];\n        ListNode curNode = head;\n        // \u904d\u5386\u5230\u7684\u6700\u5927\u7684 counter \u6570\u7ec4\u7684\u7d22\u5f15\n        int maxIndex = 0;\n        while (curNode != null) {\n            // \u5148\u628a\u5f53\u524d\u5143\u7d20\u6682\u5b58\u8d77\u6765\uff0c\u7a0d\u5019\u8981\u628a\u5b83\u653e\u5230 counter \u6570\u7ec4\u5408\u9002\u7684\u4f4d\u7f6e\u4e0a\n            ListNode carryNode = curNode;\n            // curNode \u6307\u9488\u9a6c\u4e0a\u540e\u79fb\uff0c\u65b9\u4fbf\u4e0b\u6b21\u5904\u7406\n            curNode = curNode.next;\n            // \u62ff\u51fa\u7684\u8282\u70b9\u5c31\u548c\u539f\u6765\u7684\u94fe\u8868\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5728 counter \u6570\u7ec4\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u6240\u4ee5\u8981\u5207\u65ad\u5b83\u548c\u539f\u94fe\u8868\u7684\u5173\u7cfb\n            carryNode.next = null;\n            // \u5c1d\u8bd5\u4ece counter \u6570\u7ec4 0 \u53f7\u7d22\u5f15\u5f00\u59cb\u653e\u7f6e\n            int i = 0;\n            // \u53ea\u8981\u975e\u7a7a\u5f53\u524d\u4f4d\u7f6e\u975e\u7a7a\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21 merge\uff0cmerge \u4ee5\u540e\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u5982\u679c\u4e0b\u4e00\u683c\u975e\u7a7a\u5c31\u7ee7\u7eed\u5408\u5e76\n            // \u5408\u5e76\u4ee5\u540e\u518d\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u76f4\u5230\u4e0b\u4e00\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u653e\u5728\u90a3\u4e2a\u4e3a\u7a7a\u7684\u4e0b\u4e00\u683c\u5c31\u597d\n            while (counter[i] != null) {\n                ListNode newMergeNode = mergeOfTwoSortedListNode(carryNode, counter[i]);\n                counter[i] = null;\n                i++;\n                carryNode = newMergeNode;\n            }\n            // \u9047\u5230\u4e86\u7a7a\uff0c\u5c31\u628a carryNode \u653e\u5728\u6570\u7ec4\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\n            counter[i] = carryNode;\n            // \u8bb0\u5f55\u6700\u591a\u4f7f\u7528\u5230 counter \u6570\u7ec4\u7684\u7b2c\u51e0\u4f4d\uff0c\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u8981\u7528\u4e0a\n            if (i > maxIndex) {\n                maxIndex = i;\n            }\n        }\n        // \u904d\u5386\u6574\u4e2a count \u6570\u7ec4\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5f52\u5e76\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u548c\u5f52\u5e76 n \u4e2a\u6709\u5e8f\u5355\u94fe\u8868\u662f\u4e00\u6837\u7684\u4e86\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u4e24\u4e24\u5f52\u5e76\n        // \u8fd8\u53ef\u4ee5\u91c7\u7528 LeetCode \u7b2c 23 \u9898\u7684\u529e\u6cd5\u5b8c\u6210\u8fd9\u4e00\u6b65\n        // \u53c2\u8003\uff1ahttps://liweiwei1419.github.io/leetcode-solution/leetcode-0023-merge-k-sorted-lists/\n        ListNode res = null;\n        for (int i = 0; i <= maxIndex; i++) {\n            if (counter[i] != null) {\n                res = mergeOfTwoSortedListNode(res, counter[i]);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * \u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u662f\u6211\u4eec\u975e\u5e38\u719f\u6089\u7684\u64cd\u4f5c\u4e86\uff0c\u53ef\u4ee5\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u8fd9\u91cc\u6211\u4eec\u9012\u5f52\u5b8c\u6210\n     *\n     * @param l1 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88681\n     * @param l2 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88682\n     * @return \u5408\u5e76\u4ee5\u540e\u7684\u5355\u94fe\u8868\n     */\n    private ListNode mergeOfTwoSortedListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortedListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortedListNode(l1, l2.next);\n            return l2;\n        }\n    }\n}\n\n\n\n\n\u53c2\u8003\u8d44\u6599\uff1a\n1. http://www.cnblogs.com/bin3/articles/1858691.html\n\n2. https://blog.csdn.net/qq575787460/article/details/40706747  \n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0148-sort-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "148. Sort List"
        },
        {
            "location": "/leetcode-0148-sort-list/#148-sort-list",
            "text": "",
            "title": "148. Sort List"
        },
        {
            "location": "/leetcode-0148-sort-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5728\u00a0 O ( n \u00a0log\u00a0 n ) \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  4->2->1->3 \u8f93\u51fa:  1->2->3->4  \u793a\u4f8b 2:  \u8f93\u5165:  -1->5->3->4->0 \u8f93\u51fa:  -1->0->3->4->5    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 148. Sort List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 148. \u6392\u5e8f\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0148-sort-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u5df2\u7ecf\u63d0\u793a\u4e86\uff0c\u8981\u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u5b8c\u6210\u5355\u94fe\u8868\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e00\u4e2a\u5f88\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5f52\u5e76\u6392\u5e8f\u6709\u81ea\u4e0a\u800c\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u662f\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5c0f\u7684\u8fc7\u7a0b\uff0c\u800c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u5f52\u5e76\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5927\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u601d\u8def\u3002   \u601d\u8def1\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09   \u8981\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u8981\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u5b9d\u8d35\u7684\u7ecf\u9a8c\u5c31\u662f\uff1a\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u5feb\u4e00\u6162\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u94fe\u8868\u7684\u7ed3\u5c3e\u6216\u8005\u6700\u540e\u4e00\u4e2a\u6709\u6548\u7ed3\u70b9\u65f6\uff0c\u6162\u6307\u9488\u5c31\u6307\u5411\u4e86\u4e2d\u95f4\u7684\u8282\u70b9\u3002   \u601d\u8def2\uff1a\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\n\u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5355\u94fe\u8868\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0148-sort-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0148-sort-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(int[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode sortList(ListNode head) {\n        // \u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u5373\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u4e0d\u7528\u627e\u4e2d\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3001\u5206\u6cbb\u601d\u60f3\uff0c\u5148\u8981\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\n        ListNode fast = head;\n        ListNode slow = head;\n        // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e00\u822c\u505a\u6cd5\n        while (fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        // \u5b9a\u4e49\u4f4d\u4e8e\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u5b83\u90a3\u91cc\u5c06\u4e00\u4e2a\u94fe\u8868\u5207\u5f00\n        ListNode midNext = slow.next;\n        // \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u4ece\u4e2d\u95f4\u5207\u5f00\uff0c\u5206\u5272\u6210\u4e24\u4e2a\u94fe\u8868\n        slow.next = null;\n        ListNode listNodeLeft = sortList(head);\n        ListNode listNodeRight = sortList(midNext);\n        // \u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u8fd9\u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u64cd\u4f5c\u4e86\n        return mergeOfTwoSortListNode(listNodeLeft, listNodeRight);\n    }\n\n    private ListNode mergeOfTwoSortListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortListNode(l1, l2.next);\n            return l2;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{4, 2, 1, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode sortList = solution.sortList(head);\n        System.out.println(sortList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0148-sort-list/#2",
            "text": "/**\n * \u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5f52\u5e76\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u8fd9\u91cc\u8bbe\u7f6e 64 \uff0c\u662f\u4e00\u4e2a\u6233\u6233\u6709\u4f59\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u7ed3\u70b9\u6570\u91cf\u4e3a 2^64 \u8fd9\u4e48\u591a\u7684\u5355\u94fe\u8868\u7684\u6392\u5e8f\n        ListNode[] counter = new ListNode[64];\n        ListNode curNode = head;\n        // \u904d\u5386\u5230\u7684\u6700\u5927\u7684 counter \u6570\u7ec4\u7684\u7d22\u5f15\n        int maxIndex = 0;\n        while (curNode != null) {\n            // \u5148\u628a\u5f53\u524d\u5143\u7d20\u6682\u5b58\u8d77\u6765\uff0c\u7a0d\u5019\u8981\u628a\u5b83\u653e\u5230 counter \u6570\u7ec4\u5408\u9002\u7684\u4f4d\u7f6e\u4e0a\n            ListNode carryNode = curNode;\n            // curNode \u6307\u9488\u9a6c\u4e0a\u540e\u79fb\uff0c\u65b9\u4fbf\u4e0b\u6b21\u5904\u7406\n            curNode = curNode.next;\n            // \u62ff\u51fa\u7684\u8282\u70b9\u5c31\u548c\u539f\u6765\u7684\u94fe\u8868\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5728 counter \u6570\u7ec4\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u6240\u4ee5\u8981\u5207\u65ad\u5b83\u548c\u539f\u94fe\u8868\u7684\u5173\u7cfb\n            carryNode.next = null;\n            // \u5c1d\u8bd5\u4ece counter \u6570\u7ec4 0 \u53f7\u7d22\u5f15\u5f00\u59cb\u653e\u7f6e\n            int i = 0;\n            // \u53ea\u8981\u975e\u7a7a\u5f53\u524d\u4f4d\u7f6e\u975e\u7a7a\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21 merge\uff0cmerge \u4ee5\u540e\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u5982\u679c\u4e0b\u4e00\u683c\u975e\u7a7a\u5c31\u7ee7\u7eed\u5408\u5e76\n            // \u5408\u5e76\u4ee5\u540e\u518d\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u76f4\u5230\u4e0b\u4e00\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u653e\u5728\u90a3\u4e2a\u4e3a\u7a7a\u7684\u4e0b\u4e00\u683c\u5c31\u597d\n            while (counter[i] != null) {\n                ListNode newMergeNode = mergeOfTwoSortedListNode(carryNode, counter[i]);\n                counter[i] = null;\n                i++;\n                carryNode = newMergeNode;\n            }\n            // \u9047\u5230\u4e86\u7a7a\uff0c\u5c31\u628a carryNode \u653e\u5728\u6570\u7ec4\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\n            counter[i] = carryNode;\n            // \u8bb0\u5f55\u6700\u591a\u4f7f\u7528\u5230 counter \u6570\u7ec4\u7684\u7b2c\u51e0\u4f4d\uff0c\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u8981\u7528\u4e0a\n            if (i > maxIndex) {\n                maxIndex = i;\n            }\n        }\n        // \u904d\u5386\u6574\u4e2a count \u6570\u7ec4\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5f52\u5e76\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u548c\u5f52\u5e76 n \u4e2a\u6709\u5e8f\u5355\u94fe\u8868\u662f\u4e00\u6837\u7684\u4e86\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u4e24\u4e24\u5f52\u5e76\n        // \u8fd8\u53ef\u4ee5\u91c7\u7528 LeetCode \u7b2c 23 \u9898\u7684\u529e\u6cd5\u5b8c\u6210\u8fd9\u4e00\u6b65\n        // \u53c2\u8003\uff1ahttps://liweiwei1419.github.io/leetcode-solution/leetcode-0023-merge-k-sorted-lists/\n        ListNode res = null;\n        for (int i = 0; i <= maxIndex; i++) {\n            if (counter[i] != null) {\n                res = mergeOfTwoSortedListNode(res, counter[i]);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * \u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u662f\u6211\u4eec\u975e\u5e38\u719f\u6089\u7684\u64cd\u4f5c\u4e86\uff0c\u53ef\u4ee5\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u8fd9\u91cc\u6211\u4eec\u9012\u5f52\u5b8c\u6210\n     *\n     * @param l1 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88681\n     * @param l2 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88682\n     * @return \u5408\u5e76\u4ee5\u540e\u7684\u5355\u94fe\u8868\n     */\n    private ListNode mergeOfTwoSortedListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortedListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortedListNode(l1, l2.next);\n            return l2;\n        }\n    }\n}  \u53c2\u8003\u8d44\u6599\uff1a\n1. http://www.cnblogs.com/bin3/articles/1858691.html \n2. https://blog.csdn.net/qq575787460/article/details/40706747    \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0148-sort-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com  \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/",
            "text": "203. Remove Linked List Elements\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n203. Remove Linked List Elements\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002\n\n\n\u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002\n\n\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002\n\n\n\u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9 \nListNode\n \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6 \ntoString()\n \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf\n\n\n// Definition for singly-linked list.\nclass ListNode {\n\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5\n    // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868\n    public ListNode(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head\n        // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de\n        this.val = arr[0];\n        ListNode cur = this;\n        for (int i = 1; i < arr.length; i++) {\n            cur.next = new ListNode(arr[i]);\n            cur = cur.next;\n        }\n    }\n\n    // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode cur = dummyNode;\n        ListNode next;\n        while (cur.next != null) {\n            if (cur.next.val == val) {\n                next = cur.next;\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09\n\n\nclass Solution2 {\n\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n    public ListNode removeElements(ListNode head, int val) {\n        // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (head == null) {\n            return head;\n        }\n        // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\n        ListNode res = removeElements(head.next, val);\n        // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n        if (head.val == val) {\n            // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389\n            return res;\n        } else {\n            head.next = res;\n            return head;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}\n\n\n\n\n\u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002\n\n\npublic class Solution3 {\n\n    public ListNode removeElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}",
            "title": "203. Remove Linked List Elements"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#203-remove-linked-list-elements",
            "text": "",
            "title": "203. Remove Linked List Elements"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 203. Remove Linked List Elements   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002  \u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002  \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002  \u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9  ListNode  \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6  toString()  \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#1",
            "text": "// Definition for singly-linked list.\nclass ListNode {\n\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5\n    // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868\n    public ListNode(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head\n        // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de\n        this.val = arr[0];\n        ListNode cur = this;\n        for (int i = 1; i < arr.length; i++) {\n            cur.next = new ListNode(arr[i]);\n            cur = cur.next;\n        }\n    }\n\n    // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode cur = dummyNode;\n        ListNode next;\n        while (cur.next != null) {\n            if (cur.next.val == val) {\n                next = cur.next;\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#2",
            "text": "class Solution2 {\n\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n    public ListNode removeElements(ListNode head, int val) {\n        // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (head == null) {\n            return head;\n        }\n        // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\n        ListNode res = removeElements(head.next, val);\n        // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n        if (head.val == val) {\n            // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389\n            return res;\n        } else {\n            head.next = res;\n            return head;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}  \u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002  public class Solution3 {\n\n    public ListNode removeElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/",
            "text": "206. reverse-linked-list\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n206. Reverse Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n206. \u53cd\u8f6c\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002  \n\n\n\n\n\n\n\u5728\u753b\u56fe\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u51fa\u5b8c\u6210\u7ffb\u8f6c\u94fe\u8868\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4e00\u5171\u8981\u7528 3 \u4e2a\u6307\u9488 \npre\n\u3001\ncur\n\u3001\nnext\n\uff1a\n\n\n\u5f53\u524d\u904d\u5386\u7684 \ncur\n \u6307\u9488\u4e0d\u5fc5\u591a\u8bf4\uff0c\u662f\u4e00\u5b9a\u6709\u7684\uff1b\n\n\n\u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u8981\u6307\u5230\u5b83\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5 \npre\n \u4e5f\u5fc5\u987b\u6709\uff1b\n\n\n\n\n\u8fed\u4ee3\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c\ncur\n \u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e5f\u5f97\u4f7f\u7528\u4e00\u4e2a\u6307\u9488 \nnext\n \u4fdd\u5b58\u4e00\u4e0b\uff0c\u5176\u4e2d \nnext\n \u53ef\u4ee5\u5728 \ncur\n \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b\u3002\n\n\n\n\n\n\n\u753b\u56fe\u5206\u6790 \nnext\n \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01  \n\n\n\n\n\u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f \npre\n \u8282\u70b9\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n// https://leetcode-cn.com/problems/reverse-linked-list/description/\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\n// \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790\n// \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb\n// \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de\n\n// \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002\npublic class Solution {\n\n    public ListNode reverseList(ListNode head) {\n        // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488\n        ListNode pre = null;\n        // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488\n        ListNode cur = head;\n        ListNode next;\n        while (cur != null) {\n            // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488\n            next = cur.next;\n            // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c\n            cur.next = pre;\n            // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf\n            pre = cur;\n            cur = next;\n        }\n        // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre\n        // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\n        return pre;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new  ListNode(nums);\n        System.out.println(head);\n        Solution solution = new Solution();\n        ListNode reverseList = solution.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}",
            "title": "206. reverse-linked-list"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#206-reverse-linked-list",
            "text": "",
            "title": "206. reverse-linked-list"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 206. Reverse Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 206. \u53cd\u8f6c\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002      \u5728\u753b\u56fe\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u51fa\u5b8c\u6210\u7ffb\u8f6c\u94fe\u8868\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4e00\u5171\u8981\u7528 3 \u4e2a\u6307\u9488  pre \u3001 cur \u3001 next \uff1a  \u5f53\u524d\u904d\u5386\u7684  cur  \u6307\u9488\u4e0d\u5fc5\u591a\u8bf4\uff0c\u662f\u4e00\u5b9a\u6709\u7684\uff1b  \u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u8981\u6307\u5230\u5b83\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5  pre  \u4e5f\u5fc5\u987b\u6709\uff1b   \u8fed\u4ee3\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c cur  \u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e5f\u5f97\u4f7f\u7528\u4e00\u4e2a\u6307\u9488  next  \u4fdd\u5b58\u4e00\u4e0b\uff0c\u5176\u4e2d  next  \u53ef\u4ee5\u5728  cur  \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b\u3002    \u753b\u56fe\u5206\u6790  next  \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01     \u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f  pre  \u8282\u70b9\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#1",
            "text": "// https://leetcode-cn.com/problems/reverse-linked-list/description/\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\n// \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790\n// \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb\n// \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de\n\n// \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002\npublic class Solution {\n\n    public ListNode reverseList(ListNode head) {\n        // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488\n        ListNode pre = null;\n        // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488\n        ListNode cur = head;\n        ListNode next;\n        while (cur != null) {\n            // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488\n            next = cur.next;\n            // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c\n            cur.next = pre;\n            // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf\n            pre = cur;\n            cur = next;\n        }\n        // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre\n        // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\n        return pre;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new  ListNode(nums);\n        System.out.println(head);\n        Solution solution = new Solution();\n        ListNode reverseList = solution.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/",
            "text": "208. Implement Trie (Prefix Tree)\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b \ninsert\n, \nsearch\n, \u548c \nstartsWith\n \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n208. Implement Trie (Prefix Tree)\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u524d\u7f00\u6811\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u56f0\u96be\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\u6ce8\u610f\uff1a\u5185\u90e8\u7c7b \nNode\n \u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u8981\u58f0\u660e\u4e3a \nprivate\n \uff0c\u5426\u5219\u4e0d\u80fd\u5f97\u5230 Accept \u3002\n\n\n\n\nimport java.util.HashMap;\n\npublic class Trie {\n\n    private Node root;\n\n    // \u53ea\u5728\u5185\u90e8\u4f7f\u7528\uff0c\u56e0\u6b64\u8bbf\u95ee\u63a7\u5236\u7b26\u662f root\n    private class Node {\n        private boolean isWord;\n        // \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e0a\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316 next \u6240\u5bf9\u5e94\u7684 Hash \u8868\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.isWord = false;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public Trie() {\n        // \u6839\u8282\u70b9\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\n        root = new Node();\n    }\n\n    /**\n     * Inserts a word into the trie.\n     */\n    public void insert(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        // \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u8bbe\u7f6e\u8fc7\uff0c\u624d\u8bbe\u7f6e\u6210 true\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the trie.\n     */\n    public boolean search(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false; // \u4e2d\u9014\u5c31\u51fa\u9519\u4e86\n            }\n        }\n        return curNode.isWord; // \u5230\u4e86\u672b\u5c3e\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b\n    }\n\n    /**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     */\n    public boolean startsWith(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false;\n            }\n        }\n        // \u80fd\u8d70\u5b8c\u5c31\u8bf4\u660e\u6709\u8fd9\u4e2a\u524d\u7f00\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(\"apple\");\n        boolean search1 = trie.search(\"apple\");// \u8fd4\u56de true\n        System.out.println(search1);\n        boolean search2 = trie.search(\"app\");     // \u8fd4\u56de false\n        System.out.println(search2);\n        boolean startsWith = trie.startsWith(\"app\");// \u8fd4\u56de true\n        System.out.println(startsWith);\n        trie.insert(\"app\");\n        boolean search3 = trie.search(\"app\");     // \u8fd4\u56de true\n        System.out.println(search3);\n    }\n}",
            "title": "208. Implement Trie (Prefix Tree)"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#208-implement-trie-prefix-tree",
            "text": "",
            "title": "208. Implement Trie (Prefix Tree)"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b  insert ,  search , \u548c  startsWith  \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 208. Implement Trie (Prefix Tree)   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u524d\u7f00\u6811\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u56f0\u96be\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#1",
            "text": "\u6ce8\u610f\uff1a\u5185\u90e8\u7c7b  Node  \u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u8981\u58f0\u660e\u4e3a  private  \uff0c\u5426\u5219\u4e0d\u80fd\u5f97\u5230 Accept \u3002   import java.util.HashMap;\n\npublic class Trie {\n\n    private Node root;\n\n    // \u53ea\u5728\u5185\u90e8\u4f7f\u7528\uff0c\u56e0\u6b64\u8bbf\u95ee\u63a7\u5236\u7b26\u662f root\n    private class Node {\n        private boolean isWord;\n        // \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e0a\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316 next \u6240\u5bf9\u5e94\u7684 Hash \u8868\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.isWord = false;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public Trie() {\n        // \u6839\u8282\u70b9\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\n        root = new Node();\n    }\n\n    /**\n     * Inserts a word into the trie.\n     */\n    public void insert(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        // \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u8bbe\u7f6e\u8fc7\uff0c\u624d\u8bbe\u7f6e\u6210 true\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the trie.\n     */\n    public boolean search(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false; // \u4e2d\u9014\u5c31\u51fa\u9519\u4e86\n            }\n        }\n        return curNode.isWord; // \u5230\u4e86\u672b\u5c3e\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b\n    }\n\n    /**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     */\n    public boolean startsWith(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false;\n            }\n        }\n        // \u80fd\u8d70\u5b8c\u5c31\u8bf4\u660e\u6709\u8fd9\u4e2a\u524d\u7f00\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(\"apple\");\n        boolean search1 = trie.search(\"apple\");// \u8fd4\u56de true\n        System.out.println(search1);\n        boolean search2 = trie.search(\"app\");     // \u8fd4\u56de false\n        System.out.println(search2);\n        boolean startsWith = trie.startsWith(\"app\");// \u8fd4\u56de true\n        System.out.println(startsWith);\n        trie.insert(\"app\");\n        boolean search3 = trie.search(\"app\");     // \u8fd4\u56de true\n        System.out.println(search3);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/",
            "text": "211. Add and Search Word - Data structure design\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a\n\n\n\n\nvoid addWord(word)\nbool search(word)\n\n\n\n\nsearch(word) \u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd \n.\n \u6216 \na-z\n \u3002 \n.\n \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002\n+ \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n+ \u82f1\u6587\u7f51\u5740\uff1a\n211. Add and Search Word - Data structure design\n  \u3002\n+ \u4e2d\u6587\u7f51\u5740\uff1a\n211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1\n  \u3002\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\nsearch\n \u65b9\u6cd5\u9488\u5bf9\u5339\u914d\u4e32\u4e2d\u7684 \n.\n \u5b57\u7b26\uff0c\u5e94\u8be5\u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashMap;\nimport java.util.Set;\n\npublic class WordDictionary {\n\n    private Node root;\n\n    private class Node {\n        private boolean isWord;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public WordDictionary() {\n        root = new Node();\n    }\n\n    /**\n     * Adds a word into the data structure.\n     */\n    public void addWord(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n     */\n    public boolean search(String word) {\n        return search(root, word, 0);\n    }\n\n    private boolean search(Node node, String word, int depth) {\n        if (depth == word.length()) {\n            // \u53ea\u8981\u80fd\u641c\u7d22\u5230\u6700\u540e\uff0c\u5c31\u8868\u793a\u6587\u672c\u4e0e\u6a21\u5f0f\u5339\u914d\n            // \u8fd9\u4e00\u6b65\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\n            return node.isWord;\n        }\n        Character c = word.charAt(depth);\n        if (c == '.') {\n            Set<Character> keys = node.next.keySet();\n            for (Character key : keys) {\n                Node nextNode = node.next.get(key);\n                if (search(nextNode, word, depth + 1)) {\n                    return true;\n                }\n            }\n            // \u5faa\u73af\u90fd\u8d70\u5b8c\u90fd\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\n            return false;\n        } else {\n            if (!node.next.containsKey(c)) {\n                return false;\n            }\n            return search(node.next.get(c), word, depth + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.addWord(\"mad\");\n        boolean search1 = wordDictionary.search(\"pad\");// -> false\n        System.out.println(search1);\n        boolean search2 = wordDictionary.search(\"bad\"); // -> true\n        System.out.println(search2);\n        boolean search3 = wordDictionary.search(\".ad\"); // -> true\n        System.out.println(search3);\n        boolean search4 = wordDictionary.search(\"b..\"); //-> true\n        System.out.println(search4);\n    }\n}",
            "title": "211. Add and Search Word - Data structure design"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#211-add-and-search-word-data-structure-design",
            "text": "",
            "title": "211. Add and Search Word - Data structure design"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a   void addWord(word)\nbool search(word)  search(word) \u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd  .  \u6216  a-z  \u3002  .  \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002\n+ \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n+ \u82f1\u6587\u7f51\u5740\uff1a 211. Add and Search Word - Data structure design   \u3002\n+ \u4e2d\u6587\u7f51\u5740\uff1a 211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a search  \u65b9\u6cd5\u9488\u5bf9\u5339\u914d\u4e32\u4e2d\u7684  .  \u5b57\u7b26\uff0c\u5e94\u8be5\u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#1",
            "text": "import java.util.HashMap;\nimport java.util.Set;\n\npublic class WordDictionary {\n\n    private Node root;\n\n    private class Node {\n        private boolean isWord;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public WordDictionary() {\n        root = new Node();\n    }\n\n    /**\n     * Adds a word into the data structure.\n     */\n    public void addWord(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n     */\n    public boolean search(String word) {\n        return search(root, word, 0);\n    }\n\n    private boolean search(Node node, String word, int depth) {\n        if (depth == word.length()) {\n            // \u53ea\u8981\u80fd\u641c\u7d22\u5230\u6700\u540e\uff0c\u5c31\u8868\u793a\u6587\u672c\u4e0e\u6a21\u5f0f\u5339\u914d\n            // \u8fd9\u4e00\u6b65\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\n            return node.isWord;\n        }\n        Character c = word.charAt(depth);\n        if (c == '.') {\n            Set<Character> keys = node.next.keySet();\n            for (Character key : keys) {\n                Node nextNode = node.next.get(key);\n                if (search(nextNode, word, depth + 1)) {\n                    return true;\n                }\n            }\n            // \u5faa\u73af\u90fd\u8d70\u5b8c\u90fd\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\n            return false;\n        } else {\n            if (!node.next.containsKey(c)) {\n                return false;\n            }\n            return search(node.next.get(c), word, depth + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.addWord(\"mad\");\n        boolean search1 = wordDictionary.search(\"pad\");// -> false\n        System.out.println(search1);\n        boolean search2 = wordDictionary.search(\"bad\"); // -> true\n        System.out.println(search2);\n        boolean search3 = wordDictionary.search(\".ad\"); // -> true\n        System.out.println(search3);\n        boolean search4 = wordDictionary.search(\"b..\"); //-> true\n        System.out.println(search4);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/",
            "text": "226. Invert Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n226. Invert Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n226. \u7ffb\u8f6c\u4e8c\u53c9\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\u3002LeetCode \u4e0a\u6709\u5982\u4e0b\u5907\u6ce8\uff1a\n\n\n\n\n\u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 Max Howell \u7684 \u539f\u95ee\u9898 \u542f\u53d1\u7684 \uff1a\n\n\n\u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u6211\u4eec\u5199\u597d\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5b8c\u6210\u4e86\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5e76\u4e14\u662f\u524d\u5e8f\u904d\u5386\uff0c\u6709\u7684\u670b\u53cb\u53ef\u80fd\u5199\u51fa\u6765\u7684\u540e\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u7981\u8981\u95ee\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4e0d\u53ef\u4ee5\uff0c\u7b54\u6848\u662f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u5f88\u53ef\u80fd\u4e00\u4e2a\u7ed3\u70b9\u4f1a\u88ab\u7ffb\u8f6c\u4e24\u6b21\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u8981\u6c42\u662f\u8fdd\u80cc\u7684\u3002\n\n\n\n\n\u90a3\u4e48\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u5417\uff1f\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u975e\u9012\u5f52\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u601d\u8def2\uff1a\u5982\u679c\u4e0d\u8ba9\u6211\u4eec\u7528\u9012\u5f52\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u9012\u5f52\u7684\u601d\u8def\u6a21\u62df\u9012\u5f52\u5b8c\u6210\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null) {\n            return null;\n        }\n        // \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u5373\u4f7f\u5de6\u53f3\u5b50\u6811\u90fd\u7a7a\u4e5f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n        // \u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b50\u6811\n        invertTree(root.left);\n        invertTree(root.right);\n        return root;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.LinkedList;\n\npublic class Solution2 {\n\n    public TreeNode invertTree(TreeNode root) {\n        // \u7ed3\u70b9\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u8981\u5148\u8003\u8651\n        if (root == null) {\n            return null;\n        }\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.addLast(root);\n        while (!queue.isEmpty()) {\n            TreeNode curNode = queue.removeFirst();\n            // \u53ea\u8981\u5176\u4e2d\u4e4b\u4e00\u975e\u7a7a\uff0c\u6211\u90fd\u4ea4\u6362\uff0c\u5e76\u4e14\u628a\u975e\u7a7a\u7684\u6dfb\u52a0\u5230\u961f\u5217\u91cc\n            if (curNode.left != null || curNode.right != null) {\n                // \u5148\u7ffb\u8f6c\n                TreeNode temp = curNode.left;\n                curNode.left = curNode.right;\n                curNode.right = temp;\n                // \u628a\u975e\u7a7a\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\n                if (curNode.left != null) {\n                    queue.addLast(curNode.left);\n                }\n                if (curNode.right != null) {\n                    queue.addLast(curNode.right);\n                }\n            }\n        }\n        return root;\n    }\n}",
            "title": "226. Invert Binary Tree"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#226-invert-binary-tree",
            "text": "",
            "title": "226. Invert Binary Tree"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 226. Invert Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 226. \u7ffb\u8f6c\u4e8c\u53c9\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\u3002LeetCode \u4e0a\u6709\u5982\u4e0b\u5907\u6ce8\uff1a   \u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 Max Howell \u7684 \u539f\u95ee\u9898 \u542f\u53d1\u7684 \uff1a  \u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002   \u601d\u8def1\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u6211\u4eec\u5199\u597d\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5b8c\u6210\u4e86\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5e76\u4e14\u662f\u524d\u5e8f\u904d\u5386\uff0c\u6709\u7684\u670b\u53cb\u53ef\u80fd\u5199\u51fa\u6765\u7684\u540e\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u7981\u8981\u95ee\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4e0d\u53ef\u4ee5\uff0c\u7b54\u6848\u662f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u5f88\u53ef\u80fd\u4e00\u4e2a\u7ed3\u70b9\u4f1a\u88ab\u7ffb\u8f6c\u4e24\u6b21\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u8981\u6c42\u662f\u8fdd\u80cc\u7684\u3002   \u90a3\u4e48\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u5417\uff1f\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u975e\u9012\u5f52\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u601d\u8def2\uff1a\u5982\u679c\u4e0d\u8ba9\u6211\u4eec\u7528\u9012\u5f52\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u9012\u5f52\u7684\u601d\u8def\u6a21\u62df\u9012\u5f52\u5b8c\u6210\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null) {\n            return null;\n        }\n        // \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u5373\u4f7f\u5de6\u53f3\u5b50\u6811\u90fd\u7a7a\u4e5f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n        // \u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b50\u6811\n        invertTree(root.left);\n        invertTree(root.right);\n        return root;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#2",
            "text": "import java.util.LinkedList;\n\npublic class Solution2 {\n\n    public TreeNode invertTree(TreeNode root) {\n        // \u7ed3\u70b9\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u8981\u5148\u8003\u8651\n        if (root == null) {\n            return null;\n        }\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.addLast(root);\n        while (!queue.isEmpty()) {\n            TreeNode curNode = queue.removeFirst();\n            // \u53ea\u8981\u5176\u4e2d\u4e4b\u4e00\u975e\u7a7a\uff0c\u6211\u90fd\u4ea4\u6362\uff0c\u5e76\u4e14\u628a\u975e\u7a7a\u7684\u6dfb\u52a0\u5230\u961f\u5217\u91cc\n            if (curNode.left != null || curNode.right != null) {\n                // \u5148\u7ffb\u8f6c\n                TreeNode temp = curNode.left;\n                curNode.left = curNode.right;\n                curNode.right = temp;\n                // \u628a\u975e\u7a7a\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\n                if (curNode.left != null) {\n                    queue.addLast(curNode.left);\n                }\n                if (curNode.right != null) {\n                    queue.addLast(curNode.right);\n                }\n            }\n        }\n        return root;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/",
            "text": "230. Kth Smallest Element in a BST\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n230. Kth Smallest Element in a BST\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a1\u3001\u4e8c\u5206\u641c\u7d22\u6811\u7684\u987a\u5e8f\u6027\uff1b2\u3001\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\uff0c\u7279\u522b\u5730\uff0c\u4e8c\u5206\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\n\n\n\n\n\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\u6570\u4e2a\u6570\uff0c\u7b2c 1 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 1 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7b2c 2 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 2 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u6570\u5230\u7b2c k \u4e2a\u591f\u6570\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u904d\u5386\u4e86\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u628a\u8ba1\u6570\u7684\u53d8\u91cf\u8bbe\u7f6e\u6210\u201c\u6210\u5458\u53d8\u91cf\u201d\uff0c\u5982\u679c\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u5f97 k \u4f5c\u4e3a\u53c2\u6570\u5728\u65b9\u6cd5\u4e2d\u4f20\u9012\uff0c\u5c31\u53d8\u6210\u4e86\u503c\u4f20\u9012\uff0c\u5c31\u5f97\u4e0d\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n// \u89e3\u9898\u5173\u952e\uff1a\u4e2d\u5e8f\u904d\u5386\npublic class Solution {\n\n    private int res;\n    private int count;\n\n    // k \u5982\u679c\u5728\u65b9\u6cd5\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u662f\u503c\u4f20\u9012\uff0c\u6240\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u662f\u5f15\u7528\u4f20\u9012\n    // \u56e0\u4e3a\u6211\u4eec\u8981\u7528\u5230 k \u5168\u5c40\u7684\u503c\uff0c\u53bb\u6570\u51fa\uff0c\u6211\u662f\u7b2c\u51e0\u4e2a\u4e2d\u5e8f\u904d\u5386\u5230\u7684\u503c\n    public int kthSmallest(TreeNode root, int k) {\n        count = k;\n        inOrder(root);\n        return res;\n    }\n\n    private void inOrder(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left);\n        count--;\n        if (count == 0) {\n            res = node.val;\n            return;\n        }\n        inOrder(node.right);\n    }\n}",
            "title": "230. Kth Smallest Element in a BST"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#230-kth-smallest-element-in-a-bst",
            "text": "",
            "title": "230. Kth Smallest Element in a BST"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 230. Kth Smallest Element in a BST   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a1\u3001\u4e8c\u5206\u641c\u7d22\u6811\u7684\u987a\u5e8f\u6027\uff1b2\u3001\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\uff0c\u7279\u522b\u5730\uff0c\u4e8c\u5206\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002   \u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\u6570\u4e2a\u6570\uff0c\u7b2c 1 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 1 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7b2c 2 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 2 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u6570\u5230\u7b2c k \u4e2a\u591f\u6570\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u904d\u5386\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#1",
            "text": "\u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u628a\u8ba1\u6570\u7684\u53d8\u91cf\u8bbe\u7f6e\u6210\u201c\u6210\u5458\u53d8\u91cf\u201d\uff0c\u5982\u679c\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u5f97 k \u4f5c\u4e3a\u53c2\u6570\u5728\u65b9\u6cd5\u4e2d\u4f20\u9012\uff0c\u5c31\u53d8\u6210\u4e86\u503c\u4f20\u9012\uff0c\u5c31\u5f97\u4e0d\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n// \u89e3\u9898\u5173\u952e\uff1a\u4e2d\u5e8f\u904d\u5386\npublic class Solution {\n\n    private int res;\n    private int count;\n\n    // k \u5982\u679c\u5728\u65b9\u6cd5\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u662f\u503c\u4f20\u9012\uff0c\u6240\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u662f\u5f15\u7528\u4f20\u9012\n    // \u56e0\u4e3a\u6211\u4eec\u8981\u7528\u5230 k \u5168\u5c40\u7684\u503c\uff0c\u53bb\u6570\u51fa\uff0c\u6211\u662f\u7b2c\u51e0\u4e2a\u4e2d\u5e8f\u904d\u5386\u5230\u7684\u503c\n    public int kthSmallest(TreeNode root, int k) {\n        count = k;\n        inOrder(root);\n        return res;\n    }\n\n    private void inOrder(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left);\n        count--;\n        if (count == 0) {\n            res = node.val;\n            return;\n        }\n        inOrder(node.right);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/",
            "text": "237. Delete Node in a Linked List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002\n\n\n\u6bd4\u5982\uff1a\u5047\u8bbe\u8be5\u94fe\u8868\u4e3a\u00a0\n1 -> 2 -> 3 -> 4 \n\u00a0\uff0c\u7ed9\u5b9a\u60a8\u7684\u4e3a\u8be5\u94fe\u8868\u4e2d\u503c\u4e3a\u00a0\n3\n\u00a0\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u60a8\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5219\u5e94\u53d8\u6210\u00a0\n1 -> 2 -> 4\n\u00a0\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n237. Delete Node in a Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u590d\u5236\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u518d\u628a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\u3002\u5f04\u6e05\u695a\u9898\u610f\uff0c\u9898\u76ee\u53ea\u7ed9\u4f60\u8fd9\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8ba9\u4f60\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u8981\u548c dummyNode \u90a3\u79cd\u5957\u8def\u6df7\u5728\u4e00\u8d77\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public void deleteNode(ListNode node) {\n        // \u56e0\u4e3a\u9898\u76ee\u5df2\u7ecf\u660e\u786e\u8bf4\u4e86\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64 node.next \u4e00\u5b9a\u975e\u7a7a\n        ListNode next = node.next;\n        node.next = next.next;\n        node.val = next.val;\n        next.next = null;\n    }\n\n    public static void main(String[] args) {\n        ListNode node1 = new ListNode(0);\n        ListNode node2 = new ListNode(1);\n        node1.next = node2;\n        Solution s = new Solution();\n        s.deleteNode(node1);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0237-delete-node-in-a-linked-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "237. Delete Node in a Linked List"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#237-delete-node-in-a-linked-list",
            "text": "",
            "title": "237. Delete Node in a Linked List"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002  \u6bd4\u5982\uff1a\u5047\u8bbe\u8be5\u94fe\u8868\u4e3a\u00a0 1 -> 2 -> 3 -> 4  \u00a0\uff0c\u7ed9\u5b9a\u60a8\u7684\u4e3a\u8be5\u94fe\u8868\u4e2d\u503c\u4e3a\u00a0 3 \u00a0\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u60a8\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5219\u5e94\u53d8\u6210\u00a0 1 -> 2 -> 4 \u00a0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 237. Delete Node in a Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u590d\u5236\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u518d\u628a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\u3002\u5f04\u6e05\u695a\u9898\u610f\uff0c\u9898\u76ee\u53ea\u7ed9\u4f60\u8fd9\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8ba9\u4f60\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u8981\u548c dummyNode \u90a3\u79cd\u5957\u8def\u6df7\u5728\u4e00\u8d77\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public void deleteNode(ListNode node) {\n        // \u56e0\u4e3a\u9898\u76ee\u5df2\u7ecf\u660e\u786e\u8bf4\u4e86\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64 node.next \u4e00\u5b9a\u975e\u7a7a\n        ListNode next = node.next;\n        node.next = next.next;\n        node.val = next.val;\n        next.next = null;\n    }\n\n    public static void main(String[] args) {\n        ListNode node1 = new ListNode(0);\n        ListNode node2 = new ListNode(1);\n        node1.next = node2;\n        Solution s = new Solution();\n        s.deleteNode(node1);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0237-delete-node-in-a-linked-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/",
            "text": "300. Longest Increasing Subsequence\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n300. Longest Increasing Subsequence\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\n\n// \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\n// 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n// https://leetcode-cn.com/problems/longest-increasing-subsequence/description/\npublic class Solution {\n\n    //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005\n    // \u4ee5\u6570\u7ec4  [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a\n    // dp \u7684\u503c\uff1a 1  1  1  2  2  3  4    4\n    // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684\n        for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c\n            int curVal = nums[i];\n            for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c\n                if (curVal > nums[j]) {\n                    dp[i] = Integer.max(dp[j] + 1, dp[i]);\n                }\n            }\n        }\n        // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c\n        int res = dp[0];\n        for (int i = 0; i < len; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};\n        Solution solution = new Solution();\n        int lengthOfLIS = solution.lengthOfLIS(nums);\n        System.out.println(lengthOfLIS);\n    }\n}",
            "title": "300. Longest Increasing Subsequence"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#300-longest-increasing-subsequence",
            "text": "",
            "title": "300. Longest Increasing Subsequence"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 300. Longest Increasing Subsequence   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#1",
            "text": "import java.util.Arrays;\n\n// \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\n// 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n// https://leetcode-cn.com/problems/longest-increasing-subsequence/description/\npublic class Solution {\n\n    //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005\n    // \u4ee5\u6570\u7ec4  [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a\n    // dp \u7684\u503c\uff1a 1  1  1  2  2  3  4    4\n    // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684\n        for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c\n            int curVal = nums[i];\n            for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c\n                if (curVal > nums[j]) {\n                    dp[i] = Integer.max(dp[j] + 1, dp[i]);\n                }\n            }\n        }\n        // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c\n        int res = dp[0];\n        for (int i = 0; i < len; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};\n        Solution solution = new Solution();\n        int lengthOfLIS = solution.lengthOfLIS(nums);\n        System.out.println(lengthOfLIS);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/",
            "text": "328. Odd Even Linked List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n328. Odd Even Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n328. \u5947\u5076\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002\n+ \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 \nLeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \n \u5b8c\u6210\u3002\n\n+ \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\n\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b\n\n\n\u6ce8\u610f2\uff1a\u5728 \nwhile\n \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 \nnext\n \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a \nnull\n \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 \nnext\n \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\npublic class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "328. Odd Even Linked List"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#328-odd-even-linked-list",
            "text": "",
            "title": "328. Odd Even Linked List"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002\n+ \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528  LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2   \u5b8c\u6210\u3002 \n+ \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#2",
            "text": "\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b  \u6ce8\u610f2\uff1a\u5728  while  \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684  next  \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a  null  \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8  next  \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a    public class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/",
            "text": "377. Combination Sum IV\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n377. Combination Sum IV\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n377. Combination Sum IV\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6309\u7167\u4e0b\u56fe\u6240\u793a\u7684\u89c4\u5f8b\u627e\u5230\n\u9012\u5f52\u5173\u7cfb\u5f0f\n\uff0c\u4f53\u4f1a\u6211\u4eec\u5728\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u641c\u7d22\u7684\uff0c\u6211\u4eec\u4e0d\u662f\u80e1\u4e71\u641c\u7d22\uff0c\u800c\u662f\u6309\u7167\u987a\u5e8f\u641c\u7d22\uff1a\u6bcf\u6b21\u90fd\u51cf\u53bb\u4e00\u679a\u786c\u5e01\u7684\u503c\uff0c\u770b\u51cf\u53bb\u4e86\u4e00\u679a\u786c\u5e01\u7684\u5269\u4f59\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u6709\u591a\u5c11\uff0c\u548c\u6ca1\u6709\u51cf\u53bb\u8fd9\u679a\u786c\u5e01\u7684\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u5efa\u7acb\u5173\u7cfb\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int combinationSum4(int[] nums, int target) {\n        int[] dp = new int[target + 1];\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48 dp[0] \u662f 1\n        // \u56e0\u4e3a 0 \u8868\u793a\u7a7a\u96c6\uff0c\u7a7a\u96c6\u548c\u5b83\"\u524d\u9762\"\u7684\u5143\u7d20\u51d1\u6210\u4e00\u79cd\u89e3\u6cd5\uff0c\u6240\u4ee5\u662f 1\n        // \u8fd9\u4e00\u6b65\u8981\u52a0\u6df1\u4f53\u4f1a\n        dp[0] = 1;\n        for (int i = 1; i < target + 1; i++) {\n            for (int num : nums) {\n                if (i >= num) {\n                    dp[i] = dp[i] + dp[i - num];\n                }\n            }\n        }\n        return dp[target];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 2, 3};\n        int target = 4;\n        int combinationSum4 = solution.combinationSum4(nums, target);\n        System.out.println(combinationSum4);\n    }\n}",
            "title": "377. Combination Sum IV"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#377-combination-sum-iv",
            "text": "",
            "title": "377. Combination Sum IV"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 377. Combination Sum IV   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 377. Combination Sum IV   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6309\u7167\u4e0b\u56fe\u6240\u793a\u7684\u89c4\u5f8b\u627e\u5230 \u9012\u5f52\u5173\u7cfb\u5f0f \uff0c\u4f53\u4f1a\u6211\u4eec\u5728\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u641c\u7d22\u7684\uff0c\u6211\u4eec\u4e0d\u662f\u80e1\u4e71\u641c\u7d22\uff0c\u800c\u662f\u6309\u7167\u987a\u5e8f\u641c\u7d22\uff1a\u6bcf\u6b21\u90fd\u51cf\u53bb\u4e00\u679a\u786c\u5e01\u7684\u503c\uff0c\u770b\u51cf\u53bb\u4e86\u4e00\u679a\u786c\u5e01\u7684\u5269\u4f59\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u6709\u591a\u5c11\uff0c\u548c\u6ca1\u6709\u51cf\u53bb\u8fd9\u679a\u786c\u5e01\u7684\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u5efa\u7acb\u5173\u7cfb\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#1",
            "text": "public class Solution {\n\n    public int combinationSum4(int[] nums, int target) {\n        int[] dp = new int[target + 1];\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48 dp[0] \u662f 1\n        // \u56e0\u4e3a 0 \u8868\u793a\u7a7a\u96c6\uff0c\u7a7a\u96c6\u548c\u5b83\"\u524d\u9762\"\u7684\u5143\u7d20\u51d1\u6210\u4e00\u79cd\u89e3\u6cd5\uff0c\u6240\u4ee5\u662f 1\n        // \u8fd9\u4e00\u6b65\u8981\u52a0\u6df1\u4f53\u4f1a\n        dp[0] = 1;\n        for (int i = 1; i < target + 1; i++) {\n            for (int num : nums) {\n                if (i >= num) {\n                    dp[i] = dp[i] + dp[i - num];\n                }\n            }\n        }\n        return dp[target];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 2, 3};\n        int target = 4;\n        int combinationSum4 = solution.combinationSum4(nums, target);\n        System.out.println(combinationSum4);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/",
            "text": "677. Map Sum Pairs\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n677. Map Sum Pairs\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n677. \u952e\u503c\u6620\u5c04\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528 \nTrie\n \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684 \nisWord\n \u8bbe\u8ba1\u6210 \nvalue\n \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765 \nisWord\n \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002\n+ \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002\n+ \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashMap;\n\npublic class MapSum {\n\n    private Node root;\n\n    private class Node {\n        private int value;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this(0);\n        }\n\n        public Node(int value) {\n            this.value = value;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public MapSum() {\n        root = new Node();\n    }\n\n    public void insert(String key, int val) {\n        Node curNode = root;\n        for (int i = 0; i < key.length(); i++) {\n            Character c = key.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        curNode.value = val;\n    }\n\n    // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83\n    public int sum(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return 0;\n            }\n        }\n        return sum(curNode);\n    }\n\n    // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c\n    private int sum(Node node) {\n        int res = node.value;\n        for (Character key : node.next.keySet()) {\n            // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9\n            res += sum(node.next.get(key));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3\n        // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5\n        MapSum2 mapSum = new MapSum2();\n        mapSum.insert(\"apple\", 3);\n        int sum1 = mapSum.sum(\"ap\");\n        System.out.println(sum1);\n        mapSum.insert(\"app\", 2);\n        int sum2 = mapSum.sum(\"ap\");\n        System.out.println(sum2);\n    }\n}",
            "title": "677. Map Sum Pairs"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#677-map-sum-pairs",
            "text": "",
            "title": "677. Map Sum Pairs"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 677. Map Sum Pairs   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 677. \u952e\u503c\u6620\u5c04   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528  Trie  \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684  isWord  \u8bbe\u8ba1\u6210  value  \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765  isWord  \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002\n+ \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002\n+ \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#1",
            "text": "import java.util.HashMap;\n\npublic class MapSum {\n\n    private Node root;\n\n    private class Node {\n        private int value;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this(0);\n        }\n\n        public Node(int value) {\n            this.value = value;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public MapSum() {\n        root = new Node();\n    }\n\n    public void insert(String key, int val) {\n        Node curNode = root;\n        for (int i = 0; i < key.length(); i++) {\n            Character c = key.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        curNode.value = val;\n    }\n\n    // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83\n    public int sum(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return 0;\n            }\n        }\n        return sum(curNode);\n    }\n\n    // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c\n    private int sum(Node node) {\n        int res = node.value;\n        for (Character key : node.next.keySet()) {\n            // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9\n            res += sum(node.next.get(key));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3\n        // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5\n        MapSum2 mapSum = new MapSum2();\n        mapSum.insert(\"apple\", 3);\n        int sum1 = mapSum.sum(\"ap\");\n        System.out.println(sum1);\n        mapSum.insert(\"app\", 2);\n        int sum2 = mapSum.sum(\"ap\");\n        System.out.println(sum2);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-algorithm-notes/",
            "text": "\u672a\u5b8c\u6210\u7684\u90e8\u5206\n\n\n\u5251\u6307offer\u9898\u76ee\u53ca\u7b54\u6848 https://blog.csdn.net/panda_AJ/article/details/69420293\n\u5251\u6307Offer \u4e4b Java \u4e13\u680f https://blog.csdn.net/column/details/codingintervieww.html\n\n\n\u53f2\u4e0a\u6700\u7b80\u5355\u7684 IntelliJ IDEA \u6559\u7a0b\nhttps://github.com/guobinhit/intellij-idea-tutorial/blob/master/README.md\n\n\nIntelliJ IDEA \u6700\u65b0\u6ce8\u518c\u7801\uff08\u622a\u6b62\u52302019\u5e745\u67084\u65e5\uff09\nhttps://blog.csdn.net/qq_35246620/article/details/80522720\n\n\n300 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217()\n\n\n\n\n\u6709 nlogn \u590d\u6742\u5ea6\u7684\u89e3\u6cd5\n\n\n\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u89e3\u6cd5\n\n\n\n\ntyvj\uff1ahttp://www.joyoi.cn/\ntopcoder\npoj\u3001\u676d\u7535\nGoogle Sheet\ncodeforces\n\n\n\u7ec4\u5408\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u6c42\u89e3\u3002\n\n\n\u601d\u8def1\uff1a\u56e0\u4e3a\u5f88\u53ef\u80fd\u5934\u7ed3\u70b9\u88ab\u5220\u9664\uff0c\u4e3a\u4e86\u907f\u514d\u5904\u7406\u5220\u9664\u5934\u7ed3\u70b9\u7684\u4e00\u4e9b\u590d\u6742\u7684\u8ba8\u8bba\u5de5\u4f5c\uff0c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u4e00\u822c\u662f\u8fd9\u7c7b\u95ee\u9898\u5e38\u89c1\u7684\u505a\u6cd5\u3002\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5220\u9664\u3002\n\n\nBAT\u673a\u5668\u5b66\u4e60\u9762\u8bd51000\u9898\u7cfb\u5217\uff1a\u4e03\u6708\u5728\u7ebf\uff1a\nhttps://blog.csdn.net/v_july_v/article/details/7041827\n\n\n\u57fa\u672c\u6982\u5ff5\uff1a\n\u6587\u672c\u3001\u6a21\u5f0f\u3001\u524d\u7f00\u3001\u540e\u7f00\u3001\u5339\u914d\u3001\u5931\u914d\u3001\u5b57\u6bcd\u8868\u3002\n\n\n1\u3001\u66b4\u529b\u5339\u914d\uff08\u6734\u7d20\u5339\u914d\uff09\n\u7b97\u6cd5\u662f\u5341\u5206\u597d\u7406\u89e3\uff0c\u5e76\u4e14\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u66b4\u529b\u5339\u914d\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\uff1a\u5728\u4e00\u8f6e\u5339\u914d\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5339\u914d\u4e86\u5f88\u591a\u5b57\u7b26\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4f1a\u524d\u529f\u5c3d\u5f03\uff0c\u4e00\u4e0b\u5b50\u6253\u56de\u539f\u5f62\uff0c\u7ee7\u7eed\u5f00\u59cb\u4e0b\u4e00\u8f6e\u3002\n\u66b4\u529b\u5339\u914d\uff0c\u5c31\u76f8\u5f53\u4e8e\u9009\u62e9\u6392\u5e8f\u4e00\u6837\uff0c\u6bcf\u4e00\u8f6e\u90fd\u9009\u51fa\u4e00\u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u4e0b\u4e00\u8f6e\uff0c\u91cd\u65b0\u5f00\u59cb\u8dd1\uff0c\u8fd9\u79cd\u7b97\u6cd5\u4e0d\u80fd\u89c2\u5bdf\u5230\u5b57\u7b26\u4e32\u672c\u8eab\u6709\u7684\u7279\u70b9\uff0c\u8ba9\u7b97\u6cd5\u66f4\u5feb\u5730\u5b8c\u6210\u3002\n\n\n\u7c7b\u6bd4\u4e0e\u63d2\u5165\u6392\u5e8f\uff0c\u5bf9\u4e8e\u5927\u81f4\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u63d2\u5165\u6392\u5e8f\u5c31\u53ef\u4ee5\u5f88\u5feb\u5b8c\u6210\u3002\n\n\n2\u3001KMP \nnext \u6570\u7ec4\u4ee3\u8868\u5f53\u524d\u5b57\u7b26\n\u4e4b\u524d\n\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u6709\u591a\u5927\u957f\u5ea6\u7684\u76f8\u540c\u524d\u7f00\u540e\u7f00\u3002\n\n\n376\n\n\n\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7ea2\u9ed1\u6811\u5b66\u4e60\u7b14\u8bb0 http://www.cnblogs.com/Anker/archive/2013/01/30/2882773.html\nBST \u4e2d\u627e\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u9a71\u548c\u540e\u7ee7\n\n\nKMP \u7b97\u6cd5\u7406\u89e3\u76f8\u5173\u6587\u7ae0\uff1a\n\n\n\u962e\u4e00\u5cf0\u300a\u5b57\u7b26\u4e32\u5339\u914d\u7684KMP\u7b97\u6cd5\u300b\n\n\n\u4e03\u6708\u300ahttps://blog.csdn.net/v_july_v/article/details/7041827\u300b\n\n\n\u9ec4\u6d69\u52ab\u89c6\u9891\u8bb2\u89e3\n\n\nhttp://www.cnblogs.com/golove/p/3222096.html \u8fd9\u7bc7\u535a\u5ba2\u544a\u8bc9\u6211\u4eec\uff0c\u6807\u51c6 ASCII \u7801\u6709 256 \u4e2a\u5b57\u7b26\u3002\n\n\nRabin-Karp \u7b97\u6cd5\u8bb2\u89e3\u6bd4\u8f83\u7ec6\u81f4\u7684\u4e00\u7bc7\u6587\u7ae0\uff1ahttp://www.cnblogs.com/golove/p/3234673.html\nRabin-Karp \u7b97\u6cd5 Java \u5b9e\u73b0\uff1a https://blog.csdn.net/tyler_download/article/details/52457108\n\n\n\u7b97\u6cd5\u2014\u2014\u5b57\u7b26\u4e32\u5339\u914d\u4e4bRabin-Karp\u7b97\u6cd5\nhttps://blog.csdn.net/chenhanzhun/article/details/39895077\n\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u7684\u4f8b\u5b50\uff1a\nhttps://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/\n\n\n\u7b97\u6cd5\u6570\u636e\u7ed3\u6784,\u5982\u4f55\u9762\u8bd5\u8fdb\u5165google\nhttp://study.163.com/course/introduction.htm?courseId=1002942008#/courseDetail?tab=1\n\n\nLintCode \u9898\u89e3\uff1a\nhttps://github.com/awangdev/LintCode/blob/master/Java/Median.java",
            "title": "\u672a\u5b8c\u6210\u7684\u90e8\u5206"
        },
        {
            "location": "/leetcode-algorithm-notes/#_1",
            "text": "\u5251\u6307offer\u9898\u76ee\u53ca\u7b54\u6848 https://blog.csdn.net/panda_AJ/article/details/69420293\n\u5251\u6307Offer \u4e4b Java \u4e13\u680f https://blog.csdn.net/column/details/codingintervieww.html  \u53f2\u4e0a\u6700\u7b80\u5355\u7684 IntelliJ IDEA \u6559\u7a0b\nhttps://github.com/guobinhit/intellij-idea-tutorial/blob/master/README.md  IntelliJ IDEA \u6700\u65b0\u6ce8\u518c\u7801\uff08\u622a\u6b62\u52302019\u5e745\u67084\u65e5\uff09\nhttps://blog.csdn.net/qq_35246620/article/details/80522720",
            "title": "\u672a\u5b8c\u6210\u7684\u90e8\u5206"
        },
        {
            "location": "/leetcode-algorithm-notes/#300",
            "text": "\u6709 nlogn \u590d\u6742\u5ea6\u7684\u89e3\u6cd5  \u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u89e3\u6cd5   tyvj\uff1ahttp://www.joyoi.cn/\ntopcoder\npoj\u3001\u676d\u7535\nGoogle Sheet\ncodeforces  \u7ec4\u5408\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u6c42\u89e3\u3002  \u601d\u8def1\uff1a\u56e0\u4e3a\u5f88\u53ef\u80fd\u5934\u7ed3\u70b9\u88ab\u5220\u9664\uff0c\u4e3a\u4e86\u907f\u514d\u5904\u7406\u5220\u9664\u5934\u7ed3\u70b9\u7684\u4e00\u4e9b\u590d\u6742\u7684\u8ba8\u8bba\u5de5\u4f5c\uff0c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u4e00\u822c\u662f\u8fd9\u7c7b\u95ee\u9898\u5e38\u89c1\u7684\u505a\u6cd5\u3002\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5220\u9664\u3002  BAT\u673a\u5668\u5b66\u4e60\u9762\u8bd51000\u9898\u7cfb\u5217\uff1a\u4e03\u6708\u5728\u7ebf\uff1a\nhttps://blog.csdn.net/v_july_v/article/details/7041827  \u57fa\u672c\u6982\u5ff5\uff1a\n\u6587\u672c\u3001\u6a21\u5f0f\u3001\u524d\u7f00\u3001\u540e\u7f00\u3001\u5339\u914d\u3001\u5931\u914d\u3001\u5b57\u6bcd\u8868\u3002  1\u3001\u66b4\u529b\u5339\u914d\uff08\u6734\u7d20\u5339\u914d\uff09\n\u7b97\u6cd5\u662f\u5341\u5206\u597d\u7406\u89e3\uff0c\u5e76\u4e14\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u66b4\u529b\u5339\u914d\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\uff1a\u5728\u4e00\u8f6e\u5339\u914d\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5339\u914d\u4e86\u5f88\u591a\u5b57\u7b26\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4f1a\u524d\u529f\u5c3d\u5f03\uff0c\u4e00\u4e0b\u5b50\u6253\u56de\u539f\u5f62\uff0c\u7ee7\u7eed\u5f00\u59cb\u4e0b\u4e00\u8f6e\u3002\n\u66b4\u529b\u5339\u914d\uff0c\u5c31\u76f8\u5f53\u4e8e\u9009\u62e9\u6392\u5e8f\u4e00\u6837\uff0c\u6bcf\u4e00\u8f6e\u90fd\u9009\u51fa\u4e00\u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u4e0b\u4e00\u8f6e\uff0c\u91cd\u65b0\u5f00\u59cb\u8dd1\uff0c\u8fd9\u79cd\u7b97\u6cd5\u4e0d\u80fd\u89c2\u5bdf\u5230\u5b57\u7b26\u4e32\u672c\u8eab\u6709\u7684\u7279\u70b9\uff0c\u8ba9\u7b97\u6cd5\u66f4\u5feb\u5730\u5b8c\u6210\u3002  \u7c7b\u6bd4\u4e0e\u63d2\u5165\u6392\u5e8f\uff0c\u5bf9\u4e8e\u5927\u81f4\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u63d2\u5165\u6392\u5e8f\u5c31\u53ef\u4ee5\u5f88\u5feb\u5b8c\u6210\u3002  2\u3001KMP \nnext \u6570\u7ec4\u4ee3\u8868\u5f53\u524d\u5b57\u7b26 \u4e4b\u524d \u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u6709\u591a\u5927\u957f\u5ea6\u7684\u76f8\u540c\u524d\u7f00\u540e\u7f00\u3002  376  \u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7ea2\u9ed1\u6811\u5b66\u4e60\u7b14\u8bb0 http://www.cnblogs.com/Anker/archive/2013/01/30/2882773.html\nBST \u4e2d\u627e\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u9a71\u548c\u540e\u7ee7  KMP \u7b97\u6cd5\u7406\u89e3\u76f8\u5173\u6587\u7ae0\uff1a  \u962e\u4e00\u5cf0\u300a\u5b57\u7b26\u4e32\u5339\u914d\u7684KMP\u7b97\u6cd5\u300b  \u4e03\u6708\u300ahttps://blog.csdn.net/v_july_v/article/details/7041827\u300b  \u9ec4\u6d69\u52ab\u89c6\u9891\u8bb2\u89e3  http://www.cnblogs.com/golove/p/3222096.html \u8fd9\u7bc7\u535a\u5ba2\u544a\u8bc9\u6211\u4eec\uff0c\u6807\u51c6 ASCII \u7801\u6709 256 \u4e2a\u5b57\u7b26\u3002  Rabin-Karp \u7b97\u6cd5\u8bb2\u89e3\u6bd4\u8f83\u7ec6\u81f4\u7684\u4e00\u7bc7\u6587\u7ae0\uff1ahttp://www.cnblogs.com/golove/p/3234673.html\nRabin-Karp \u7b97\u6cd5 Java \u5b9e\u73b0\uff1a https://blog.csdn.net/tyler_download/article/details/52457108  \u7b97\u6cd5\u2014\u2014\u5b57\u7b26\u4e32\u5339\u914d\u4e4bRabin-Karp\u7b97\u6cd5\nhttps://blog.csdn.net/chenhanzhun/article/details/39895077\n\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u7684\u4f8b\u5b50\uff1a\nhttps://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/  \u7b97\u6cd5\u6570\u636e\u7ed3\u6784,\u5982\u4f55\u9762\u8bd5\u8fdb\u5165google\nhttp://study.163.com/course/introduction.htm?courseId=1002942008#/courseDetail?tab=1  LintCode \u9898\u89e3\uff1a\nhttps://github.com/awangdev/LintCode/blob/master/Java/Median.java",
            "title": "300 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217()"
        },
        {
            "location": "/leetcode-articles-template/",
            "text": "\u586b\u5199\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-articles-template/#_1",
            "text": "",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-articles-template/#_2",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be  \u82f1\u6587\u7f51\u5740\uff1a   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-articles-template/#_3",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-articles-template/#_4",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-articles-template/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-summarize/",
            "text": "LeetCode \u95ee\u9898\u5206\u7c7b\u603b\u7ed3\n\n\n\u6570\u7ec4\u4e2d\u7684\u95ee\u9898\n\n\n\n\n\u4e8c\u5206\u67e5\u627e\u6cd5\u4ee5\u53ca\u76f8\u5173\u7684\u64cd\u4f5c\uff1a\u9012\u5f52\u5b9e\u73b0\u548c\u975e\u9012\u5f52\u5b9e\u73b0\uff0cfloor \u548c ceiling\uff0c\u300a\u5251\u6307Offer\u300b\u4e0a\u9762\u5173\u4e8e\u4e8c\u5206\u67e5\u627e\u6cd5\u7684\u5e94\u7528\n\n\nMove Zeros\uff08\u7b2c 283 \u9898\uff09\n\n\n\u7b2c 27 \u9898\uff0c\u5220\u9664\u5143\u7d20\n\n\n\u7b2c 26 \u9898\uff0c\u6570\u7ec4\u5143\u7d20\u53bb\u91cd\n\n\n\u7b2c 80 \u9898\uff1a\u6700\u591a\u4fdd\u7559\u4e24\u4e2a\n\n\nLeetCode \u7b2c 75 \u9898\n\n\nLeetCode \u7b2c 88 \u9898\uff0c\u5176\u5b9e\u5c31\u662f\u5f52\u5e76\u6392\u5e8f\n\n\nLeetCode \u7b2c 215 \u9898 leetcode-215-Kth-Largest-Element-in-an-Array\u3002\n\n\n\u5173\u4e8e\u6307\u9488\u5bf9\u649e\u7684\u7ec3\u4e60\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 167 \u9898\n\u7ec3\u4e601\uff1aLeetcode \u7b2c 125 \u9898\n\u7ec3\u4e602\uff1aLeetcode \u7b2c 344 \u9898\n\u7ec3\u4e603\uff1aLeetcode \u7b2c 345 \u9898\n\u7ec3\u4e604\uff1aLeetcode \u7b2c 11 \u9898\n\n\n\u6ed1\u52a8\u7a97\u53e3\n\n\n\n\n\u67e5\u627e\u8868\u76f8\u5173\u7684\u95ee\u9898\n\n\n\n\n\u7b2c LeetCode \u7b2c 349 \u9898 \u8ba1\u7b97\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6\n\n\n\u7b2c LeetCode \u7b2c 350 \u9898 \u8ba1\u7b97\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4ea4\u96c6\n\n\nLeetCode \u7b2c 242 \u9898 Valid Anagram\n\n\nLeetCode \u7b2c 202 \u9898 \u5feb\u4e50\u6570\n\n\nLeetCode \u7b2c 290 \u9898 Word Pattern\n\n\nLeetCode \u7b2c 205 \u9898 Isomorphic Strings \u5224\u65ad\u662f\u5426\u540c\u6784\n\n\n\u7ec3\u4e605\uff1aLeetCode \u7b2c 451 \u9898 Sort Characters By Frequency\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 1 \u9898\n\n\n\u7ec3\u4e601\uff1aLeetCode \u7b2c 15 \u9898 3Sum\n\n\nLeetCode \u7b2c 18 \u9898 4Sum\n\n\nLeetCode \u7b2c 16 \u9898 3Sum Closest\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 454 \u9898 4 \u4e2a\u6570\u4e4b\u548c\n\n\n\u7ec3\u4e601\uff1aLeetCode \u7b2c 49 \u9898\n\n\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 477 \u9898\uff08\u9009\u9519\u9898\u4e86\uff09\u4f4d\u8fd0\u7b97\n\n\n\n\n\n\nLeetCode \u7b2c 447 \u9898\n\n\n\n\nLeetCode \u7b2c 149 \u9898\n\n\n\u67e5\u627e\u8868\u548c\u6ed1\u52a8\u7a97\u53e3\uff1aLeetCode \u7b2c 219 \u9898\n\n\n\u7ec3\u4e601\uff1aLeetCode \u7b2c 217 \u9898\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 220 \u9898\n\n\n\n\n\u94fe\u8868\n\n\n\n\n\n\n\u94fe\u8868\u95ee\u9898\u53ea\u8981\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff1b\n\n\n\n\n\n\n\u53cd\u8f6c\u4e00\u4e2a\u94fe\u8868\uff08206\uff09\u3001\u53cd\u8f6c\u94fe\u8868\u7684\u6307\u5b9a\u90e8\u5206\uff0892\uff09\uff1b\n\n\n\n\n83 \u9898\n\n\n86 \u9898\n\n\n328 \u9898\u3002\u5947\u6570\uff08Odd\uff09\u5076\u6570\uff08Even\uff09\u94fe\u8868\u3002\u5947\u6570\u3001\u5076\u6570\u6574\u7406\u94fe\u8868\u3001partition \u6574\u7406\u94fe\u8868\u7684\u4e00\u822c\u601d\u8def\uff1a\u5206\u522b\u62ff\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u62fc\u5728\u4e00\u8d77\uff1b\n\n\nLeetCode \u7b2c 2 \u9898\u3002\u4e24\u4e2a\u6570\u76f8\u52a0\u3002\u4e24\u4e2a\u5b58\u5728\u94fe\u8868\u4e2d\u7684\u6570\u76f8\u52a0\u7684\u95ee\u9898\uff1b\n\n\nLeetCode \u7b2c 445 \u9898\u3002\u4e24\u4e2a\u6570\u76f8\u52a0\u3002\n\n\n\u5220\u9664\u8282\u70b9\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 203 \u9898\u3002\u53ef\u4ee5\u9012\u5f52\u5220\u9664\uff0c\u6216\u8005\u7a7f\u9488\u5f15\u7ebf\u3002\n\n\n\u7ec3\u4e601\uff1aLeetCode \u7b2c 82 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002\n\n\n\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\uff0c\u8fd8\u662f\u7a7f\u9488\u5f15\u7ebf\u7684\u95ee\u9898\uff1b\n\n\n\u5f52\u5e76\u591a\u4e2a\u6709\u5e8f\u94fe\u8868\uff08\u591a\u8def\u5f52\u5e76\u6392\u5e8f\uff09\uff0c\u8981\u7528\u5230\u4f18\u5148\u961f\u5217\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 24 \u9898\u3002\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u3002\u89e3\u6cd51\uff1a\u6307\u9488\u7684\u4ea4\u6362\u3002\u89e3\u6cd52\uff1a\u9012\u5f52\u5199\u6cd5\u3002\n\n\nLeetCode \u7b2c 25 \u9898\u3002k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868\u3002\n\n\n\uff08\u91cd\u5237\uff0c\u6ca1\u6709\u638c\u63e1\u5230\u4f4d\uff09LeetCode \u7b2c 147 \u9898\uff0c\u5355\u94fe\u8868\u7684\u63d2\u5165\u6392\u5e8f\u3002\n\n\nLeetCode \u7b2c 148 \u9898\u3002\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 237 \u9898\u3002\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002\n\n\n\u94fe\u8868\u4e0e\u53cc\u6307\u9488\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 19 \u9898\u3002\n\n\nLeetCode \u7b2c 61 \u9898\u3002\n\n\nLeetCode \u7b2c 143 \u9898\u3002\n\n\nLeetCode \u7b2c 234 \u9898\u3002\n\n\n\n\n\u4f7f\u7528\u6808\u548c\u961f\u5217\u5b8c\u6210\u7684\u7ec3\u4e60\n\n\n\n\nLeetCode \u4e0a\u7b2c 20 \u9898\uff1a\u5178\u578b\u5e94\u7528\uff0c\u68c0\u67e5\u62ec\u53f7\u5339\u914d\uff0c\u662f\u6587\u672c\u7f16\u8f91\u5668\u5e38\u89c1\u7684\u4e00\u4e2a\u529f\u80fd\n\n\n\u7ec3\u4e601\uff1aLeetCode \u7b2c 150 \u9898\u3002\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c\u3002\n\n\nLeetCode \u7b2c 71 \u9898 \u7b80\u5316\u8def\u5f84\n\n\n\u6808\u548c\u9012\u5f52\u5bc6\u4e0d\u53ef\u5206\uff1a\u5206\u522b\u53ef\u4ee5\u89e3\u51b3\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386 LeetCode \u7b2c144 \u9898\u3001\u7ec3\u4e602\uff1aLeetCode \u7b2c94 \u9898\u3001LeetCode \u7b2c145 \u9898\n\n\n\u7b2c 341 \u9898\uff1a\u7c7b\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u633a\u6709\u610f\u601d\u7684\n\n\n\n\n\uff08\u6709\u70b9\u610f\u601d\uff09\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386 102 \u9898\u548c 107 \u9898\uff0c\u81ea\u5e95\u5411\u4e0a\u7684\u5c42\u5e8f\u904d\u5386\u3002\n\n\n\n\n\n\n103 \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u5b9e\u5728\u592a\u7b80\u5355\u4e86\uff0c\u53ea\u6709 3 \u884c\u4ee3\u7801\n\n\n\n\n\u6709\u70b9\u610f\u601d\u3002\u8003\u67e5\u7684\u662f\u5c42\u5e8f\u904d\u5386\u3002LeetCode \u7b2c 199 \u9898\uff0c\u4e8c\u53c9\u6811\u4ece\u53f3\u8fb9\u770b\uff0c\u5f97\u5230\u7684\u4e00\u4e2a\u6570\u7ec4\u3002\n\n\n\uff08\u5178\u578b\u7684\u95ee\u9898\uff0c\u6709\u591a\u79cd\u89e3\u6cd5\uff09\u4f8b\u98981\uff1aLeetCode \u7b2c 279 \u9898\uff08\u6cb9\u7ba1\u7f3a\u5c11\u4e0b\u8f7d\uff09\n\n\n\uff08\u82b1\u4e86\u6211\u975e\u5e38\u591a\u7684\u65f6\u95f4\uff0c\u4e00\u5b9a\u8981\u91cd\u89c6\u8d77\u6765\uff09LeetCode \u7b2c 127 \u9898\uff08\u8f83\u7b80\u5355\uff09\u3001LeetCode \u7b2c 126 \u9898\uff08\u96be\uff09\n\n\nLeetCode \u7b2c 347 \u9898\uff1a\u524d K \u4e2a\u9ad8\u9891\u5143\u7d20\n\n\n\uff08\u57fa\u7840\u3001\u5178\u578b\u3001\u5fc5\u4f1a\uff0923. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\uff081\u3001\u4f18\u5148\u961f\u5217\uff1b2\u3001\u5206\u6cbb\u5f52\u5e76\uff09\n\n\n\n\n\u4e8c\u53c9\u6811\u76f8\u5173\u7684\u95ee\u9898\n\n\n\n\n\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u548c\u6700\u5c0f\u6df1\u5ea6\uff08\u7b2c 104 \u548c \u7b2c 111 \u9898\uff08\u5dee\u4e00\u5f20\u56fe\uff09\uff09\n\n\n\u53cd\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u7b2c 226 \u9898\uff09\uff0c\u4e3a\u4ec0\u4e48\u4e2d\u5e8f\u904d\u5386\u4e0d\u80fd\u80dc\u4efb\u3002\n\n\n\u5224\u65ad\u4e24\u4e2a\u4e8c\u53c9\u6811\u662f\u5426\u4e00\u6837\uff08LeetCode \u7b2c 100 \u9898\uff09\n\n\n\u68c0\u67e5\u4e00\u68f5\u6811\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\uff08\u7b2c 101 \u9898\uff09\uff0c\u89e3\u6cd5\u5f88\u591a\uff0cLeetCode \u7b2c 101 \u9898\uff08\u5178\u578b\u95ee\u9898\uff09\n\n\n\u7ed9\u51fa\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6c42\u51fa\u8be5\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002LeetCode \u7b2c 222 \u9898 \n\n\n\u5224\u65ad\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff08\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u7b2c 110 \u9898\uff09LeetCode \u7b2c 110 \u9898\n\n\nLeetCode \u7b2c 112 \u9898Path Sum\n\n\nLeetCode \u7b2c 111 \u9898\uff08\u56de\u987e\uff09\n\n\n\n\n+\uff08\u5b8c\u6210\uff09\u7ec3\u4e602\uff1aLeetCode \u7b2c 404 \u9898\uff08\u6cb9\u7ba1\u89c6\u9891\u7f3a\u5c11\u4e0b\u8f7d\uff09\nLeetCode \u7b2c 257 \u9898\u3002\u9898\u76ee\u8981\u6c42\uff1a\u5f97\u5230\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84\u3002\n\u7b2c 113 \u9898\u3002\u9898\u76ee\u8981\u6c42\uff1a\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u8981\u7b49\u4e8e\u6307\u5b9a\u7684\u548c\u3002\n+ \u7b2c 129 \u9898\u3002\u9898\u76ee\u8981\u6c42\uff1a\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u5305\u542b\u6570\u5b57 0-9\uff0c\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6bcf\u6761\u8def\u5f84\u53ef\u4ee5\u8868\u793a\u6210\u4e00\u4e2a\u6570\uff0c\u6c42\u8fd9\u4e9b\u6570\u7684\u548c\u3002\n\n\n\n\nLeetCode \u7b2c 437 \u9898\n\n\n\n\n\n\n\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u7b80\u5355\uff0c\u4f46\u662f\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u6ca1\u6709\u90a3\u4e48\u5bb9\u6613\u4e86\n\n\n\n\n\n\nLeetCode \u7b2c 98 \u9898 \u662f\u5426\u662f\u4e8c\u5206\u641c\u7d22\u6811\n\n\n\n\n\uff08\u4e00\u5b9a\u8981\u4f1a\uff01\uff09LeetCode \u7b2c 450 \u9898 450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9\n\n\n\n\n\n\nLeetCode \u7b2c 108 \u9898 \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\n\n\n\n\n\uff08\u57fa\u7840\u3001\u91cd\u8981\u3001\u5efa\u8bae\u91cd\u505a\uff09LeetCode \u7b2c 230 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20\uff08\u6211\u7684\u89e3\u6cd5\u6bd4\u300a\u5251\u6307Offer\u300b\u7684\u8981\u7b80\u5355\uff0c\u4e0d\u8981\u88ab\u8fd9\u672c\u4e66\u5e26\u504f\u4e86\uff09\n\n\nLeetCode \u7b2c 236 \u9898 \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u300a\u5251\u6307Offer\u300b\u4e5f\u6709\u8fd9\u9898\n\n\n\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\uff08\u300a\u5251\u6307 Offer \u300b\u7b2c 37 \u9898\uff09\n\n\n\u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\u3001\u53cd\u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\n\n\n\u4f7f\u7528\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u8fd8\u539f\u4e00\u68f5\u4e8c\u53c9\u6811\n\n\n\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6\uff08\u7b2c 111 \u9898\uff09\uff1a\u867d\u7136\u662f\u7b80\u5355\u9898\uff0c\u4f46\u662f\u6709\u6bd4\u8f83\u5bb9\u6613\u5ffd\u89c6\u7684\u4e00\u4e2a\u7279\u4f8b\n\n\n\n\n\u56de\u6eaf\u95ee\u9898\n\n\n\n\n\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 17\n\n\nLeetCode \u7b2c 93 \u9898 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u590d\u539f\u5b83\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684 IP \u5730\u5740\u683c\u5f0f\u3002\n\n\nLeetCode \u7b2c 131 \u9898\u3002\u5206\u5272\u56de\u6587\u4e32\u3002\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002\u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002\n\n\n\n\n\uff08\u91cd\u8981\uff09LeetCode \u7b2c 46 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002\n\n\n\n\n\n\n\uff08\u91cd\u8981\uff0c\u7406\u89e3\u526a\u679d\u7684\u64cd\u4f5c\uff09LeetCode \u7b2c 47 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e used \u6570\u7ec4\u3002\n\n\n\n\n\n\n\uff08\u8fd9\u9053\u9898\u6709\u4e2a\u526a\u679d\u64cd\u4f5c\u8981\u5206\u6790\u6e05\u695a\uff01\uff09\u4f8b\u98981\uff1aLeetCode \u7b2c 77 \u9898\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002\n\n\n\n\n\n\nLeetCode \u7b2c 39 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002\n\n\n\n\n\n\n\u7ec3\u4e602\uff1aLeetCode \u7b2c 40 \u9898\uff0c\u8fd8\u662f\u7ec4\u5408\u95ee\u9898\u3002\n\n\n\n\nLeetCode \u7b2c 216 \u9898\u3002\u627e\u51fa\u6240\u6709\u76f8\u52a0\u4e4b\u548c\u4e3a n \u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002\u7ec4\u5408\u4e2d\u53ea\u5141\u8bb8\u542b\u67091 - 9\u7684\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u6bcf\u79cd\u7ec4\u5408\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u6570\u5b57\u3002\n\n\n\u6392\u5217\u95ee\u9898 \u7b2c 46 \u9898\uff08\u8d76\u5feb\u6574\u7406\uff09\n\n\nLeetCode \u7b2c 78 \u9898\u3002\u7ed9\u5b9a\u4e00\u7ec4\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002\n\n\nLeetCode \u7b2c 90 \u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002\u8bf4\u660e\uff1a\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\n\n\nLeetCode \u7b2c 401 \u9898\uff1a\u4e8c\u8fdb\u5236\u624b\u8868\u95ee\u9898\u3002\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 79 \u9898 79. \u5355\u8bcd\u641c\u7d22\nLeetCode \u7b2c 80 \u9898\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\u539f\u5730\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002\n\n\n\n\n\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002\n\n\n\n\nLeetCode \u7b2c 200 \u9898\uff1a200. \u5c9b\u5c7f\u7684\u4e2a\u6570\n\n\n130,\u88ab\u56f4\u7ed5\u7684\u533a\u57df,\n\n\n\n\n\n\nPacific Atlantic Water Flow \n\n\n\n\n\n\nn \u7687\u540e\u95ee\u9898 \u7b2c 51 \u9898\uff0c\u7b2c 52 \u9898 \n\n\n\u6570\u72ec\u95ee\u9898 \u7b2c 37 \u9898\n\n\n\n\n\n\n\u52a8\u6001\u89c4\u5212\n\n\n\n\n\u6590\u6ce2\u62c9\u5951\u6570\u5217\n\n\nLeetCode \u7b2c 70 \u9898 Climbing Stairs\n\n\n\u7ec3\u4e601\uff1aLeetCode \u7b2c 120 \u9898 Triangle\n\n\n\u7b2c 64 \u9898 Minimum Path Sum \u6700\u5c0f\u8def\u5f84\u548c\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 343 \u9898 Integer Break\n\n\nLeetCode \u7b2c 279 \u9898\uff0c\u6c42\u4e00\u4e2a\u6b63\u6574\u6570\u80fd\u5206\u89e3\u6210\u5b8c\u5168\u5e73\u65b9\u6570\u4e4b\u548c\u7684\u6700\u5c11\u4e2a\u6570\u3002\n\n\n\uff08\u975e\u5e38\u91cd\u8981\u7684 dp \u95ee\u9898\uff09\u7ec3\u4e602\uff1aLeetCode \u7b2c 91 \u9898 Decode Ways\n\n\n\uff08\u7b80\u5355\uff0c\u53ef\u4ee5\u4ece\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\uff09\u7ec3\u4e603\uff1aLeetCode \u7b2c 62 \u9898 Unique Paths\n\n\nLeetCode \u7b2c 63 \u9898 Unique Paths II\n\n\n\u6253\u5bb6\u52ab\u820d\u7cfb\u5217\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 198 \u9898\u3001\u7ec3\u4e601\uff1aLeetCode \u7b2c 213 \u9898 House Robber II\u3001LeetCode \u7b2c 337 \u9898 House Robber III\n\n\n\uff08\u72b6\u6001\u673a\u89e3\u51b3\uff09\u7ec3\u4e603\uff1aLeetCode \u7b2c 309 \u9898 Best Time to Buy and Sell Stock with Cooldown\n\n\n\u80cc\u5305\u95ee\u9898\u2014\u2014 Knapsack01\uff086\u9898\uff09\n\n\nLeetCode \u7b2c 416 \u9898 Partition Equal Subset Sum\n\n\n\uff08\u91cd\u8981\uff0c\u5efa\u8bae\u91cd\u5237\uff0c\u601d\u8003\u5b83\u548c\u6574\u6570\u5206\u89e3\u7684\u5173\u7cfb\uff0c\u8fd8\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff09\u7ec3\u4e601\uff1aLeetCode \u7b2c 322 \u9898 Coin Change\uff0c\u770b\u770b\u54ea\u91cc\u7528\u5230\u4e86\u201c\u6eda\u52a8\u6570\u7ec4\u201d\u7684\u6280\u5de7\uff0c\u5178\u578b\u7684\u4e00\u7ef4\u52a8\u6001\u89c4\u5212\u95ee\u9898\n\n\n\uff08\u91cd\u8981\uff0c\u91cd\u5237\uff0c\u5bf9\u8fd9\u9053\u95ee\u9898\u7684\u7406\u89e3\u8fd8\u4e0d\u591f\u6df1\u523b\uff09\u7ec3\u4e602\uff1aLeetCode \u7b2c 377 \u9898 Combination Sum IV\n\n\nLeetCode \u7b2c 474 \u9898 Ones and Zeroes\n\n\nLeetCode \u7b2c 139 \u9898 Word Break\uff08\u8fd9\u4e2a\u95ee\u9898\u88ab\u5f88\u591a\u5927\u516c\u53f8\u91c7\u7528\uff0c\u671b\u7559\u610f\uff09\n\n\nLeetCode \u7b2c 494 \u9898 Target Sum\n\n\n\u4f8b\u98981\uff1aLeetCode \u7b2c 300 \u9898 Longest Increasing Subsequence\n\n\n\u7ec3\u4e601\uff1aLeetCode \u7b2c 376 \u9898 Wiggle Subsequence\n\n\n\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u95ee\u9898\uff08Longest Common Sequence\uff09\n\n\n\n\n\u8d2a\u5fc3\u7b97\u6cd5\n\n\n\n\nLeetCode \u7b2c 435 \u9898 \n\n\n[leetcode] 402. Remove K Digits \u89e3\u9898\u62a5\u544a\uff1ahttps://blog.csdn.net/qq508618087/article/details/52584133\n\n\n\n\n\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\n\n\n\u7ebf\u6bb5\u6811\n\n\n\u5355\u8bcd\u67e5\u627e\u6811 Trie\n\n\n\n\nLeetCode \u7b2c 208 \u9898 Implement Trie (Prefix Tree)\n\n\nLeetCode \u7b2c 211 \u9898 Add and Search Word - Data structure design\n\n\nLeetCode \u7b2c 677 \u9898 Map Sum Pairs\n\n\n\n\n\n\n\u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22 https://leetcode-cn.com/problems/prefix-and-suffix-search/description/\n\n\n\n\n\n\n\n\n\n\n\u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd https://leetcode-cn.com/problems/longest-word-in-dictionary/description/\n\n\n\n\n\n\n\n\n\u5176\u5b83\u6280\u5de7\n\n\n\u6eda\u52a8\u6570\u7ec4\uff08\u8282\u7ea6\u7a7a\u95f4\uff09\n\n\n\u4f7f\u7528\u72b6\u6001\u673a\u753b\u56fe\u6c42\u89e3\n\n\n\u4f4d\u8fd0\u7b97\u5e2e\u4e0a\u7684\u5927\u5fd9",
            "title": "LeetCode \u95ee\u9898\u5206\u7c7b\u603b\u7ed3"
        },
        {
            "location": "/leetcode-summarize/#leetcode",
            "text": "",
            "title": "LeetCode \u95ee\u9898\u5206\u7c7b\u603b\u7ed3"
        },
        {
            "location": "/leetcode-summarize/#_1",
            "text": "\u4e8c\u5206\u67e5\u627e\u6cd5\u4ee5\u53ca\u76f8\u5173\u7684\u64cd\u4f5c\uff1a\u9012\u5f52\u5b9e\u73b0\u548c\u975e\u9012\u5f52\u5b9e\u73b0\uff0cfloor \u548c ceiling\uff0c\u300a\u5251\u6307Offer\u300b\u4e0a\u9762\u5173\u4e8e\u4e8c\u5206\u67e5\u627e\u6cd5\u7684\u5e94\u7528  Move Zeros\uff08\u7b2c 283 \u9898\uff09  \u7b2c 27 \u9898\uff0c\u5220\u9664\u5143\u7d20  \u7b2c 26 \u9898\uff0c\u6570\u7ec4\u5143\u7d20\u53bb\u91cd  \u7b2c 80 \u9898\uff1a\u6700\u591a\u4fdd\u7559\u4e24\u4e2a  LeetCode \u7b2c 75 \u9898  LeetCode \u7b2c 88 \u9898\uff0c\u5176\u5b9e\u5c31\u662f\u5f52\u5e76\u6392\u5e8f  LeetCode \u7b2c 215 \u9898 leetcode-215-Kth-Largest-Element-in-an-Array\u3002  \u5173\u4e8e\u6307\u9488\u5bf9\u649e\u7684\u7ec3\u4e60\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 167 \u9898\n\u7ec3\u4e601\uff1aLeetcode \u7b2c 125 \u9898\n\u7ec3\u4e602\uff1aLeetcode \u7b2c 344 \u9898\n\u7ec3\u4e603\uff1aLeetcode \u7b2c 345 \u9898\n\u7ec3\u4e604\uff1aLeetcode \u7b2c 11 \u9898  \u6ed1\u52a8\u7a97\u53e3",
            "title": "\u6570\u7ec4\u4e2d\u7684\u95ee\u9898"
        },
        {
            "location": "/leetcode-summarize/#_2",
            "text": "\u7b2c LeetCode \u7b2c 349 \u9898 \u8ba1\u7b97\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6  \u7b2c LeetCode \u7b2c 350 \u9898 \u8ba1\u7b97\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4ea4\u96c6  LeetCode \u7b2c 242 \u9898 Valid Anagram  LeetCode \u7b2c 202 \u9898 \u5feb\u4e50\u6570  LeetCode \u7b2c 290 \u9898 Word Pattern  LeetCode \u7b2c 205 \u9898 Isomorphic Strings \u5224\u65ad\u662f\u5426\u540c\u6784  \u7ec3\u4e605\uff1aLeetCode \u7b2c 451 \u9898 Sort Characters By Frequency  \u4f8b\u98981\uff1aLeetCode \u7b2c 1 \u9898  \u7ec3\u4e601\uff1aLeetCode \u7b2c 15 \u9898 3Sum  LeetCode \u7b2c 18 \u9898 4Sum  LeetCode \u7b2c 16 \u9898 3Sum Closest  \u4f8b\u98981\uff1aLeetCode \u7b2c 454 \u9898 4 \u4e2a\u6570\u4e4b\u548c  \u7ec3\u4e601\uff1aLeetCode \u7b2c 49 \u9898   \u4f8b\u98981\uff1aLeetCode \u7b2c 477 \u9898\uff08\u9009\u9519\u9898\u4e86\uff09\u4f4d\u8fd0\u7b97    LeetCode \u7b2c 447 \u9898   LeetCode \u7b2c 149 \u9898  \u67e5\u627e\u8868\u548c\u6ed1\u52a8\u7a97\u53e3\uff1aLeetCode \u7b2c 219 \u9898  \u7ec3\u4e601\uff1aLeetCode \u7b2c 217 \u9898  \u4f8b\u98981\uff1aLeetCode \u7b2c 220 \u9898",
            "title": "\u67e5\u627e\u8868\u76f8\u5173\u7684\u95ee\u9898"
        },
        {
            "location": "/leetcode-summarize/#_3",
            "text": "\u94fe\u8868\u95ee\u9898\u53ea\u8981\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff1b    \u53cd\u8f6c\u4e00\u4e2a\u94fe\u8868\uff08206\uff09\u3001\u53cd\u8f6c\u94fe\u8868\u7684\u6307\u5b9a\u90e8\u5206\uff0892\uff09\uff1b   83 \u9898  86 \u9898  328 \u9898\u3002\u5947\u6570\uff08Odd\uff09\u5076\u6570\uff08Even\uff09\u94fe\u8868\u3002\u5947\u6570\u3001\u5076\u6570\u6574\u7406\u94fe\u8868\u3001partition \u6574\u7406\u94fe\u8868\u7684\u4e00\u822c\u601d\u8def\uff1a\u5206\u522b\u62ff\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u62fc\u5728\u4e00\u8d77\uff1b  LeetCode \u7b2c 2 \u9898\u3002\u4e24\u4e2a\u6570\u76f8\u52a0\u3002\u4e24\u4e2a\u5b58\u5728\u94fe\u8868\u4e2d\u7684\u6570\u76f8\u52a0\u7684\u95ee\u9898\uff1b  LeetCode \u7b2c 445 \u9898\u3002\u4e24\u4e2a\u6570\u76f8\u52a0\u3002  \u5220\u9664\u8282\u70b9\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 203 \u9898\u3002\u53ef\u4ee5\u9012\u5f52\u5220\u9664\uff0c\u6216\u8005\u7a7f\u9488\u5f15\u7ebf\u3002  \u7ec3\u4e601\uff1aLeetCode \u7b2c 82 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002  \u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\uff0c\u8fd8\u662f\u7a7f\u9488\u5f15\u7ebf\u7684\u95ee\u9898\uff1b  \u5f52\u5e76\u591a\u4e2a\u6709\u5e8f\u94fe\u8868\uff08\u591a\u8def\u5f52\u5e76\u6392\u5e8f\uff09\uff0c\u8981\u7528\u5230\u4f18\u5148\u961f\u5217  \u4f8b\u98981\uff1aLeetCode \u7b2c 24 \u9898\u3002\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u3002\u89e3\u6cd51\uff1a\u6307\u9488\u7684\u4ea4\u6362\u3002\u89e3\u6cd52\uff1a\u9012\u5f52\u5199\u6cd5\u3002  LeetCode \u7b2c 25 \u9898\u3002k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868\u3002  \uff08\u91cd\u5237\uff0c\u6ca1\u6709\u638c\u63e1\u5230\u4f4d\uff09LeetCode \u7b2c 147 \u9898\uff0c\u5355\u94fe\u8868\u7684\u63d2\u5165\u6392\u5e8f\u3002  LeetCode \u7b2c 148 \u9898\u3002  \u4f8b\u98981\uff1aLeetCode \u7b2c 237 \u9898\u3002\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002  \u94fe\u8868\u4e0e\u53cc\u6307\u9488\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 19 \u9898\u3002  LeetCode \u7b2c 61 \u9898\u3002  LeetCode \u7b2c 143 \u9898\u3002  LeetCode \u7b2c 234 \u9898\u3002",
            "title": "\u94fe\u8868"
        },
        {
            "location": "/leetcode-summarize/#_4",
            "text": "LeetCode \u4e0a\u7b2c 20 \u9898\uff1a\u5178\u578b\u5e94\u7528\uff0c\u68c0\u67e5\u62ec\u53f7\u5339\u914d\uff0c\u662f\u6587\u672c\u7f16\u8f91\u5668\u5e38\u89c1\u7684\u4e00\u4e2a\u529f\u80fd  \u7ec3\u4e601\uff1aLeetCode \u7b2c 150 \u9898\u3002\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c\u3002  LeetCode \u7b2c 71 \u9898 \u7b80\u5316\u8def\u5f84  \u6808\u548c\u9012\u5f52\u5bc6\u4e0d\u53ef\u5206\uff1a\u5206\u522b\u53ef\u4ee5\u89e3\u51b3\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386 LeetCode \u7b2c144 \u9898\u3001\u7ec3\u4e602\uff1aLeetCode \u7b2c94 \u9898\u3001LeetCode \u7b2c145 \u9898  \u7b2c 341 \u9898\uff1a\u7c7b\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u633a\u6709\u610f\u601d\u7684   \uff08\u6709\u70b9\u610f\u601d\uff09\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386 102 \u9898\u548c 107 \u9898\uff0c\u81ea\u5e95\u5411\u4e0a\u7684\u5c42\u5e8f\u904d\u5386\u3002    103 \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u5b9e\u5728\u592a\u7b80\u5355\u4e86\uff0c\u53ea\u6709 3 \u884c\u4ee3\u7801   \u6709\u70b9\u610f\u601d\u3002\u8003\u67e5\u7684\u662f\u5c42\u5e8f\u904d\u5386\u3002LeetCode \u7b2c 199 \u9898\uff0c\u4e8c\u53c9\u6811\u4ece\u53f3\u8fb9\u770b\uff0c\u5f97\u5230\u7684\u4e00\u4e2a\u6570\u7ec4\u3002  \uff08\u5178\u578b\u7684\u95ee\u9898\uff0c\u6709\u591a\u79cd\u89e3\u6cd5\uff09\u4f8b\u98981\uff1aLeetCode \u7b2c 279 \u9898\uff08\u6cb9\u7ba1\u7f3a\u5c11\u4e0b\u8f7d\uff09  \uff08\u82b1\u4e86\u6211\u975e\u5e38\u591a\u7684\u65f6\u95f4\uff0c\u4e00\u5b9a\u8981\u91cd\u89c6\u8d77\u6765\uff09LeetCode \u7b2c 127 \u9898\uff08\u8f83\u7b80\u5355\uff09\u3001LeetCode \u7b2c 126 \u9898\uff08\u96be\uff09  LeetCode \u7b2c 347 \u9898\uff1a\u524d K \u4e2a\u9ad8\u9891\u5143\u7d20  \uff08\u57fa\u7840\u3001\u5178\u578b\u3001\u5fc5\u4f1a\uff0923. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\uff081\u3001\u4f18\u5148\u961f\u5217\uff1b2\u3001\u5206\u6cbb\u5f52\u5e76\uff09",
            "title": "\u4f7f\u7528\u6808\u548c\u961f\u5217\u5b8c\u6210\u7684\u7ec3\u4e60"
        },
        {
            "location": "/leetcode-summarize/#_5",
            "text": "\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u548c\u6700\u5c0f\u6df1\u5ea6\uff08\u7b2c 104 \u548c \u7b2c 111 \u9898\uff08\u5dee\u4e00\u5f20\u56fe\uff09\uff09  \u53cd\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u7b2c 226 \u9898\uff09\uff0c\u4e3a\u4ec0\u4e48\u4e2d\u5e8f\u904d\u5386\u4e0d\u80fd\u80dc\u4efb\u3002  \u5224\u65ad\u4e24\u4e2a\u4e8c\u53c9\u6811\u662f\u5426\u4e00\u6837\uff08LeetCode \u7b2c 100 \u9898\uff09  \u68c0\u67e5\u4e00\u68f5\u6811\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\uff08\u7b2c 101 \u9898\uff09\uff0c\u89e3\u6cd5\u5f88\u591a\uff0cLeetCode \u7b2c 101 \u9898\uff08\u5178\u578b\u95ee\u9898\uff09  \u7ed9\u51fa\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6c42\u51fa\u8be5\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002LeetCode \u7b2c 222 \u9898   \u5224\u65ad\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff08\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u7b2c 110 \u9898\uff09LeetCode \u7b2c 110 \u9898  LeetCode \u7b2c 112 \u9898Path Sum  LeetCode \u7b2c 111 \u9898\uff08\u56de\u987e\uff09   +\uff08\u5b8c\u6210\uff09\u7ec3\u4e602\uff1aLeetCode \u7b2c 404 \u9898\uff08\u6cb9\u7ba1\u89c6\u9891\u7f3a\u5c11\u4e0b\u8f7d\uff09\nLeetCode \u7b2c 257 \u9898\u3002\u9898\u76ee\u8981\u6c42\uff1a\u5f97\u5230\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84\u3002\n\u7b2c 113 \u9898\u3002\u9898\u76ee\u8981\u6c42\uff1a\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u8981\u7b49\u4e8e\u6307\u5b9a\u7684\u548c\u3002\n+ \u7b2c 129 \u9898\u3002\u9898\u76ee\u8981\u6c42\uff1a\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u5305\u542b\u6570\u5b57 0-9\uff0c\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6bcf\u6761\u8def\u5f84\u53ef\u4ee5\u8868\u793a\u6210\u4e00\u4e2a\u6570\uff0c\u6c42\u8fd9\u4e9b\u6570\u7684\u548c\u3002   LeetCode \u7b2c 437 \u9898    \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u7b80\u5355\uff0c\u4f46\u662f\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u6ca1\u6709\u90a3\u4e48\u5bb9\u6613\u4e86    LeetCode \u7b2c 98 \u9898 \u662f\u5426\u662f\u4e8c\u5206\u641c\u7d22\u6811   \uff08\u4e00\u5b9a\u8981\u4f1a\uff01\uff09LeetCode \u7b2c 450 \u9898 450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9    LeetCode \u7b2c 108 \u9898 \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811   \uff08\u57fa\u7840\u3001\u91cd\u8981\u3001\u5efa\u8bae\u91cd\u505a\uff09LeetCode \u7b2c 230 \u9898\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20\uff08\u6211\u7684\u89e3\u6cd5\u6bd4\u300a\u5251\u6307Offer\u300b\u7684\u8981\u7b80\u5355\uff0c\u4e0d\u8981\u88ab\u8fd9\u672c\u4e66\u5e26\u504f\u4e86\uff09  LeetCode \u7b2c 236 \u9898 \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u300a\u5251\u6307Offer\u300b\u4e5f\u6709\u8fd9\u9898  \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\uff08\u300a\u5251\u6307 Offer \u300b\u7b2c 37 \u9898\uff09  \u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\u3001\u53cd\u5e8f\u5217\u5316\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c  \u4f7f\u7528\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u8fd8\u539f\u4e00\u68f5\u4e8c\u53c9\u6811  \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6\uff08\u7b2c 111 \u9898\uff09\uff1a\u867d\u7136\u662f\u7b80\u5355\u9898\uff0c\u4f46\u662f\u6709\u6bd4\u8f83\u5bb9\u6613\u5ffd\u89c6\u7684\u4e00\u4e2a\u7279\u4f8b",
            "title": "\u4e8c\u53c9\u6811\u76f8\u5173\u7684\u95ee\u9898"
        },
        {
            "location": "/leetcode-summarize/#_6",
            "text": "\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 17  LeetCode \u7b2c 93 \u9898 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u590d\u539f\u5b83\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684 IP \u5730\u5740\u683c\u5f0f\u3002  LeetCode \u7b2c 131 \u9898\u3002\u5206\u5272\u56de\u6587\u4e32\u3002\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002\u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002   \uff08\u91cd\u8981\uff09LeetCode \u7b2c 46 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002    \uff08\u91cd\u8981\uff0c\u7406\u89e3\u526a\u679d\u7684\u64cd\u4f5c\uff09LeetCode \u7b2c 47 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e used \u6570\u7ec4\u3002    \uff08\u8fd9\u9053\u9898\u6709\u4e2a\u526a\u679d\u64cd\u4f5c\u8981\u5206\u6790\u6e05\u695a\uff01\uff09\u4f8b\u98981\uff1aLeetCode \u7b2c 77 \u9898\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002    LeetCode \u7b2c 39 \u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002    \u7ec3\u4e602\uff1aLeetCode \u7b2c 40 \u9898\uff0c\u8fd8\u662f\u7ec4\u5408\u95ee\u9898\u3002   LeetCode \u7b2c 216 \u9898\u3002\u627e\u51fa\u6240\u6709\u76f8\u52a0\u4e4b\u548c\u4e3a n \u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002\u7ec4\u5408\u4e2d\u53ea\u5141\u8bb8\u542b\u67091 - 9\u7684\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u6bcf\u79cd\u7ec4\u5408\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u6570\u5b57\u3002  \u6392\u5217\u95ee\u9898 \u7b2c 46 \u9898\uff08\u8d76\u5feb\u6574\u7406\uff09  LeetCode \u7b2c 78 \u9898\u3002\u7ed9\u5b9a\u4e00\u7ec4\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002  LeetCode \u7b2c 90 \u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002\u8bf4\u660e\uff1a\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002  LeetCode \u7b2c 401 \u9898\uff1a\u4e8c\u8fdb\u5236\u624b\u8868\u95ee\u9898\u3002  \u4f8b\u98981\uff1aLeetCode \u7b2c 79 \u9898 79. \u5355\u8bcd\u641c\u7d22\nLeetCode \u7b2c 80 \u9898\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\u539f\u5730\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002   \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002   LeetCode \u7b2c 200 \u9898\uff1a200. \u5c9b\u5c7f\u7684\u4e2a\u6570  130,\u88ab\u56f4\u7ed5\u7684\u533a\u57df,    Pacific Atlantic Water Flow     n \u7687\u540e\u95ee\u9898 \u7b2c 51 \u9898\uff0c\u7b2c 52 \u9898   \u6570\u72ec\u95ee\u9898 \u7b2c 37 \u9898",
            "title": "\u56de\u6eaf\u95ee\u9898"
        },
        {
            "location": "/leetcode-summarize/#_7",
            "text": "\u6590\u6ce2\u62c9\u5951\u6570\u5217  LeetCode \u7b2c 70 \u9898 Climbing Stairs  \u7ec3\u4e601\uff1aLeetCode \u7b2c 120 \u9898 Triangle  \u7b2c 64 \u9898 Minimum Path Sum \u6700\u5c0f\u8def\u5f84\u548c  \u4f8b\u98981\uff1aLeetCode \u7b2c 343 \u9898 Integer Break  LeetCode \u7b2c 279 \u9898\uff0c\u6c42\u4e00\u4e2a\u6b63\u6574\u6570\u80fd\u5206\u89e3\u6210\u5b8c\u5168\u5e73\u65b9\u6570\u4e4b\u548c\u7684\u6700\u5c11\u4e2a\u6570\u3002  \uff08\u975e\u5e38\u91cd\u8981\u7684 dp \u95ee\u9898\uff09\u7ec3\u4e602\uff1aLeetCode \u7b2c 91 \u9898 Decode Ways  \uff08\u7b80\u5355\uff0c\u53ef\u4ee5\u4ece\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\uff09\u7ec3\u4e603\uff1aLeetCode \u7b2c 62 \u9898 Unique Paths  LeetCode \u7b2c 63 \u9898 Unique Paths II  \u6253\u5bb6\u52ab\u820d\u7cfb\u5217\uff1a\u4f8b\u98981\uff1aLeetCode \u7b2c 198 \u9898\u3001\u7ec3\u4e601\uff1aLeetCode \u7b2c 213 \u9898 House Robber II\u3001LeetCode \u7b2c 337 \u9898 House Robber III  \uff08\u72b6\u6001\u673a\u89e3\u51b3\uff09\u7ec3\u4e603\uff1aLeetCode \u7b2c 309 \u9898 Best Time to Buy and Sell Stock with Cooldown  \u80cc\u5305\u95ee\u9898\u2014\u2014 Knapsack01\uff086\u9898\uff09  LeetCode \u7b2c 416 \u9898 Partition Equal Subset Sum  \uff08\u91cd\u8981\uff0c\u5efa\u8bae\u91cd\u5237\uff0c\u601d\u8003\u5b83\u548c\u6574\u6570\u5206\u89e3\u7684\u5173\u7cfb\uff0c\u8fd8\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff09\u7ec3\u4e601\uff1aLeetCode \u7b2c 322 \u9898 Coin Change\uff0c\u770b\u770b\u54ea\u91cc\u7528\u5230\u4e86\u201c\u6eda\u52a8\u6570\u7ec4\u201d\u7684\u6280\u5de7\uff0c\u5178\u578b\u7684\u4e00\u7ef4\u52a8\u6001\u89c4\u5212\u95ee\u9898  \uff08\u91cd\u8981\uff0c\u91cd\u5237\uff0c\u5bf9\u8fd9\u9053\u95ee\u9898\u7684\u7406\u89e3\u8fd8\u4e0d\u591f\u6df1\u523b\uff09\u7ec3\u4e602\uff1aLeetCode \u7b2c 377 \u9898 Combination Sum IV  LeetCode \u7b2c 474 \u9898 Ones and Zeroes  LeetCode \u7b2c 139 \u9898 Word Break\uff08\u8fd9\u4e2a\u95ee\u9898\u88ab\u5f88\u591a\u5927\u516c\u53f8\u91c7\u7528\uff0c\u671b\u7559\u610f\uff09  LeetCode \u7b2c 494 \u9898 Target Sum  \u4f8b\u98981\uff1aLeetCode \u7b2c 300 \u9898 Longest Increasing Subsequence  \u7ec3\u4e601\uff1aLeetCode \u7b2c 376 \u9898 Wiggle Subsequence  \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u95ee\u9898\uff08Longest Common Sequence\uff09",
            "title": "\u52a8\u6001\u89c4\u5212"
        },
        {
            "location": "/leetcode-summarize/#_8",
            "text": "LeetCode \u7b2c 435 \u9898   [leetcode] 402. Remove K Digits \u89e3\u9898\u62a5\u544a\uff1ahttps://blog.csdn.net/qq508618087/article/details/52584133",
            "title": "\u8d2a\u5fc3\u7b97\u6cd5"
        },
        {
            "location": "/leetcode-summarize/#_9",
            "text": "",
            "title": "\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784"
        },
        {
            "location": "/leetcode-summarize/#_10",
            "text": "",
            "title": "\u7ebf\u6bb5\u6811"
        },
        {
            "location": "/leetcode-summarize/#trie",
            "text": "LeetCode \u7b2c 208 \u9898 Implement Trie (Prefix Tree)  LeetCode \u7b2c 211 \u9898 Add and Search Word - Data structure design  LeetCode \u7b2c 677 \u9898 Map Sum Pairs    \u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22 https://leetcode-cn.com/problems/prefix-and-suffix-search/description/      \u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd https://leetcode-cn.com/problems/longest-word-in-dictionary/description/",
            "title": "\u5355\u8bcd\u67e5\u627e\u6811 Trie"
        },
        {
            "location": "/leetcode-summarize/#_11",
            "text": "",
            "title": "\u5176\u5b83\u6280\u5de7"
        },
        {
            "location": "/leetcode-summarize/#_12",
            "text": "",
            "title": "\u6eda\u52a8\u6570\u7ec4\uff08\u8282\u7ea6\u7a7a\u95f4\uff09"
        },
        {
            "location": "/leetcode-summarize/#_13",
            "text": "",
            "title": "\u4f7f\u7528\u72b6\u6001\u673a\u753b\u56fe\u6c42\u89e3"
        },
        {
            "location": "/leetcode-summarize/#_14",
            "text": "",
            "title": "\u4f4d\u8fd0\u7b97\u5e2e\u4e0a\u7684\u5927\u5fd9"
        }
    ]
}