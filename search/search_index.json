{
    "docs": [
        {
            "location": "/leetcode-0066-plus-one/",
            "text": "66. Plus One\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\n\u975e\u8d1f\u6574\u6570\n\u7ec4\u6210\u7684\n\u975e\u7a7a\n\u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002\n\n\n\u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n [1,2,3]\n\n\u8f93\u51fa:\n [1,2,4]\n\n\u89e3\u91ca:\n \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n [4,3,2,1]\n\n\u8f93\u51fa:\n [4,3,2,2]\n\n\u89e3\u91ca:\n \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n66. Plus One\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n66. \u52a0\u4e00\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    public int[] plusOne(int[] digits) {\n        int len = digits.length;\n        if (len == 0) {\n            return new int[0];\n        }\n        int carry = 1;\n        // \u5c31\u60f3\u6211\u4eec\u624b\u52a8\u505a\u52a0\u6cd5\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\n        for (int i = len - 1; i >= 0; i--) {\n            int sum = digits[i] + carry;\n            digits[i] = sum % 10;\n            carry = sum / 10;\n            // \u5982\u679c\u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u9a6c\u4e0a\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\n            // \u6709\u4e86\u8fd9\u4e00\u6b65\u5224\u65ad\uff0c\u5c31\u4e0d\u5fc5\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u4e86\n            if (carry == 0) {\n                return digits;\n            }\n        }\n        if (carry == 1) {\n            int[] res = new int[len + 1];\n            res[0] = 1;\n            for (int i = 1; i < len + 1; i++) {\n                res[i] = digits[i - 1];\n            }\n            return res;\n        }\n        return digits;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {9, 9, 9, 9};\n        Solution solution = new Solution();\n        int[] plusOne = solution.plusOne(nums);\n        System.out.println(Arrays.toString(plusOne));\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        if len(digits) == 0:\n            return []\n        # \u8fdb\u4f4d\u6807\u8bc6\n        carry = 1\n\n        for i in range(len(digits) - 1, -1, -1):\n\n            s = digits[i] + carry\n            digits[i] = s % 10\n            # \u6ce8\u610f\uff1a\u6574\u9664\u8981\u4f7f\u7528 //\n            carry = s // 10\n\n            if carry == 0:\n                return digits\n        print(digits, carry)\n\n        if carry == 1:\n            return [1] + digits\n\n\nif __name__ == '__main__':\n    digits = [9, 9, 9, 9]\n    solution = Solution()\n    result = solution.plusOne(digits)\n    print(result)\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0066-plus-one\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "66. Plus One"
        },
        {
            "location": "/leetcode-0066-plus-one/#66-plus-one",
            "text": "",
            "title": "66. Plus One"
        },
        {
            "location": "/leetcode-0066-plus-one/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a \u975e\u8d1f\u6574\u6570 \u7ec4\u6210\u7684 \u975e\u7a7a \u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002  \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  [1,2,3] \u8f93\u51fa:  [1,2,4] \u89e3\u91ca:  \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [4,3,2,1] \u8f93\u51fa:  [4,3,2,2] \u89e3\u91ca:  \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 66. Plus One   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 66. \u52a0\u4e00   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0066-plus-one/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0066-plus-one/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0066-plus-one/#1",
            "text": "Java \u5199\u6cd5\uff1a  import java.util.Arrays;\n\npublic class Solution {\n\n    public int[] plusOne(int[] digits) {\n        int len = digits.length;\n        if (len == 0) {\n            return new int[0];\n        }\n        int carry = 1;\n        // \u5c31\u60f3\u6211\u4eec\u624b\u52a8\u505a\u52a0\u6cd5\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\n        for (int i = len - 1; i >= 0; i--) {\n            int sum = digits[i] + carry;\n            digits[i] = sum % 10;\n            carry = sum / 10;\n            // \u5982\u679c\u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u9a6c\u4e0a\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\n            // \u6709\u4e86\u8fd9\u4e00\u6b65\u5224\u65ad\uff0c\u5c31\u4e0d\u5fc5\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u4e86\n            if (carry == 0) {\n                return digits;\n            }\n        }\n        if (carry == 1) {\n            int[] res = new int[len + 1];\n            res[0] = 1;\n            for (int i = 1; i < len + 1; i++) {\n                res[i] = digits[i - 1];\n            }\n            return res;\n        }\n        return digits;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {9, 9, 9, 9};\n        Solution solution = new Solution();\n        int[] plusOne = solution.plusOne(nums);\n        System.out.println(Arrays.toString(plusOne));\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        if len(digits) == 0:\n            return []\n        # \u8fdb\u4f4d\u6807\u8bc6\n        carry = 1\n\n        for i in range(len(digits) - 1, -1, -1):\n\n            s = digits[i] + carry\n            digits[i] = s % 10\n            # \u6ce8\u610f\uff1a\u6574\u9664\u8981\u4f7f\u7528 //\n            carry = s // 10\n\n            if carry == 0:\n                return digits\n        print(digits, carry)\n\n        if carry == 1:\n            return [1] + digits\n\n\nif __name__ == '__main__':\n    digits = [9, 9, 9, 9]\n    solution = Solution()\n    result = solution.plusOne(digits)\n    print(result)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0066-plus-one  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0067-add-binary/",
            "text": "67. Add Binary\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002\n\n\n\u8f93\u5165\u4e3a\n\u975e\u7a7a\n\u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57\u00a0\n1\n\u00a0\u548c\u00a0\n0\n\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n a = \"11\", b = \"1\"\n\n\u8f93\u51fa:\n \"100\"\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n a = \"1010\", b = \"1011\"\n\n\u8f93\u51fa:\n \"10101\"\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n67. Add Binary\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n67. \u4e8c\u8fdb\u5236\u6c42\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public String addBinary(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int maxLen = Math.max(aLen, bLen);\n\n        StringBuilder sa = new StringBuilder(a).reverse();\n        StringBuilder sb = new StringBuilder(b).reverse();\n        while (sa.length() < maxLen) {\n            sa.append(\"0\");\n        }\n        while (sb.length() < maxLen) {\n            sb.append(\"0\");\n        }\n        StringBuilder res = new StringBuilder();\n        int sum = 0;\n        int num1;\n        int num2;\n        for (int i = 0; i < maxLen; i++) {\n            num1 = sa.charAt(i) - '0';\n            num2 = sb.charAt(i) - '0';\n            if (sum + num1 + num2 > 1) {\n                res.append(sum + num1 + num2 - 2);\n                sum = 1;\n            } else {\n                res.append(sum + num1 + num2);\n                sum = 0;\n            }\n        }\n        if (sum == 1) {\n            res.append(\"1\");\n        }\n        return res.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String a = \"1010\";\n        String b = \"1011\";\n        Solution solution = new Solution();\n        String addBinary = solution.addBinary(a, b);\n        System.out.println(addBinary);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        alen = len(a)\n        blen = len(b)\n        maxlen = max(alen, blen)\n        ra = list(reversed(a))\n        rb = list(reversed(b))\n        while len(ra) < maxlen:\n            ra.append('0')\n        while len(rb) < maxlen:\n            rb.append('0')\n\n        result = []\n        s = 0\n        zero = ord('0')\n        for i in range(maxlen):\n            num1 = ord(ra[i]) - zero\n            num2 = ord(rb[i]) - zero\n            if s + num1 + num2 > 1:\n                result.append(str(s + num1 + num2 - 2))\n                s = 1\n            else:\n                result.append(str(s + num1 + num2))\n                s = 0\n        if s == 1:\n            result.append(str(1))\n        return ''.join(list(reversed(result)))\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def addBinary(self, a, b):\n        return bin(int(a, 2) + int(b, 2))[2:]\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)\n\n    result1 = int(a, 2)\n    result2 = int(b, 2)\n    print(result1)\n    print(result2)\n\n    print(bin(result1 + result2))\n    print(bin(result1 + result2)[2:])\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0067-add-binary\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "67. Add Binary"
        },
        {
            "location": "/leetcode-0067-add-binary/#67-add-binary",
            "text": "",
            "title": "67. Add Binary"
        },
        {
            "location": "/leetcode-0067-add-binary/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002  \u8f93\u5165\u4e3a \u975e\u7a7a \u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57\u00a0 1 \u00a0\u548c\u00a0 0 \u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  a = \"11\", b = \"1\" \u8f93\u51fa:  \"100\"  \u793a\u4f8b\u00a02:  \u8f93\u5165:  a = \"1010\", b = \"1011\" \u8f93\u51fa:  \"10101\"    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 67. Add Binary   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 67. \u4e8c\u8fdb\u5236\u6c42\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0067-add-binary/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0067-add-binary/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0067-add-binary/#1",
            "text": "public class Solution {\n\n    public String addBinary(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int maxLen = Math.max(aLen, bLen);\n\n        StringBuilder sa = new StringBuilder(a).reverse();\n        StringBuilder sb = new StringBuilder(b).reverse();\n        while (sa.length() < maxLen) {\n            sa.append(\"0\");\n        }\n        while (sb.length() < maxLen) {\n            sb.append(\"0\");\n        }\n        StringBuilder res = new StringBuilder();\n        int sum = 0;\n        int num1;\n        int num2;\n        for (int i = 0; i < maxLen; i++) {\n            num1 = sa.charAt(i) - '0';\n            num2 = sb.charAt(i) - '0';\n            if (sum + num1 + num2 > 1) {\n                res.append(sum + num1 + num2 - 2);\n                sum = 1;\n            } else {\n                res.append(sum + num1 + num2);\n                sum = 0;\n            }\n        }\n        if (sum == 1) {\n            res.append(\"1\");\n        }\n        return res.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String a = \"1010\";\n        String b = \"1011\";\n        Solution solution = new Solution();\n        String addBinary = solution.addBinary(a, b);\n        System.out.println(addBinary);\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        alen = len(a)\n        blen = len(b)\n        maxlen = max(alen, blen)\n        ra = list(reversed(a))\n        rb = list(reversed(b))\n        while len(ra) < maxlen:\n            ra.append('0')\n        while len(rb) < maxlen:\n            rb.append('0')\n\n        result = []\n        s = 0\n        zero = ord('0')\n        for i in range(maxlen):\n            num1 = ord(ra[i]) - zero\n            num2 = ord(rb[i]) - zero\n            if s + num1 + num2 > 1:\n                result.append(str(s + num1 + num2 - 2))\n                s = 1\n            else:\n                result.append(str(s + num1 + num2))\n                s = 0\n        if s == 1:\n            result.append(str(1))\n        return ''.join(list(reversed(result)))\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0067-add-binary/#2",
            "text": "Python \u5199\u6cd5\uff1a  class Solution:\n    def addBinary(self, a, b):\n        return bin(int(a, 2) + int(b, 2))[2:]\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)\n\n    result1 = int(a, 2)\n    result2 = int(b, 2)\n    print(result1)\n    print(result2)\n\n    print(bin(result1 + result2))\n    print(bin(result1 + result2)[2:])  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0067-add-binary  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/",
            "text": "83. Remove Duplicates from Sorted List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n 1->1->2\n\n\u8f93\u51fa:\n 1->2\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n 1->1->2->3->3\n\n\u8f93\u51fa:\n 1->2->3\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n83. Remove Duplicates from Sorted List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002\n\n\n\n\n\u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002\n\n\n\n\n\n\n\n\n\u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b  \n\n\n\u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b  \n\n\n\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f \nwhile(cur.next!=null)\n\uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981 \ncur\n \u548c \nnext\n \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528 \npre\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # \u5148\u5224\u65ad\u6781\u7aef\u6761\u4ef6\n        if head is None or head.next is None:\n            return head\n        cur = head\n        while cur.next:\n            next = cur.next\n            if next.val == cur.val:\n                # q \u5411\u540e\u632a\u52a8\u4e00\u4f4d\n                cur.next = next.next\n                next.next = None\n            else:\n                cur = cur.next\n        return head\n\n\n\n\n\u8bf4\u660e\uff1a\u5199\u591a\u4e86\u5c31\u89c9\u5f97\u601d\u8def\u6bd4\u8f83\u81ea\u7136\u4e86\u3002\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0083-remove-duplicates-from-sorted-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "83. Remove Duplicates from Sorted List"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#83-remove-duplicates-from-sorted-list",
            "text": "",
            "title": "83. Remove Duplicates from Sorted List"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  1->1->2 \u8f93\u51fa:  1->2  \u793a\u4f8b\u00a02:  \u8f93\u5165:  1->1->2->3->3 \u8f93\u51fa:  1->2->3    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 83. Remove Duplicates from Sorted List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002   \u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002     \u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b    \u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b    \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f  while(cur.next!=null) \uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981  cur  \u548c  next  \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528  pre \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}  Python \u5199\u6cd5\uff1a  # Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # \u5148\u5224\u65ad\u6781\u7aef\u6761\u4ef6\n        if head is None or head.next is None:\n            return head\n        cur = head\n        while cur.next:\n            next = cur.next\n            if next.val == cur.val:\n                # q \u5411\u540e\u632a\u52a8\u4e00\u4f4d\n                cur.next = next.next\n                next.next = None\n            else:\n                cur = cur.next\n        return head  \u8bf4\u660e\uff1a\u5199\u591a\u4e86\u5c31\u89c9\u5f97\u601d\u8def\u6bd4\u8f83\u81ea\u7136\u4e86\u3002  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0083-remove-duplicates-from-sorted-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/",
            "text": "86. Partition List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n86. Partition List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n86. \u5206\u9694\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\npublic class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "86. Partition List"
        },
        {
            "location": "/leetcode-0086-partition-list/#86-partition-list",
            "text": "",
            "title": "86. Partition List"
        },
        {
            "location": "/leetcode-0086-partition-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 86. Partition List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 86. \u5206\u9694\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0086-partition-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0086-partition-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0086-partition-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/#2",
            "text": "public class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/",
            "text": "88. Merge Sorted Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4\u00a0\nnums1 \n\u548c \nnums2\n\uff0c\u5c06 \nnums2 \n\u5408\u5e76\u5230\u00a0\nnums1\u00a0\n\u4e2d\n\uff0c\n\u4f7f\u5f97\u00a0\nnum1 \n\u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\n\n\n\u8bf4\u660e:\n\n\n\n\n\u521d\u59cb\u5316\u00a0\nnums1\n \u548c \nnums2\n \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a\u00a0\nm\n \u548c \nn\n\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0\nnums1\u00a0\n\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e\u00a0\nm + n\n\uff09\u6765\u4fdd\u5b58 \nnums2\n \u4e2d\u7684\u5143\u7d20\u3002\n\n\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n\n\u8f93\u51fa:\n\u00a0[1,2,2,3,5,6]\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n88. Merge Sorted Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6559\u79d1\u4e66\u4e0a\u4ecb\u7ecd\u7684\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u989d\u5916\u7684\u8f85\u52a9\u6570\u7ec4\u5b8c\u6210\u5f52\u5e76\u3002\u8fd9\u9053\u9898\u7684\u9898\u76ee\u4e2d\u8bf4\u4e86\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002\u201d\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4ece\u540e\u5411\u524d\u8fdb\u884c\u5f52\u5e76\uff0c\u8c01\u5927\u8c01\u51fa\u5217\u5230 nums1 \u7684\u672b\u5c3e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\u4e86\u3002\u6211\u60f3\u8fd9\u9053\u9898\u5e94\u8be5\u5c31\u662f\u8003\u67e5\u6211\u4eec\u5f80\u8fd9\u4e2a\u65b9\u5411\u601d\u8003\u7684\u3002\n\n\n\n\n\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u5199\u6cd5\uff0c\u57fa\u672c\u4e0a\u6a21\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u4e3a\u5408\u5e76\u4ee5\u540e\u7684\u5143\u7d20\u4e2a\u6570\u662f\u77e5\u9053\u7684\uff0c\u6bcf\u6b21\u6bd4\u8f83\u90fd\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u4f1a\u5148\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5b8c\u6210\u7684\u60c5\u51b5\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u63a8\u8350\u7684\u5199\u6cd5\u3002\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int len = m + n;\n        int i = m - 1;\n        int j = n - 1;\n        for (int k = len - 1; k >= 0; k--) {\n            if (i == -1) {\n                // i \u7528\u5b8c\u4e86\uff0cj \u51fa\u5217\n                nums1[k] = nums2[j];\n                j--;\n            } else if (j == -1) {\n                // j \u7528\u5b8c\u4e86\uff0ci \u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else if (nums1[i] >= nums2[j]) {\n                // \u8c01\u5927\u8c01\u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else {\n                assert nums1[i] < nums2[j];\n                nums1[k] = nums2[j];\n                j--;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 2, 3, 0, 0, 0};\n        int m = 3;\n        int[] nums2 = {2, 5, 6};\n        int n = 3;\n        Solution solution = new Solution();\n        solution.merge(nums1, m, nums2, n);\n        System.out.println(Arrays.toString(nums1));\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u6559\u79d1\u4e66\u4e0a\u5f52\u5e76\u6392\u5e8f\u7684\u5199\u6cd5\u3002\n\n\npublic class Solution2 {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        // \u56e0\u4e3a\u8981\u5728 num1 \u4e0a\u4fee\u6539\uff0c\u628a nums1 \u8fd4\u56de\u56de\u53bb\n        // \u56e0\u6b64\uff0c\u628a num1 \u590d\u5236\u4e00\u4efd\n        int[] nums3 = new int[m];\n        System.arraycopy(nums1, 0, nums3, 0, m);\n        // \u6570\u7ec43\n        int i = 0;\n        // \u6570\u7ec42\n        int j = 0;\n        int length = m + n;\n        for (int k = 0; k < length; k++) {\n            if (i == m) {\n                nums1[k] = nums2[j];\n                j++;\n            } else if (j == n) {\n                nums1[k] = nums3[i];\n                i++;\n            } else if (nums3[i] < nums2[j]) {\n                nums1[k] = nums3[i];\n                i++;\n            } else {\n                nums1[k] = nums2[j];\n                j++;\n            }\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0088-merge-sorted-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "88. Merge Sorted Array"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#88-merge-sorted-array",
            "text": "",
            "title": "88. Merge Sorted Array"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4\u00a0 nums1  \u548c  nums2 \uff0c\u5c06  nums2  \u5408\u5e76\u5230\u00a0 nums1\u00a0 \u4e2d \uff0c \u4f7f\u5f97\u00a0 num1  \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002  \u8bf4\u660e:   \u521d\u59cb\u5316\u00a0 nums1  \u548c  nums2  \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a\u00a0 m  \u548c  n \u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0 nums1\u00a0 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e\u00a0 m + n \uff09\u6765\u4fdd\u5b58  nums2  \u4e2d\u7684\u5143\u7d20\u3002   \u793a\u4f8b:  \u8f93\u5165: \nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3 \u8f93\u51fa: \u00a0[1,2,2,3,5,6]    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 88. Merge Sorted Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6559\u79d1\u4e66\u4e0a\u4ecb\u7ecd\u7684\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u989d\u5916\u7684\u8f85\u52a9\u6570\u7ec4\u5b8c\u6210\u5f52\u5e76\u3002\u8fd9\u9053\u9898\u7684\u9898\u76ee\u4e2d\u8bf4\u4e86\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002\u201d\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4ece\u540e\u5411\u524d\u8fdb\u884c\u5f52\u5e76\uff0c\u8c01\u5927\u8c01\u51fa\u5217\u5230 nums1 \u7684\u672b\u5c3e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\u4e86\u3002\u6211\u60f3\u8fd9\u9053\u9898\u5e94\u8be5\u5c31\u662f\u8003\u67e5\u6211\u4eec\u5f80\u8fd9\u4e2a\u65b9\u5411\u601d\u8003\u7684\u3002   \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u5199\u6cd5\uff0c\u57fa\u672c\u4e0a\u6a21\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u4e3a\u5408\u5e76\u4ee5\u540e\u7684\u5143\u7d20\u4e2a\u6570\u662f\u77e5\u9053\u7684\uff0c\u6bcf\u6b21\u6bd4\u8f83\u90fd\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u4f1a\u5148\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5b8c\u6210\u7684\u60c5\u51b5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#1",
            "text": "import java.util.Arrays;\n\npublic class Solution {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int len = m + n;\n        int i = m - 1;\n        int j = n - 1;\n        for (int k = len - 1; k >= 0; k--) {\n            if (i == -1) {\n                // i \u7528\u5b8c\u4e86\uff0cj \u51fa\u5217\n                nums1[k] = nums2[j];\n                j--;\n            } else if (j == -1) {\n                // j \u7528\u5b8c\u4e86\uff0ci \u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else if (nums1[i] >= nums2[j]) {\n                // \u8c01\u5927\u8c01\u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else {\n                assert nums1[i] < nums2[j];\n                nums1[k] = nums2[j];\n                j--;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 2, 3, 0, 0, 0};\n        int m = 3;\n        int[] nums2 = {2, 5, 6};\n        int n = 3;\n        Solution solution = new Solution();\n        solution.merge(nums1, m, nums2, n);\n        System.out.println(Arrays.toString(nums1));\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u63a8\u8350\u7684\u5199\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#2",
            "text": "public class Solution2 {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        // \u56e0\u4e3a\u8981\u5728 num1 \u4e0a\u4fee\u6539\uff0c\u628a nums1 \u8fd4\u56de\u56de\u53bb\n        // \u56e0\u6b64\uff0c\u628a num1 \u590d\u5236\u4e00\u4efd\n        int[] nums3 = new int[m];\n        System.arraycopy(nums1, 0, nums3, 0, m);\n        // \u6570\u7ec43\n        int i = 0;\n        // \u6570\u7ec42\n        int j = 0;\n        int length = m + n;\n        for (int k = 0; k < length; k++) {\n            if (i == m) {\n                nums1[k] = nums2[j];\n                j++;\n            } else if (j == n) {\n                nums1[k] = nums3[i];\n                i++;\n            } else if (nums3[i] < nums2[j]) {\n                nums1[k] = nums3[i];\n                i++;\n            } else {\n                nums1[k] = nums2[j];\n                j++;\n            }\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0088-merge-sorted-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u6559\u79d1\u4e66\u4e0a\u5f52\u5e76\u6392\u5e8f\u7684\u5199\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/",
            "text": "328. Odd Even Linked List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n328. Odd Even Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n328. \u5947\u5076\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002\n+ \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 \nLeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \n \u5b8c\u6210\u3002\n\n+ \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\n\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b\n\n\n\u6ce8\u610f2\uff1a\u5728 \nwhile\n \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 \nnext\n \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a \nnull\n \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 \nnext\n \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\npublic class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\n\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b\n\n\n\u6ce8\u610f2\uff1a\u5728 \nwhile\n \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 \nnext\n \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a \nnull\n \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 \nnext\n \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\npublic class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "328. Odd Even Linked List"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#328-odd-even-linked-list",
            "text": "",
            "title": "328. Odd Even Linked List"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002\n+ \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528  LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2   \u5b8c\u6210\u3002 \n+ \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#2",
            "text": "\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b  \u6ce8\u610f2\uff1a\u5728  while  \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684  next  \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a  null  \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8  next  \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a    public class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#2_1",
            "text": "\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b  \u6ce8\u610f2\uff1a\u5728  while  \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684  next  \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a  null  \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8  next  \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a    public class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/",
            "text": "677. Map Sum Pairs\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n677. Map Sum Pairs\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n677. \u952e\u503c\u6620\u5c04\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528 \nTrie\n \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684 \nisWord\n \u8bbe\u8ba1\u6210 \nvalue\n \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765 \nisWord\n \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002\n+ \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002\n+ \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.HashMap;\n\npublic class MapSum {\n\n    private Node root;\n\n    private class Node {\n        private int value;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this(0);\n        }\n\n        public Node(int value) {\n            this.value = value;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public MapSum() {\n        root = new Node();\n    }\n\n    public void insert(String key, int val) {\n        Node curNode = root;\n        for (int i = 0; i < key.length(); i++) {\n            Character c = key.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        curNode.value = val;\n    }\n\n    // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83\n    public int sum(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return 0;\n            }\n        }\n        return sum(curNode);\n    }\n\n    // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c\n    private int sum(Node node) {\n        int res = node.value;\n        for (Character key : node.next.keySet()) {\n            // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9\n            res += sum(node.next.get(key));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3\n        // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5\n        MapSum2 mapSum = new MapSum2();\n        mapSum.insert(\"apple\", 3);\n        int sum1 = mapSum.sum(\"ap\");\n        System.out.println(sum1);\n        mapSum.insert(\"app\", 2);\n        int sum2 = mapSum.sum(\"ap\");\n        System.out.println(sum2);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass MapSum(object):\n    # \u8bbe\u8ba1\u6210\u5185\u90e8\u7c7b\uff0c\u5916\u90e8\u6ca1\u6709\u5fc5\u8981\u77e5\u9053\n    class TrieNode:\n        def __init__(self):\n            self.val = 0\n            self.next = {}\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = MapSum.TrieNode()\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n\n        cur_node = self.root\n\n        for c in key:\n            if c not in cur_node.next.keys():\n                cur_node.next[c] = MapSum.TrieNode()\n            cur_node = cur_node.next[c]\n        cur_node.val = val\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        cur_node = self.root\n\n        for c in prefix:\n            if c in cur_node.next.keys():\n                cur_node = cur_node.next[c]\n            else:\n                return 0\n        return self.__sum(cur_node)\n\n    # \u8fd9\u91cc\u7528\u5230\u4e86\u9012\u5f52\n    def __sum(self, node):\n        res = node.val  # \u8fd9\u91cc\u4e0d\u80fd\u521d\u59cb\u5316\u4e3a 0\n        for c in node.next.keys():\n            res += self.__sum(node.next[c])\n        return res\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)",
            "title": "677. Map Sum Pairs"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#677-map-sum-pairs",
            "text": "",
            "title": "677. Map Sum Pairs"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 677. Map Sum Pairs   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 677. \u952e\u503c\u6620\u5c04   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528  Trie  \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684  isWord  \u8bbe\u8ba1\u6210  value  \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765  isWord  \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002\n+ \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002\n+ \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#1",
            "text": "Java \u5199\u6cd5\uff1a  import java.util.HashMap;\n\npublic class MapSum {\n\n    private Node root;\n\n    private class Node {\n        private int value;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this(0);\n        }\n\n        public Node(int value) {\n            this.value = value;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public MapSum() {\n        root = new Node();\n    }\n\n    public void insert(String key, int val) {\n        Node curNode = root;\n        for (int i = 0; i < key.length(); i++) {\n            Character c = key.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        curNode.value = val;\n    }\n\n    // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83\n    public int sum(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return 0;\n            }\n        }\n        return sum(curNode);\n    }\n\n    // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c\n    private int sum(Node node) {\n        int res = node.value;\n        for (Character key : node.next.keySet()) {\n            // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9\n            res += sum(node.next.get(key));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3\n        // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5\n        MapSum2 mapSum = new MapSum2();\n        mapSum.insert(\"apple\", 3);\n        int sum1 = mapSum.sum(\"ap\");\n        System.out.println(sum1);\n        mapSum.insert(\"app\", 2);\n        int sum2 = mapSum.sum(\"ap\");\n        System.out.println(sum2);\n    }\n}  Python \u5199\u6cd5\uff1a  class MapSum(object):\n    # \u8bbe\u8ba1\u6210\u5185\u90e8\u7c7b\uff0c\u5916\u90e8\u6ca1\u6709\u5fc5\u8981\u77e5\u9053\n    class TrieNode:\n        def __init__(self):\n            self.val = 0\n            self.next = {}\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = MapSum.TrieNode()\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n\n        cur_node = self.root\n\n        for c in key:\n            if c not in cur_node.next.keys():\n                cur_node.next[c] = MapSum.TrieNode()\n            cur_node = cur_node.next[c]\n        cur_node.val = val\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        cur_node = self.root\n\n        for c in prefix:\n            if c in cur_node.next.keys():\n                cur_node = cur_node.next[c]\n            else:\n                return 0\n        return self.__sum(cur_node)\n\n    # \u8fd9\u91cc\u7528\u5230\u4e86\u9012\u5f52\n    def __sum(self, node):\n        res = node.val  # \u8fd9\u91cc\u4e0d\u80fd\u521d\u59cb\u5316\u4e3a 0\n        for c in node.next.keys():\n            res += self.__sum(node.next[c])\n        return res\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)",
            "title": "\u53c2\u8003\u89e3\u7b541"
        }
    ]
}