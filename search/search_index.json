{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\n\u642d\u5efa\u8fd9\u4e2a\u535a\u5ba2\u7684\u53c2\u8003\u8d44\u6599\n\n\nmkdocs \u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\uff08\u6765\u81ea mkdocs \u5b98\u65b9\u4e2d\u6587\u7f51\u7ad9\uff09\n\n\n\u81ea\u52a8\u53d1\u5e03\u5230 GitHub \u4e0a\n\n\n1\u3001\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e \nrepo_url\n \u9879\uff08\u53ef\u80fd\u8fde\u8fd9\u4e00\u6b65\u90fd\u4e0d\u7528\u5427\uff0c\u6211\u611f\u89c9\u8ddf\u4e0b\u4e00\u6b65\u91cd\u590d\u4e86\uff09\uff1a\n\n\nrepo_url: https://github.com/liweiwei1419/leetcode-solution.git\n\n\n\n\n2\u3001\u5728\u6211\u4eec\u7684 mkdocs \u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u521d\u59cb\u5316 git \u9879\u76ee\uff0c\u5e76\u4e14\u6dfb\u52a0\u8fdc\u7a0b GitHub \u4ed3\u5e93\u7684\u94fe\u63a5\uff1a\n\n\ngit init\ngit remote add origin <GitHub \u4ed3\u5e93\u94fe\u63a5>\n\n\n\n\n3\u3001\u6267\u884c \nmkdocs gh-deploy\n \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5c06 site \u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\u53d1\u5e03\u5230 GitHub \u4ed3\u5e93\u7684 \ngh-pages \u5206\u652f\n\uff1b\n\n4\u3001\u901a\u8fc7\u5730\u5740 \nhttps://<GitHub \u7528\u6237\u540d>.github.io/<GitHub \u4ed3\u5e93\u540d>/\n \u53ef\u4ee5\u8bbf\u95ee\u3002\n\u4f8b\u5982\u6211\u7684\u5730\u5740\u5c31\u662f\uff1a\nhttps://liweiwei1419.github.io/leetcode-solution/\n\u3002",
            "title": "Welcome to MkDocs"
        },
        {
            "location": "/#welcome-to-mkdocs",
            "text": "For full documentation visit  mkdocs.org .",
            "title": "Welcome to MkDocs"
        },
        {
            "location": "/#commands",
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "Commands"
        },
        {
            "location": "/#project-layout",
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.",
            "title": "Project layout"
        },
        {
            "location": "/#_1",
            "text": "mkdocs \u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\uff08\u6765\u81ea mkdocs \u5b98\u65b9\u4e2d\u6587\u7f51\u7ad9\uff09",
            "title": "\u642d\u5efa\u8fd9\u4e2a\u535a\u5ba2\u7684\u53c2\u8003\u8d44\u6599"
        },
        {
            "location": "/#github",
            "text": "1\u3001\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e  repo_url  \u9879\uff08\u53ef\u80fd\u8fde\u8fd9\u4e00\u6b65\u90fd\u4e0d\u7528\u5427\uff0c\u6211\u611f\u89c9\u8ddf\u4e0b\u4e00\u6b65\u91cd\u590d\u4e86\uff09\uff1a  repo_url: https://github.com/liweiwei1419/leetcode-solution.git  2\u3001\u5728\u6211\u4eec\u7684 mkdocs \u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u521d\u59cb\u5316 git \u9879\u76ee\uff0c\u5e76\u4e14\u6dfb\u52a0\u8fdc\u7a0b GitHub \u4ed3\u5e93\u7684\u94fe\u63a5\uff1a  git init\ngit remote add origin <GitHub \u4ed3\u5e93\u94fe\u63a5>  3\u3001\u6267\u884c  mkdocs gh-deploy  \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5c06 site \u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\u53d1\u5e03\u5230 GitHub \u4ed3\u5e93\u7684  gh-pages \u5206\u652f \uff1b \n4\u3001\u901a\u8fc7\u5730\u5740  https://<GitHub \u7528\u6237\u540d>.github.io/<GitHub \u4ed3\u5e93\u540d>/  \u53ef\u4ee5\u8bbf\u95ee\u3002\n\u4f8b\u5982\u6211\u7684\u5730\u5740\u5c31\u662f\uff1a https://liweiwei1419.github.io/leetcode-solution/ \u3002",
            "title": "\u81ea\u52a8\u53d1\u5e03\u5230 GitHub \u4e0a"
        },
        {
            "location": "/leetcode-0001-two-sum/",
            "text": "two-sum\n\n\n\u539f\u9898\u6982\u8ff0\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a1. \u4e24\u6570\u4e4b\u548c\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u53c2\u8003\u89e3\u7b54",
            "title": "two-sum"
        },
        {
            "location": "/leetcode-0001-two-sum/#two-sum",
            "text": "",
            "title": "two-sum"
        },
        {
            "location": "/leetcode-0001-two-sum/#_1",
            "text": "\u4e2d\u6587\u7f51\u5740\uff1a1. \u4e24\u6570\u4e4b\u548c",
            "title": "\u539f\u9898\u6982\u8ff0"
        },
        {
            "location": "/leetcode-0001-two-sum/#_2",
            "text": "",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0001-two-sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0002-add-two-numbers/",
            "text": "",
            "title": "Leetcode 0002 add two numbers"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/",
            "text": "remove-duplicates-from-sorted-list\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n83. Remove Duplicates from Sorted List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002\n\n\n\n\n\u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002\n\n\n\n\n\n\n\n\n\u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b  \n\n\n\u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b  \n\n\n\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f \nwhile(cur.next!=null)\n\uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981 \ncur\n \u548c \nnext\n \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528 \npre\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}",
            "title": "remove-duplicates-from-sorted-list"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#remove-duplicates-from-sorted-list",
            "text": "",
            "title": "remove-duplicates-from-sorted-list"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 83. Remove Duplicates from Sorted List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002   \u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002     \u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b    \u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b    \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f  while(cur.next!=null) \uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981  cur  \u548c  next  \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528  pre \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/",
            "text": "partition-list\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n86. Partition List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n86. \u5206\u9694\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\npublic class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "partition-list"
        },
        {
            "location": "/leetcode-0086-partition-list/#partition-list",
            "text": "",
            "title": "partition-list"
        },
        {
            "location": "/leetcode-0086-partition-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 86. Partition List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 86. \u5206\u9694\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0086-partition-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0086-partition-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0086-partition-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/#2",
            "text": "public class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/",
            "text": "reverse-linked-list-ii\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n92. Reverse Linked List II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n92. \u53cd\u8f6c\u94fe\u8868 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002\n\n\n\n\n\n\n\n\n\u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002\n\n\n\u5173\u6ce8\u4e34\u754c\u503c\uff0c\npre\n \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b\n\n\n\u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b\n\n\n\u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e \ncur\n \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c\npre\n \u4e5f\u4e0d\u53d8\uff0c\nnext\n \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728 \ncur\n \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21 \ncur\n \u7684 \nnext\n \u90fd\u4f1a\u79fb\u5230 \npre\n \u7684 \nnext\n\uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b\n\n\n\u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9 \nListNode\n \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868 \ncreateListNode\n\uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868 \nprintLinkedList\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n// \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA\n// https://www.jianshu.com/p/fbe6012c9e52\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode pre = dummyNode;\n        for (int i = 0; i < m - 1; i++) {\n            pre = pre.next;\n        }\n        ListNode cur = pre.next;\n        ListNode next;\n        for (int i = 0; i < n - m; i++) {\n            next = cur.next;\n            cur.next = next.next;\n            next.next = pre.next;\n            pre.next = next;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4);\n        System.out.println(reverseBetween);\n    }\n}",
            "title": "reverse-linked-list-ii"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#reverse-linked-list-ii",
            "text": "",
            "title": "reverse-linked-list-ii"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be  \u82f1\u6587\u7f51\u5740\uff1a 92. Reverse Linked List II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 92. \u53cd\u8f6c\u94fe\u8868 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002     \u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002  \u5173\u6ce8\u4e34\u754c\u503c\uff0c pre  \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b  \u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b  \u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e  cur  \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c pre  \u4e5f\u4e0d\u53d8\uff0c next  \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728  cur  \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21  cur  \u7684  next  \u90fd\u4f1a\u79fb\u5230  pre  \u7684  next \uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b  \u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9  ListNode  \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868  createListNode \uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868  printLinkedList \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#1",
            "text": "// \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA\n// https://www.jianshu.com/p/fbe6012c9e52\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode pre = dummyNode;\n        for (int i = 0; i < m - 1; i++) {\n            pre = pre.next;\n        }\n        ListNode cur = pre.next;\n        ListNode next;\n        for (int i = 0; i < n - m; i++) {\n            next = cur.next;\n            cur.next = next.next;\n            next.next = pre.next;\n            pre.next = next;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4);\n        System.out.println(reverseBetween);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/",
            "text": "\u586b\u5199\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n203. Remove Linked List Elements\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002\n\n\n\u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002\n\n\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002\n\n\n\u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9 \nListNode\n \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6 \ntoString()\n \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf\n\n\n// Definition for singly-linked list.\nclass ListNode {\n\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5\n    // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868\n    public ListNode(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head\n        // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de\n        this.val = arr[0];\n        ListNode cur = this;\n        for (int i = 1; i < arr.length; i++) {\n            cur.next = new ListNode(arr[i]);\n            cur = cur.next;\n        }\n    }\n\n    // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode cur = dummyNode;\n        ListNode next;\n        while (cur.next != null) {\n            if (cur.next.val == val) {\n                next = cur.next;\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09\n\n\nclass Solution2 {\n\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n    public ListNode removeElements(ListNode head, int val) {\n        // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (head == null) {\n            return head;\n        }\n        // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\n        ListNode res = removeElements(head.next, val);\n        // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n        if (head.val == val) {\n            // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389\n            return res;\n        } else {\n            head.next = res;\n            return head;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}\n\n\n\n\n\u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002\n\n\npublic class Solution3 {\n\n    public ListNode removeElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_1",
            "text": "",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_2",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 203. Remove Linked List Elements   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_3",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002  \u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002  \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002  \u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9  ListNode  \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6  toString()  \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_4",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#1",
            "text": "// Definition for singly-linked list.\nclass ListNode {\n\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5\n    // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868\n    public ListNode(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head\n        // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de\n        this.val = arr[0];\n        ListNode cur = this;\n        for (int i = 1; i < arr.length; i++) {\n            cur.next = new ListNode(arr[i]);\n            cur = cur.next;\n        }\n    }\n\n    // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode cur = dummyNode;\n        ListNode next;\n        while (cur.next != null) {\n            if (cur.next.val == val) {\n                next = cur.next;\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#2",
            "text": "class Solution2 {\n\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n    public ListNode removeElements(ListNode head, int val) {\n        // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (head == null) {\n            return head;\n        }\n        // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\n        ListNode res = removeElements(head.next, val);\n        // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n        if (head.val == val) {\n            // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389\n            return res;\n        } else {\n            head.next = res;\n            return head;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}  \u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002  public class Solution3 {\n\n    public ListNode removeElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/",
            "text": "reverse-linked-list\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n206. reverse-linked-list\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n206. \u53cd\u8f6c\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002  \n\n\n\n\n\n\n\u9700\u8981\u4e09\u4e2a\u6307\u9488 \npre\n\u3001\ncur\n\u3001\nnext\n\uff0c\u5176\u4e2d \nnext\n \u53ef\u4ee5\u5728 \ncur\n \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b  \n\n\n\u753b\u56fe\u5206\u6790 \nnext\n \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01  \n\n\n\u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f \npre\n \u8282\u70b9\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n// https://leetcode-cn.com/problems/reverse-linked-list/description/\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\n// \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790\n// \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb\n// \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de\n\n// \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002\npublic class Solution {\n\n    public ListNode reverseList(ListNode head) {\n        // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488\n        ListNode pre = null;\n        // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488\n        ListNode cur = head;\n        ListNode next;\n        while (cur != null) {\n            // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488\n            next = cur.next;\n            // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c\n            cur.next = pre;\n            // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf\n            pre = cur;\n            cur = next;\n        }\n        // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre\n        // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\n        return pre;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new  ListNode(nums);\n        System.out.println(head);\n        Solution solution = new Solution();\n        ListNode reverseList = solution.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}",
            "title": "reverse-linked-list"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#reverse-linked-list",
            "text": "",
            "title": "reverse-linked-list"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 206. reverse-linked-list   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 206. \u53cd\u8f6c\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002      \u9700\u8981\u4e09\u4e2a\u6307\u9488  pre \u3001 cur \u3001 next \uff0c\u5176\u4e2d  next  \u53ef\u4ee5\u5728  cur  \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b    \u753b\u56fe\u5206\u6790  next  \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01    \u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f  pre  \u8282\u70b9\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#1",
            "text": "// https://leetcode-cn.com/problems/reverse-linked-list/description/\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\n// \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790\n// \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb\n// \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de\n\n// \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002\npublic class Solution {\n\n    public ListNode reverseList(ListNode head) {\n        // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488\n        ListNode pre = null;\n        // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488\n        ListNode cur = head;\n        ListNode next;\n        while (cur != null) {\n            // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488\n            next = cur.next;\n            // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c\n            cur.next = pre;\n            // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf\n            pre = cur;\n            cur = next;\n        }\n        // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre\n        // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\n        return pre;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new  ListNode(nums);\n        System.out.println(head);\n        Solution solution = new Solution();\n        ListNode reverseList = solution.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/",
            "text": "longest-increasing-subsequence\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n300. Longest Increasing Subsequence\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\n\n// \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\n// 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n// https://leetcode-cn.com/problems/longest-increasing-subsequence/description/\npublic class Solution {\n\n    //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005\n    // \u4ee5\u6570\u7ec4  [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a\n    // dp \u7684\u503c\uff1a 1  1  1  2  2  3  4    4\n    // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684\n        for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c\n            int curVal = nums[i];\n            for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c\n                if (curVal > nums[j]) {\n                    dp[i] = Integer.max(dp[j] + 1, dp[i]);\n                }\n            }\n        }\n        // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c\n        int res = dp[0];\n        for (int i = 0; i < len; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};\n        Solution solution = new Solution();\n        int lengthOfLIS = solution.lengthOfLIS(nums);\n        System.out.println(lengthOfLIS);\n    }\n}",
            "title": "longest-increasing-subsequence"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#longest-increasing-subsequence",
            "text": "",
            "title": "longest-increasing-subsequence"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 300. Longest Increasing Subsequence   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#1",
            "text": "import java.util.Arrays;\n\n// \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\n// 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n// https://leetcode-cn.com/problems/longest-increasing-subsequence/description/\npublic class Solution {\n\n    //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005\n    // \u4ee5\u6570\u7ec4  [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a\n    // dp \u7684\u503c\uff1a 1  1  1  2  2  3  4    4\n    // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684\n        for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c\n            int curVal = nums[i];\n            for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c\n                if (curVal > nums[j]) {\n                    dp[i] = Integer.max(dp[j] + 1, dp[i]);\n                }\n            }\n        }\n        // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c\n        int res = dp[0];\n        for (int i = 0; i < len; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};\n        Solution solution = new Solution();\n        int lengthOfLIS = solution.lengthOfLIS(nums);\n        System.out.println(lengthOfLIS);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/",
            "text": "odd-even-linked-list\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n328. Odd Even Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n328. \u5947\u5076\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002\n+ \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 \nLeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \n \u5b8c\u6210\u3002\n\n+ \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\npublic class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "odd-even-linked-list"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#odd-even-linked-list",
            "text": "",
            "title": "odd-even-linked-list"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002\n+ \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528  LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2   \u5b8c\u6210\u3002 \n+ \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#2",
            "text": "public class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-algorithm-notes/",
            "text": "\u672a\u5b8c\u6210\u7684\u90e8\u5206\n\n\n300 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217()\n\n\n\n\n\u6709 nlogn \u590d\u6742\u5ea6\u7684\u89e3\u6cd5\n\n\n\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u89e3\u6cd5\n\n\n\n\ntyvj\uff1ahttp://www.joyoi.cn/\ntopcoder\npoj\u3001\u676d\u7535\nGoogle Sheet\ncodeforces\n\n\n\n\n\u4e24\u6570\u76f8\u52a0 https://leetcode-cn.com/problems/add-two-numbers/description/\n\n\n\n\nAdd Two Numbers\nhttps://leetcode.com/problems/add-two-numbers/description/\n\n\n\n\n\n\nAdd Two Numbers II\nhttps://leetcode.com/problems/add-two-numbers-ii/description/\n\n\n\n\n\n\n\u4e24\u6570\u76f8\u52a0 II\nhttps://leetcode-cn.com/problems/add-two-numbers-ii/description/\n\n\n\n\n\n\n\u7ec4\u5408\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u6c42\u89e3\u3002\n\n\n\u601d\u8def1\uff1a\u56e0\u4e3a\u5f88\u53ef\u80fd\u5934\u7ed3\u70b9\u88ab\u5220\u9664\uff0c\u4e3a\u4e86\u907f\u514d\u5904\u7406\u5220\u9664\u5934\u7ed3\u70b9\u7684\u4e00\u4e9b\u590d\u6742\u7684\u8ba8\u8bba\u5de5\u4f5c\uff0c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u4e00\u822c\u662f\u8fd9\u7c7b\u95ee\u9898\u5e38\u89c1\u7684\u505a\u6cd5\u3002\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5220\u9664\u3002\n\n\nBAT\u673a\u5668\u5b66\u4e60\u9762\u8bd51000\u9898\u7cfb\u5217\uff1a\u4e03\u6708\u5728\u7ebf\uff1a\nhttps://blog.csdn.net/v_july_v/article/details/7041827\n\n\n\u57fa\u672c\u6982\u5ff5\uff1a\n\u6587\u672c\u3001\u6a21\u5f0f\u3001\u524d\u7f00\u3001\u540e\u7f00\u3001\u5339\u914d\u3001\u5931\u914d\u3001\u5b57\u6bcd\u8868\u3002\n\n\n1\u3001\u66b4\u529b\u5339\u914d\uff08\u6734\u7d20\u5339\u914d\uff09\n\u7b97\u6cd5\u662f\u5341\u5206\u597d\u7406\u89e3\uff0c\u5e76\u4e14\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u66b4\u529b\u5339\u914d\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\uff1a\u5728\u4e00\u8f6e\u5339\u914d\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5339\u914d\u4e86\u5f88\u591a\u5b57\u7b26\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4f1a\u524d\u529f\u5c3d\u5f03\uff0c\u4e00\u4e0b\u5b50\u6253\u56de\u539f\u5f62\uff0c\u7ee7\u7eed\u5f00\u59cb\u4e0b\u4e00\u8f6e\u3002\n\u66b4\u529b\u5339\u914d\uff0c\u5c31\u76f8\u5f53\u4e8e\u9009\u62e9\u6392\u5e8f\u4e00\u6837\uff0c\u6bcf\u4e00\u8f6e\u90fd\u9009\u51fa\u4e00\u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u4e0b\u4e00\u8f6e\uff0c\u91cd\u65b0\u5f00\u59cb\u8dd1\uff0c\u8fd9\u79cd\u7b97\u6cd5\u4e0d\u80fd\u89c2\u5bdf\u5230\u5b57\u7b26\u4e32\u672c\u8eab\u6709\u7684\u7279\u70b9\uff0c\u8ba9\u7b97\u6cd5\u66f4\u5feb\u5730\u5b8c\u6210\u3002\n\n\n\u7c7b\u6bd4\u4e0e\u63d2\u5165\u6392\u5e8f\uff0c\u5bf9\u4e8e\u5927\u81f4\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u63d2\u5165\u6392\u5e8f\u5c31\u53ef\u4ee5\u5f88\u5feb\u5b8c\u6210\u3002\n\n\n2\u3001KMP \nnext \u6570\u7ec4\u4ee3\u8868\u5f53\u524d\u5b57\u7b26\n\u4e4b\u524d\n\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u6709\u591a\u5927\u957f\u5ea6\u7684\u76f8\u540c\u524d\u7f00\u540e\u7f00\u3002\n\n\n376\n\n\n\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7ea2\u9ed1\u6811\u5b66\u4e60\u7b14\u8bb0 http://www.cnblogs.com/Anker/archive/2013/01/30/2882773.html\nBST \u4e2d\u627e\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u9a71\u548c\u540e\u7ee7\n\n\nKMP \u7b97\u6cd5\u7406\u89e3\u76f8\u5173\u6587\u7ae0\uff1a\n\n\n\u962e\u4e00\u5cf0\u300a\u5b57\u7b26\u4e32\u5339\u914d\u7684KMP\u7b97\u6cd5\u300b\n\n\n\u4e03\u6708\u300ahttps://blog.csdn.net/v_july_v/article/details/7041827\u300b\n\n\n\u9ec4\u6d69\u52ab\u89c6\u9891\u8bb2\u89e3\n\n\nhttp://www.cnblogs.com/golove/p/3222096.html \u8fd9\u7bc7\u535a\u5ba2\u544a\u8bc9\u6211\u4eec\uff0c\u6807\u51c6 ASCII \u7801\u6709 256 \u4e2a\u5b57\u7b26\u3002\n\n\nRabin-Karp \u7b97\u6cd5\u8bb2\u89e3\u6bd4\u8f83\u7ec6\u81f4\u7684\u4e00\u7bc7\u6587\u7ae0\uff1ahttp://www.cnblogs.com/golove/p/3234673.html\nRabin-Karp \u7b97\u6cd5 Java \u5b9e\u73b0\uff1a https://blog.csdn.net/tyler_download/article/details/52457108\n\n\n\u7b97\u6cd5\u2014\u2014\u5b57\u7b26\u4e32\u5339\u914d\u4e4bRabin-Karp\u7b97\u6cd5\nhttps://blog.csdn.net/chenhanzhun/article/details/39895077\n\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u7684\u4f8b\u5b50\uff1a\nhttps://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/\n\n\n\u7b97\u6cd5\u6570\u636e\u7ed3\u6784,\u5982\u4f55\u9762\u8bd5\u8fdb\u5165google\nhttp://study.163.com/course/introduction.htm?courseId=1002942008#/courseDetail?tab=1\n\n\nLintCode \u9898\u89e3\uff1a\nhttps://github.com/awangdev/LintCode/blob/master/Java/Median.java",
            "title": "\u672a\u5b8c\u6210\u7684\u90e8\u5206"
        },
        {
            "location": "/leetcode-algorithm-notes/#_1",
            "text": "",
            "title": "\u672a\u5b8c\u6210\u7684\u90e8\u5206"
        },
        {
            "location": "/leetcode-algorithm-notes/#300",
            "text": "\u6709 nlogn \u590d\u6742\u5ea6\u7684\u89e3\u6cd5  \u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u89e3\u6cd5   tyvj\uff1ahttp://www.joyoi.cn/\ntopcoder\npoj\u3001\u676d\u7535\nGoogle Sheet\ncodeforces   \u4e24\u6570\u76f8\u52a0 https://leetcode-cn.com/problems/add-two-numbers/description/   Add Two Numbers\nhttps://leetcode.com/problems/add-two-numbers/description/    Add Two Numbers II\nhttps://leetcode.com/problems/add-two-numbers-ii/description/    \u4e24\u6570\u76f8\u52a0 II\nhttps://leetcode-cn.com/problems/add-two-numbers-ii/description/    \u7ec4\u5408\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u6c42\u89e3\u3002  \u601d\u8def1\uff1a\u56e0\u4e3a\u5f88\u53ef\u80fd\u5934\u7ed3\u70b9\u88ab\u5220\u9664\uff0c\u4e3a\u4e86\u907f\u514d\u5904\u7406\u5220\u9664\u5934\u7ed3\u70b9\u7684\u4e00\u4e9b\u590d\u6742\u7684\u8ba8\u8bba\u5de5\u4f5c\uff0c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u4e00\u822c\u662f\u8fd9\u7c7b\u95ee\u9898\u5e38\u89c1\u7684\u505a\u6cd5\u3002\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5220\u9664\u3002  BAT\u673a\u5668\u5b66\u4e60\u9762\u8bd51000\u9898\u7cfb\u5217\uff1a\u4e03\u6708\u5728\u7ebf\uff1a\nhttps://blog.csdn.net/v_july_v/article/details/7041827  \u57fa\u672c\u6982\u5ff5\uff1a\n\u6587\u672c\u3001\u6a21\u5f0f\u3001\u524d\u7f00\u3001\u540e\u7f00\u3001\u5339\u914d\u3001\u5931\u914d\u3001\u5b57\u6bcd\u8868\u3002  1\u3001\u66b4\u529b\u5339\u914d\uff08\u6734\u7d20\u5339\u914d\uff09\n\u7b97\u6cd5\u662f\u5341\u5206\u597d\u7406\u89e3\uff0c\u5e76\u4e14\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u66b4\u529b\u5339\u914d\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\uff1a\u5728\u4e00\u8f6e\u5339\u914d\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5339\u914d\u4e86\u5f88\u591a\u5b57\u7b26\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4f1a\u524d\u529f\u5c3d\u5f03\uff0c\u4e00\u4e0b\u5b50\u6253\u56de\u539f\u5f62\uff0c\u7ee7\u7eed\u5f00\u59cb\u4e0b\u4e00\u8f6e\u3002\n\u66b4\u529b\u5339\u914d\uff0c\u5c31\u76f8\u5f53\u4e8e\u9009\u62e9\u6392\u5e8f\u4e00\u6837\uff0c\u6bcf\u4e00\u8f6e\u90fd\u9009\u51fa\u4e00\u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u4e0b\u4e00\u8f6e\uff0c\u91cd\u65b0\u5f00\u59cb\u8dd1\uff0c\u8fd9\u79cd\u7b97\u6cd5\u4e0d\u80fd\u89c2\u5bdf\u5230\u5b57\u7b26\u4e32\u672c\u8eab\u6709\u7684\u7279\u70b9\uff0c\u8ba9\u7b97\u6cd5\u66f4\u5feb\u5730\u5b8c\u6210\u3002  \u7c7b\u6bd4\u4e0e\u63d2\u5165\u6392\u5e8f\uff0c\u5bf9\u4e8e\u5927\u81f4\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u63d2\u5165\u6392\u5e8f\u5c31\u53ef\u4ee5\u5f88\u5feb\u5b8c\u6210\u3002  2\u3001KMP \nnext \u6570\u7ec4\u4ee3\u8868\u5f53\u524d\u5b57\u7b26 \u4e4b\u524d \u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u6709\u591a\u5927\u957f\u5ea6\u7684\u76f8\u540c\u524d\u7f00\u540e\u7f00\u3002  376  \u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7ea2\u9ed1\u6811\u5b66\u4e60\u7b14\u8bb0 http://www.cnblogs.com/Anker/archive/2013/01/30/2882773.html\nBST \u4e2d\u627e\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u9a71\u548c\u540e\u7ee7  KMP \u7b97\u6cd5\u7406\u89e3\u76f8\u5173\u6587\u7ae0\uff1a  \u962e\u4e00\u5cf0\u300a\u5b57\u7b26\u4e32\u5339\u914d\u7684KMP\u7b97\u6cd5\u300b  \u4e03\u6708\u300ahttps://blog.csdn.net/v_july_v/article/details/7041827\u300b  \u9ec4\u6d69\u52ab\u89c6\u9891\u8bb2\u89e3  http://www.cnblogs.com/golove/p/3222096.html \u8fd9\u7bc7\u535a\u5ba2\u544a\u8bc9\u6211\u4eec\uff0c\u6807\u51c6 ASCII \u7801\u6709 256 \u4e2a\u5b57\u7b26\u3002  Rabin-Karp \u7b97\u6cd5\u8bb2\u89e3\u6bd4\u8f83\u7ec6\u81f4\u7684\u4e00\u7bc7\u6587\u7ae0\uff1ahttp://www.cnblogs.com/golove/p/3234673.html\nRabin-Karp \u7b97\u6cd5 Java \u5b9e\u73b0\uff1a https://blog.csdn.net/tyler_download/article/details/52457108  \u7b97\u6cd5\u2014\u2014\u5b57\u7b26\u4e32\u5339\u914d\u4e4bRabin-Karp\u7b97\u6cd5\nhttps://blog.csdn.net/chenhanzhun/article/details/39895077\n\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u7684\u4f8b\u5b50\uff1a\nhttps://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/  \u7b97\u6cd5\u6570\u636e\u7ed3\u6784,\u5982\u4f55\u9762\u8bd5\u8fdb\u5165google\nhttp://study.163.com/course/introduction.htm?courseId=1002942008#/courseDetail?tab=1  LintCode \u9898\u89e3\uff1a\nhttps://github.com/awangdev/LintCode/blob/master/Java/Median.java",
            "title": "300 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217()"
        },
        {
            "location": "/leetcode-articles-template/",
            "text": "\u586b\u5199\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-articles-template/#_1",
            "text": "",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-articles-template/#_2",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be  \u82f1\u6587\u7f51\u5740\uff1a   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-articles-template/#_3",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-articles-template/#_4",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-articles-template/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        }
    ]
}